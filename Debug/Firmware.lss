
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  00003106  0000319a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b12  008002dc  008002dc  00003276  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003276  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004f0  00000000  00000000  000032d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000061d1  00000000  00000000  000037c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001661  00000000  00000000  00009993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000379a  00000000  00000000  0000aff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001110  00000000  00000000  0000e790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001b90  00000000  00000000  0000f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000055b1  00000000  00000000  00011430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e0  00000000  00000000  000169e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c5 c0       	rjmp	.+394    	; 0x18c <__ctors_end>
       2:	00 00       	nop
       4:	df c3       	rjmp	.+1982   	; 0x7c4 <__vector_1>
       6:	00 00       	nop
       8:	e2 c0       	rjmp	.+452    	; 0x1ce <__bad_interrupt>
       a:	00 00       	nop
       c:	e0 c0       	rjmp	.+448    	; 0x1ce <__bad_interrupt>
       e:	00 00       	nop
      10:	de c0       	rjmp	.+444    	; 0x1ce <__bad_interrupt>
      12:	00 00       	nop
      14:	dc c0       	rjmp	.+440    	; 0x1ce <__bad_interrupt>
      16:	00 00       	nop
      18:	da c0       	rjmp	.+436    	; 0x1ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d8 c0       	rjmp	.+432    	; 0x1ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	d6 c0       	rjmp	.+428    	; 0x1ce <__bad_interrupt>
      22:	00 00       	nop
      24:	d4 c0       	rjmp	.+424    	; 0x1ce <__bad_interrupt>
      26:	00 00       	nop
      28:	d2 c0       	rjmp	.+420    	; 0x1ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d0 c0       	rjmp	.+416    	; 0x1ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	ce c0       	rjmp	.+412    	; 0x1ce <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c3       	rjmp	.+2040   	; 0x82e <__vector_13>
      36:	00 00       	nop
      38:	ca c0       	rjmp	.+404    	; 0x1ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c8 c0       	rjmp	.+400    	; 0x1ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	c6 c0       	rjmp	.+396    	; 0x1ce <__bad_interrupt>
      42:	00 00       	nop
      44:	c4 c0       	rjmp	.+392    	; 0x1ce <__bad_interrupt>
      46:	00 00       	nop
      48:	c2 c0       	rjmp	.+388    	; 0x1ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c0 c0       	rjmp	.+384    	; 0x1ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	be c0       	rjmp	.+380    	; 0x1ce <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_21>
      58:	ba c0       	rjmp	.+372    	; 0x1ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b8 c0       	rjmp	.+368    	; 0x1ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 96 13 	jmp	0x272c	; 0x272c <__vector_24>
      64:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__vector_25>
      68:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__vector_26>
      6c:	b0 c0       	rjmp	.+352    	; 0x1ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	ae c0       	rjmp	.+348    	; 0x1ce <__bad_interrupt>
      72:	00 00       	nop
      74:	ac c0       	rjmp	.+344    	; 0x1ce <__bad_interrupt>
      76:	00 00       	nop
      78:	aa c0       	rjmp	.+340    	; 0x1ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a8 c0       	rjmp	.+336    	; 0x1ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	a6 c0       	rjmp	.+332    	; 0x1ce <__bad_interrupt>
      82:	00 00       	nop
      84:	a4 c0       	rjmp	.+328    	; 0x1ce <__bad_interrupt>
      86:	00 00       	nop
      88:	a2 c0       	rjmp	.+324    	; 0x1ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a0 c0       	rjmp	.+320    	; 0x1ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_36>
      94:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__vector_37>
      98:	9a c0       	rjmp	.+308    	; 0x1ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	98 c0       	rjmp	.+304    	; 0x1ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	96 c0       	rjmp	.+300    	; 0x1ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	94 c0       	rjmp	.+296    	; 0x1ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	92 c0       	rjmp	.+292    	; 0x1ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	90 c0       	rjmp	.+288    	; 0x1ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8e c0       	rjmp	.+284    	; 0x1ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8c c0       	rjmp	.+280    	; 0x1ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8a c0       	rjmp	.+276    	; 0x1ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	88 c0       	rjmp	.+272    	; 0x1ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	86 c0       	rjmp	.+268    	; 0x1ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	84 c0       	rjmp	.+264    	; 0x1ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	82 c0       	rjmp	.+260    	; 0x1ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6b 0f       	add	r22, r27
      ce:	73 0f       	add	r23, r19
      d0:	7b 0f       	add	r23, r27
      d2:	83 0f       	add	r24, r19
      d4:	8b 0f       	add	r24, r27
      d6:	8f 0f       	add	r24, r31
      d8:	ce 0f       	add	r28, r30
      da:	f8 0f       	add	r31, r24
      dc:	f8 0f       	add	r31, r24
      de:	f8 0f       	add	r31, r24
      e0:	f8 0f       	add	r31, r24
      e2:	f8 0f       	add	r31, r24
      e4:	f8 0f       	add	r31, r24
      e6:	f8 0f       	add	r31, r24
      e8:	f8 0f       	add	r31, r24
      ea:	f8 0f       	add	r31, r24
      ec:	f8 0f       	add	r31, r24
      ee:	f8 0f       	add	r31, r24
      f0:	f8 0f       	add	r31, r24
      f2:	f8 0f       	add	r31, r24
      f4:	f8 0f       	add	r31, r24
      f6:	f8 0f       	add	r31, r24
      f8:	f8 0f       	add	r31, r24
      fa:	f8 0f       	add	r31, r24
      fc:	f8 0f       	add	r31, r24
      fe:	f8 0f       	add	r31, r24
     100:	f8 0f       	add	r31, r24
     102:	f8 0f       	add	r31, r24
     104:	f8 0f       	add	r31, r24
     106:	f8 0f       	add	r31, r24
     108:	f8 0f       	add	r31, r24
     10a:	f8 0f       	add	r31, r24
     10c:	67 0f       	add	r22, r23
     10e:	6f 0f       	add	r22, r31
     110:	77 0f       	add	r23, r23
     112:	7f 0f       	add	r23, r31
     114:	87 0f       	add	r24, r23
     116:	cc 0f       	add	r28, r28

00000118 <prvIdleTask>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     118:	0f 2e       	mov	r0, r31
     11a:	f7 eb       	ldi	r31, 0xB7	; 183
     11c:	ef 2e       	mov	r14, r31
     11e:	fd e0       	ldi	r31, 0x0D	; 13
     120:	ff 2e       	mov	r15, r31
     122:	f0 2d       	mov	r31, r0
     124:	cf e8       	ldi	r28, 0x8F	; 143
     126:	dd e0       	ldi	r29, 0x0D	; 13
     128:	27 c0       	rjmp	.+78     	; 0x178 <prvIdleTask+0x60>
     12a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vTaskSuspendAll>
     12e:	18 81       	ld	r17, Y
     130:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
     134:	11 23       	and	r17, r17
     136:	01 f1       	breq	.+64     	; 0x178 <prvIdleTask+0x60>
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	0f 92       	push	r0
     13e:	e0 91 94 0d 	lds	r30, 0x0D94
     142:	f0 91 95 0d 	lds	r31, 0x0D95
     146:	06 81       	ldd	r16, Z+6	; 0x06
     148:	17 81       	ldd	r17, Z+7	; 0x07
     14a:	c8 01       	movw	r24, r16
     14c:	02 96       	adiw	r24, 0x02	; 2
     14e:	4e d6       	rcall	.+3228   	; 0xdec <uxListRemove>
     150:	80 91 8d 0d 	lds	r24, 0x0D8D
     154:	81 50       	subi	r24, 0x01	; 1
     156:	80 93 8d 0d 	sts	0x0D8D, r24
     15a:	80 91 8e 0d 	lds	r24, 0x0D8E
     15e:	81 50       	subi	r24, 0x01	; 1
     160:	80 93 8e 0d 	sts	0x0D8E, r24
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	f8 01       	movw	r30, r16
     16a:	87 89       	ldd	r24, Z+23	; 0x17
     16c:	90 8d       	ldd	r25, Z+24	; 0x18
     16e:	0e 94 de 08 	call	0x11bc	; 0x11bc <vPortFree>
     172:	c8 01       	movw	r24, r16
     174:	0e 94 de 08 	call	0x11bc	; 0x11bc <vPortFree>
     178:	80 91 8e 0d 	lds	r24, 0x0D8E
     17c:	81 11       	cpse	r24, r1
     17e:	d5 cf       	rjmp	.-86     	; 0x12a <prvIdleTask+0x12>
     180:	f7 01       	movw	r30, r14
     182:	80 81       	ld	r24, Z
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	c0 f3       	brcs	.-16     	; 0x178 <prvIdleTask+0x60>
     188:	0f d7       	rcall	.+3614   	; 0xfa8 <vPortYield>
     18a:	f6 cf       	rjmp	.-20     	; 0x178 <prvIdleTask+0x60>

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d1 e2       	ldi	r29, 0x21	; 33
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	0c bf       	out	0x3c, r16	; 60

0000019c <__do_copy_data>:
     19c:	12 e0       	ldi	r17, 0x02	; 2
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	e6 e0       	ldi	r30, 0x06	; 6
     1a4:	f1 e3       	ldi	r31, 0x31	; 49
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	ac 3d       	cpi	r26, 0xDC	; 220
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	2d e0       	ldi	r18, 0x0D	; 13
     1b8:	ac ed       	ldi	r26, 0xDC	; 220
     1ba:	b2 e0       	ldi	r27, 0x02	; 2
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	ae 3e       	cpi	r26, 0xEE	; 238
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 57 10 	call	0x20ae	; 0x20ae <main>
     1ca:	0c 94 81 18 	jmp	0x3102	; 0x3102 <_exit>

000001ce <__bad_interrupt>:
     1ce:	18 cf       	rjmp	.-464    	; 0x0 <__vectors>

000001d0 <_bt_status_call_back>:
	uint8_t _sreg = SREG;
	cli();
	int16_t _tmp = _z_gyro;
	SREG = _sreg;
	return _tmp;
}
     1d0:	10 92 3c 03 	sts	0x033C, r1
     1d4:	e0 91 3a 03 	lds	r30, 0x033A
     1d8:	f0 91 3b 03 	lds	r31, 0x033B
     1dc:	30 97       	sbiw	r30, 0x00	; 0
     1de:	09 f0       	breq	.+2      	; 0x1e2 <_bt_status_call_back+0x12>
     1e0:	19 95       	eicall
     1e2:	08 95       	ret

000001e4 <_bt_call_back>:
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	1f 92       	push	r1
     1ea:	1f 92       	push	r1
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	6a 83       	std	Y+2, r22	; 0x02
     1f2:	80 91 3c 03 	lds	r24, 0x033C
     1f6:	88 23       	and	r24, r24
     1f8:	19 f0       	breq	.+6      	; 0x200 <_bt_call_back+0x1c>
     1fa:	86 2f       	mov	r24, r22
     1fc:	a0 d4       	rcall	.+2368   	; 0xb3e <dialog_byte_received>
     1fe:	13 c0       	rjmp	.+38     	; 0x226 <_bt_call_back+0x42>
     200:	80 91 38 03 	lds	r24, 0x0338
     204:	90 91 39 03 	lds	r25, 0x0339
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	69 f0       	breq	.+26     	; 0x226 <_bt_call_back+0x42>
     20c:	19 82       	std	Y+1, r1	; 0x01
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	ae 01       	movw	r20, r28
     212:	4f 5f       	subi	r20, 0xFF	; 255
     214:	5f 4f       	sbci	r21, 0xFF	; 255
     216:	be 01       	movw	r22, r28
     218:	6e 5f       	subi	r22, 0xFE	; 254
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <xQueueGenericSendFromISR>
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	81 11       	cpse	r24, r1
     224:	c1 d6       	rcall	.+3458   	; 0xfa8 <vPortYield>
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <_mpu9250_read_reg>:
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	d6 2e       	mov	r13, r22
     244:	ed b6       	in	r14, 0x3d	; 61
     246:	fe b6       	in	r15, 0x3e	; 62
     248:	26 2f       	mov	r18, r22
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	2f 5f       	subi	r18, 0xFF	; 255
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	4d b7       	in	r20, 0x3d	; 61
     252:	5e b7       	in	r21, 0x3e	; 62
     254:	42 1b       	sub	r20, r18
     256:	53 0b       	sbc	r21, r19
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	5e bf       	out	0x3e, r21	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	4d bf       	out	0x3d, r20	; 61
     262:	0d b7       	in	r16, 0x3d	; 61
     264:	1e b7       	in	r17, 0x3e	; 62
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
     26a:	98 01       	movw	r18, r16
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	ed b7       	in	r30, 0x3d	; 61
     270:	fe b7       	in	r31, 0x3e	; 62
     272:	81 83       	std	Z+1, r24	; 0x01
     274:	66 23       	and	r22, r22
     276:	41 f0       	breq	.+16     	; 0x288 <_mpu9250_read_reg+0x58>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	f9 01       	movw	r30, r18
     27c:	e8 0f       	add	r30, r24
     27e:	f1 1d       	adc	r31, r1
     280:	10 82       	st	Z, r1
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	d8 16       	cp	r13, r24
     286:	c8 f7       	brcc	.-14     	; 0x27a <_mpu9250_read_reg+0x4a>
     288:	84 e7       	ldi	r24, 0x74	; 116
     28a:	93 e0       	ldi	r25, 0x03	; 3
     28c:	3d d3       	rcall	.+1658   	; 0x908 <buffer_clear>
     28e:	41 e0       	ldi	r20, 0x01	; 1
     290:	4d 0d       	add	r20, r13
     292:	b8 01       	movw	r22, r16
     294:	80 91 a1 03 	lds	r24, 0x03A1
     298:	90 91 a2 03 	lds	r25, 0x03A2
     29c:	0e 94 15 13 	call	0x262a	; 0x262a <spi_send_string>
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	fe be       	out	0x3e, r15	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	ed be       	out	0x3d, r14	; 61
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	08 95       	ret

000002ba <_send_bytes_to_bt>:
     2ba:	46 2f       	mov	r20, r22
     2bc:	bc 01       	movw	r22, r24
     2be:	80 91 9f 03 	lds	r24, 0x039F
     2c2:	90 91 a0 03 	lds	r25, 0x03A0
     2c6:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <serial_send_bytes>
     2ca:	08 95       	ret

000002cc <_mpu9250_call_back>:
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <_mpu9250_call_back+0x8>
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	80 91 df 02 	lds	r24, 0x02DF
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	c1 f1       	breq	.+112    	; 0x352 <_mpu9250_call_back+0x86>
     2e2:	28 f4       	brcc	.+10     	; 0x2ee <_mpu9250_call_back+0x22>
     2e4:	88 23       	and	r24, r24
     2e6:	51 f0       	breq	.+20     	; 0x2fc <_mpu9250_call_back+0x30>
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	c9 f0       	breq	.+50     	; 0x31e <_mpu9250_call_back+0x52>
     2ec:	f1 c0       	rjmp	.+482    	; 0x4d0 <_mpu9250_call_back+0x204>
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <_mpu9250_call_back+0x28>
     2f2:	3f c0       	rjmp	.+126    	; 0x372 <_mpu9250_call_back+0xa6>
     2f4:	85 30       	cpi	r24, 0x05	; 5
     2f6:	09 f4       	brne	.+2      	; 0x2fa <_mpu9250_call_back+0x2e>
     2f8:	94 c0       	rjmp	.+296    	; 0x422 <_mpu9250_call_back+0x156>
     2fa:	ea c0       	rjmp	.+468    	; 0x4d0 <_mpu9250_call_back+0x204>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 df 02 	sts	0x02DF, r24
     302:	8c e1       	ldi	r24, 0x1C	; 28
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	1c 82       	std	Y+4, r1	; 0x04
     308:	42 e0       	ldi	r20, 0x02	; 2
     30a:	be 01       	movw	r22, r28
     30c:	6d 5f       	subi	r22, 0xFD	; 253
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	80 91 a1 03 	lds	r24, 0x03A1
     314:	90 91 a2 03 	lds	r25, 0x03A2
     318:	0e 94 15 13 	call	0x262a	; 0x262a <spi_send_string>
     31c:	d9 c0       	rjmp	.+434    	; 0x4d0 <_mpu9250_call_back+0x204>
     31e:	84 e7       	ldi	r24, 0x74	; 116
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	ef d2       	rcall	.+1502   	; 0x902 <buffer_no_of_items>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	09 f0       	breq	.+2      	; 0x32a <_mpu9250_call_back+0x5e>
     328:	d3 c0       	rjmp	.+422    	; 0x4d0 <_mpu9250_call_back+0x204>
     32a:	80 93 df 02 	sts	0x02DF, r24
     32e:	84 e7       	ldi	r24, 0x74	; 116
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	ea d2       	rcall	.+1492   	; 0x908 <buffer_clear>
     334:	8b e1       	ldi	r24, 0x1B	; 27
     336:	8b 83       	std	Y+3, r24	; 0x03
     338:	88 e0       	ldi	r24, 0x08	; 8
     33a:	8c 83       	std	Y+4, r24	; 0x04
     33c:	42 e0       	ldi	r20, 0x02	; 2
     33e:	be 01       	movw	r22, r28
     340:	6d 5f       	subi	r22, 0xFD	; 253
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	80 91 a1 03 	lds	r24, 0x03A1
     348:	90 91 a2 03 	lds	r25, 0x03A2
     34c:	0e 94 15 13 	call	0x262a	; 0x262a <spi_send_string>
     350:	bf c0       	rjmp	.+382    	; 0x4d0 <_mpu9250_call_back+0x204>
     352:	84 e7       	ldi	r24, 0x74	; 116
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	d5 d2       	rcall	.+1450   	; 0x902 <buffer_no_of_items>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	09 f0       	breq	.+2      	; 0x35e <_mpu9250_call_back+0x92>
     35c:	b9 c0       	rjmp	.+370    	; 0x4d0 <_mpu9250_call_back+0x204>
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	80 93 df 02 	sts	0x02DF, r24
     364:	84 e7       	ldi	r24, 0x74	; 116
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	cf d2       	rcall	.+1438   	; 0x908 <buffer_clear>
     36a:	66 e0       	ldi	r22, 0x06	; 6
     36c:	8b e3       	ldi	r24, 0x3B	; 59
     36e:	60 df       	rcall	.-320    	; 0x230 <_mpu9250_read_reg>
     370:	af c0       	rjmp	.+350    	; 0x4d0 <_mpu9250_call_back+0x204>
     372:	84 e7       	ldi	r24, 0x74	; 116
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	c5 d2       	rcall	.+1418   	; 0x902 <buffer_no_of_items>
     378:	87 30       	cpi	r24, 0x07	; 7
     37a:	09 f0       	breq	.+2      	; 0x37e <_mpu9250_call_back+0xb2>
     37c:	a9 c0       	rjmp	.+338    	; 0x4d0 <_mpu9250_call_back+0x204>
     37e:	1f b7       	in	r17, 0x3f	; 63
     380:	f8 94       	cli
     382:	be 01       	movw	r22, r28
     384:	6f 5f       	subi	r22, 0xFF	; 255
     386:	7f 4f       	sbci	r23, 0xFF	; 255
     388:	84 e7       	ldi	r24, 0x74	; 116
     38a:	93 e0       	ldi	r25, 0x03	; 3
     38c:	8a d2       	rcall	.+1300   	; 0x8a2 <buffer_get_item>
     38e:	be 01       	movw	r22, r28
     390:	6e 5f       	subi	r22, 0xFE	; 254
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	84 e7       	ldi	r24, 0x74	; 116
     396:	93 e0       	ldi	r25, 0x03	; 3
     398:	84 d2       	rcall	.+1288   	; 0x8a2 <buffer_get_item>
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	84 e7       	ldi	r24, 0x74	; 116
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	7e d2       	rcall	.+1276   	; 0x8a2 <buffer_get_item>
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	98 2f       	mov	r25, r24
     3ac:	88 27       	eor	r24, r24
     3ae:	29 81       	ldd	r18, Y+1	; 0x01
     3b0:	82 2b       	or	r24, r18
     3b2:	90 93 48 03 	sts	0x0348, r25
     3b6:	80 93 47 03 	sts	0x0347, r24
     3ba:	be 01       	movw	r22, r28
     3bc:	6e 5f       	subi	r22, 0xFE	; 254
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	84 e7       	ldi	r24, 0x74	; 116
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	6e d2       	rcall	.+1244   	; 0x8a2 <buffer_get_item>
     3c6:	be 01       	movw	r22, r28
     3c8:	6f 5f       	subi	r22, 0xFF	; 255
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	84 e7       	ldi	r24, 0x74	; 116
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	68 d2       	rcall	.+1232   	; 0x8a2 <buffer_get_item>
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	29 81       	ldd	r18, Y+1	; 0x01
     3dc:	82 2b       	or	r24, r18
     3de:	90 93 46 03 	sts	0x0346, r25
     3e2:	80 93 45 03 	sts	0x0345, r24
     3e6:	be 01       	movw	r22, r28
     3e8:	6e 5f       	subi	r22, 0xFE	; 254
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	84 e7       	ldi	r24, 0x74	; 116
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	58 d2       	rcall	.+1200   	; 0x8a2 <buffer_get_item>
     3f2:	be 01       	movw	r22, r28
     3f4:	6f 5f       	subi	r22, 0xFF	; 255
     3f6:	7f 4f       	sbci	r23, 0xFF	; 255
     3f8:	84 e7       	ldi	r24, 0x74	; 116
     3fa:	93 e0       	ldi	r25, 0x03	; 3
     3fc:	52 d2       	rcall	.+1188   	; 0x8a2 <buffer_get_item>
     3fe:	1f bf       	out	0x3f, r17	; 63
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	98 2f       	mov	r25, r24
     406:	88 27       	eor	r24, r24
     408:	29 81       	ldd	r18, Y+1	; 0x01
     40a:	82 2b       	or	r24, r18
     40c:	90 93 44 03 	sts	0x0344, r25
     410:	80 93 43 03 	sts	0x0343, r24
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	80 93 df 02 	sts	0x02DF, r24
     41a:	66 e0       	ldi	r22, 0x06	; 6
     41c:	83 e4       	ldi	r24, 0x43	; 67
     41e:	08 df       	rcall	.-496    	; 0x230 <_mpu9250_read_reg>
     420:	57 c0       	rjmp	.+174    	; 0x4d0 <_mpu9250_call_back+0x204>
     422:	84 e7       	ldi	r24, 0x74	; 116
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	6d d2       	rcall	.+1242   	; 0x902 <buffer_no_of_items>
     428:	87 30       	cpi	r24, 0x07	; 7
     42a:	09 f0       	breq	.+2      	; 0x42e <_mpu9250_call_back+0x162>
     42c:	51 c0       	rjmp	.+162    	; 0x4d0 <_mpu9250_call_back+0x204>
     42e:	1f b7       	in	r17, 0x3f	; 63
     430:	f8 94       	cli
     432:	be 01       	movw	r22, r28
     434:	6f 5f       	subi	r22, 0xFF	; 255
     436:	7f 4f       	sbci	r23, 0xFF	; 255
     438:	84 e7       	ldi	r24, 0x74	; 116
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	32 d2       	rcall	.+1124   	; 0x8a2 <buffer_get_item>
     43e:	be 01       	movw	r22, r28
     440:	6e 5f       	subi	r22, 0xFE	; 254
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	84 e7       	ldi	r24, 0x74	; 116
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	2c d2       	rcall	.+1112   	; 0x8a2 <buffer_get_item>
     44a:	be 01       	movw	r22, r28
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	84 e7       	ldi	r24, 0x74	; 116
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	26 d2       	rcall	.+1100   	; 0x8a2 <buffer_get_item>
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	98 2f       	mov	r25, r24
     45c:	88 27       	eor	r24, r24
     45e:	29 81       	ldd	r18, Y+1	; 0x01
     460:	82 2b       	or	r24, r18
     462:	90 93 42 03 	sts	0x0342, r25
     466:	80 93 41 03 	sts	0x0341, r24
     46a:	be 01       	movw	r22, r28
     46c:	6e 5f       	subi	r22, 0xFE	; 254
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	84 e7       	ldi	r24, 0x74	; 116
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	16 d2       	rcall	.+1068   	; 0x8a2 <buffer_get_item>
     476:	be 01       	movw	r22, r28
     478:	6f 5f       	subi	r22, 0xFF	; 255
     47a:	7f 4f       	sbci	r23, 0xFF	; 255
     47c:	84 e7       	ldi	r24, 0x74	; 116
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	10 d2       	rcall	.+1056   	; 0x8a2 <buffer_get_item>
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	98 2f       	mov	r25, r24
     488:	88 27       	eor	r24, r24
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	82 2b       	or	r24, r18
     48e:	90 93 40 03 	sts	0x0340, r25
     492:	80 93 3f 03 	sts	0x033F, r24
     496:	be 01       	movw	r22, r28
     498:	6e 5f       	subi	r22, 0xFE	; 254
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	84 e7       	ldi	r24, 0x74	; 116
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	00 d2       	rcall	.+1024   	; 0x8a2 <buffer_get_item>
     4a2:	be 01       	movw	r22, r28
     4a4:	6f 5f       	subi	r22, 0xFF	; 255
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	84 e7       	ldi	r24, 0x74	; 116
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	fa d1       	rcall	.+1012   	; 0x8a2 <buffer_get_item>
     4ae:	1f bf       	out	0x3f, r17	; 63
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	98 2f       	mov	r25, r24
     4b6:	88 27       	eor	r24, r24
     4b8:	29 81       	ldd	r18, Y+1	; 0x01
     4ba:	82 2b       	or	r24, r18
     4bc:	90 93 3e 03 	sts	0x033E, r25
     4c0:	80 93 3d 03 	sts	0x033D, r24
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	80 93 df 02 	sts	0x02DF, r24
     4ca:	66 e0       	ldi	r22, 0x06	; 6
     4cc:	8b e3       	ldi	r24, 0x3B	; 59
     4ce:	b0 de       	rcall	.-672    	; 0x230 <_mpu9250_read_reg>
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	08 95       	ret

000004e0 <set_horn>:
     4e0:	88 23       	and	r24, r24
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <set_horn+0x8>
     4e4:	43 9a       	sbi	0x08, 3	; 8
     4e6:	08 95       	ret
     4e8:	43 98       	cbi	0x08, 3	; 8
     4ea:	08 95       	ret

000004ec <set_head_light>:
     4ec:	88 23       	and	r24, r24
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <set_head_light+0x8>
     4f0:	42 9a       	sbi	0x08, 2	; 8
     4f2:	08 95       	ret
     4f4:	42 98       	cbi	0x08, 2	; 8
     4f6:	08 95       	ret

000004f8 <set_brake_light>:
     4f8:	88 23       	and	r24, r24
     4fa:	11 f0       	breq	.+4      	; 0x500 <set_brake_light+0x8>
     4fc:	41 9a       	sbi	0x08, 1	; 8
     4fe:	08 95       	ret
     500:	41 98       	cbi	0x08, 1	; 8
     502:	08 95       	ret

00000504 <set_motor_speed>:
     504:	85 36       	cpi	r24, 0x65	; 101
     506:	08 f0       	brcs	.+2      	; 0x50a <set_motor_speed+0x6>
     508:	84 e6       	ldi	r24, 0x64	; 100
     50a:	88 23       	and	r24, r24
     50c:	a9 f0       	breq	.+42     	; 0x538 <set_motor_speed+0x34>
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	af e7       	ldi	r26, 0x7F	; 127
     514:	bc e0       	ldi	r27, 0x0C	; 12
     516:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__umulhisi3>
     51a:	24 e6       	ldi	r18, 0x64	; 100
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	0e 94 4a 14 	call	0x2894	; 0x2894 <__divmodsi4>
     526:	30 93 99 00 	sts	0x0099, r19
     52a:	20 93 98 00 	sts	0x0098, r18
     52e:	30 93 9b 00 	sts	0x009B, r19
     532:	20 93 9a 00 	sts	0x009A, r18
     536:	08 95       	ret
     538:	10 92 99 00 	sts	0x0099, r1
     53c:	10 92 98 00 	sts	0x0098, r1
     540:	10 92 9b 00 	sts	0x009B, r1
     544:	10 92 9a 00 	sts	0x009A, r1
     548:	08 95       	ret

0000054a <init_main_board>:
     54a:	8f 92       	push	r8
     54c:	9f 92       	push	r9
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	3b 9a       	sbi	0x07, 3	; 7
     55e:	3a 9a       	sbi	0x07, 2	; 7
     560:	39 9a       	sbi	0x07, 1	; 7
     562:	38 9a       	sbi	0x07, 0	; 7
     564:	e0 e9       	ldi	r30, 0x90	; 144
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	82 60       	ori	r24, 0x02	; 2
     56c:	80 83       	st	Z, r24
     56e:	a1 e9       	ldi	r26, 0x91	; 145
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	8c 91       	ld	r24, X
     574:	88 61       	ori	r24, 0x18	; 24
     576:	8c 93       	st	X, r24
     578:	8f e7       	ldi	r24, 0x7F	; 127
     57a:	9c e0       	ldi	r25, 0x0C	; 12
     57c:	90 93 99 00 	sts	0x0099, r25
     580:	80 93 98 00 	sts	0x0098, r24
     584:	20 81       	ld	r18, Z
     586:	20 6c       	ori	r18, 0xC0	; 192
     588:	20 83       	st	Z, r18
     58a:	6b 9a       	sbi	0x0d, 3	; 13
     58c:	90 93 9b 00 	sts	0x009B, r25
     590:	80 93 9a 00 	sts	0x009A, r24
     594:	20 81       	ld	r18, Z
     596:	20 63       	ori	r18, 0x30	; 48
     598:	20 83       	st	Z, r18
     59a:	6c 9a       	sbi	0x0d, 4	; 13
     59c:	90 93 97 00 	sts	0x0097, r25
     5a0:	80 93 96 00 	sts	0x0096, r24
     5a4:	8c 91       	ld	r24, X
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	8c 93       	st	X, r24
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	ab df       	rcall	.-170    	; 0x504 <set_motor_speed>
     5ae:	e1 e8       	ldi	r30, 0x81	; 129
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	86 60       	ori	r24, 0x06	; 6
     5b6:	80 83       	st	Z, r24
     5b8:	6a 98       	cbi	0x0d, 2	; 13
     5ba:	6d 9a       	sbi	0x0d, 5	; 13
     5bc:	75 98       	cbi	0x0e, 5	; 14
     5be:	08 9a       	sbi	0x01, 0	; 1
     5c0:	10 98       	cbi	0x02, 0	; 2
     5c2:	09 9a       	sbi	0x01, 1	; 1
     5c4:	11 98       	cbi	0x02, 1	; 2
     5c6:	0a 9a       	sbi	0x01, 2	; 1
     5c8:	12 98       	cbi	0x02, 2	; 2
     5ca:	e9 e6       	ldi	r30, 0x69	; 105
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	80 83       	st	Z, r24
     5d4:	e8 9a       	sbi	0x1d, 0	; 29
     5d6:	8b e0       	ldi	r24, 0x0B	; 11
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	5e d1       	rcall	.+700    	; 0x898 <buffer_init>
     5dc:	80 ee       	ldi	r24, 0xE0	; 224
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	5b d1       	rcall	.+694    	; 0x898 <buffer_init>
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f2 ef       	ldi	r31, 0xF2	; 242
     5e6:	8f 2e       	mov	r8, r31
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	9f 2e       	mov	r9, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f0 ee       	ldi	r31, 0xE0	; 224
     5f2:	af 2e       	mov	r10, r31
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	bf 2e       	mov	r11, r31
     5f8:	f0 2d       	mov	r31, r0
     5fa:	0f 2e       	mov	r0, r31
     5fc:	fb e0       	ldi	r31, 0x0B	; 11
     5fe:	cf 2e       	mov	r12, r31
     600:	f3 e0       	ldi	r31, 0x03	; 3
     602:	df 2e       	mov	r13, r31
     604:	f0 2d       	mov	r31, r0
     606:	e1 2c       	mov	r14, r1
     608:	00 e0       	ldi	r16, 0x00	; 0
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	40 e8       	ldi	r20, 0x80	; 128
     60e:	55 e2       	ldi	r21, 0x25	; 37
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <serial_new_instance>
     61a:	90 93 a0 03 	sts	0x03A0, r25
     61e:	80 93 9f 03 	sts	0x039F, r24
     622:	84 e7       	ldi	r24, 0x74	; 116
     624:	93 e0       	ldi	r25, 0x03	; 3
     626:	38 d1       	rcall	.+624    	; 0x898 <buffer_init>
     628:	89 e4       	ldi	r24, 0x49	; 73
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	35 d1       	rcall	.+618    	; 0x898 <buffer_init>
     62e:	86 e6       	ldi	r24, 0x66	; 102
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0f 2e       	mov	r0, r31
     638:	f9 e4       	ldi	r31, 0x49	; 73
     63a:	8f 2e       	mov	r8, r31
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	9f 2e       	mov	r9, r31
     640:	f0 2d       	mov	r31, r0
     642:	0f 2e       	mov	r0, r31
     644:	f4 e7       	ldi	r31, 0x74	; 116
     646:	af 2e       	mov	r10, r31
     648:	f3 e0       	ldi	r31, 0x03	; 3
     64a:	bf 2e       	mov	r11, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	c1 2c       	mov	r12, r1
     650:	05 e2       	ldi	r16, 0x25	; 37
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	43 e0       	ldi	r20, 0x03	; 3
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	80 e1       	ldi	r24, 0x10	; 16
     65c:	0e 94 88 12 	call	0x2510	; 0x2510 <spi_new_instance>
     660:	90 93 a2 03 	sts	0x03A2, r25
     664:	80 93 a1 03 	sts	0x03A1, r24
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	2e de       	rcall	.-932    	; 0x2cc <_mpu9250_call_back>
     670:	8b e9       	ldi	r24, 0x9B	; 155
     672:	80 93 b3 00 	sts	0x00B3, r24
     676:	e1 eb       	ldi	r30, 0xB1	; 177
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	82 60       	ori	r24, 0x02	; 2
     67e:	80 83       	st	Z, r24
     680:	a0 e7       	ldi	r26, 0x70	; 112
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	8c 91       	ld	r24, X
     686:	82 60       	ori	r24, 0x02	; 2
     688:	8c 93       	st	X, r24
     68a:	80 81       	ld	r24, Z
     68c:	85 60       	ori	r24, 0x05	; 5
     68e:	80 83       	st	Z, r24
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	08 95       	ret

000006a8 <set_brake>:
     6a8:	85 36       	cpi	r24, 0x65	; 101
     6aa:	08 f0       	brcs	.+2      	; 0x6ae <set_brake+0x6>
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	88 23       	and	r24, r24
     6b0:	a9 f0       	breq	.+42     	; 0x6dc <set_brake+0x34>
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	af e7       	ldi	r26, 0x7F	; 127
     6b8:	bc e0       	ldi	r27, 0x0C	; 12
     6ba:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__umulhisi3>
     6be:	24 e6       	ldi	r18, 0x64	; 100
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	0e 94 4a 14 	call	0x2894	; 0x2894 <__divmodsi4>
     6ca:	30 93 99 00 	sts	0x0099, r19
     6ce:	20 93 98 00 	sts	0x0098, r18
     6d2:	10 92 9b 00 	sts	0x009B, r1
     6d6:	10 92 9a 00 	sts	0x009A, r1
     6da:	08 95       	ret
     6dc:	10 92 99 00 	sts	0x0099, r1
     6e0:	10 92 98 00 	sts	0x0098, r1
     6e4:	10 92 9b 00 	sts	0x009B, r1
     6e8:	10 92 9a 00 	sts	0x009A, r1
     6ec:	08 95       	ret

000006ee <get_raw_x_accel>:
     6ee:	2f b7       	in	r18, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	80 91 47 03 	lds	r24, 0x0347
     6f6:	90 91 48 03 	lds	r25, 0x0348
     6fa:	2f bf       	out	0x3f, r18	; 63
     6fc:	08 95       	ret

000006fe <get_raw_y_accel>:
     6fe:	2f b7       	in	r18, 0x3f	; 63
     700:	f8 94       	cli
     702:	80 91 45 03 	lds	r24, 0x0345
     706:	90 91 46 03 	lds	r25, 0x0346
     70a:	2f bf       	out	0x3f, r18	; 63
     70c:	08 95       	ret

0000070e <get_raw_z_accel>:
     70e:	2f b7       	in	r18, 0x3f	; 63
     710:	f8 94       	cli
     712:	80 91 43 03 	lds	r24, 0x0343
     716:	90 91 44 03 	lds	r25, 0x0344
     71a:	2f bf       	out	0x3f, r18	; 63
     71c:	08 95       	ret

0000071e <get_raw_x_rotation>:
     71e:	2f b7       	in	r18, 0x3f	; 63
     720:	f8 94       	cli
     722:	80 91 41 03 	lds	r24, 0x0341
     726:	90 91 42 03 	lds	r25, 0x0342
     72a:	2f bf       	out	0x3f, r18	; 63
     72c:	08 95       	ret

0000072e <get_raw_y_rotation>:
     72e:	2f b7       	in	r18, 0x3f	; 63
     730:	f8 94       	cli
     732:	80 91 3f 03 	lds	r24, 0x033F
     736:	90 91 40 03 	lds	r25, 0x0340
     73a:	2f bf       	out	0x3f, r18	; 63
     73c:	08 95       	ret

0000073e <get_tacho_count>:

// ----------------------------------------------------------------------------------------------------------------------
uint16_t get_tacho_count() {
	static uint16_t _last_reading = 0;
	
	uint16_t _tmp = TACHO_TCNT_reg;
     73e:	20 91 84 00 	lds	r18, 0x0084
     742:	30 91 85 00 	lds	r19, 0x0085
	uint16_t _tmp_last = _tmp;
	
	if (_tmp < _last_reading) {
     746:	80 91 dd 02 	lds	r24, 0x02DD
     74a:	90 91 de 02 	lds	r25, 0x02DE
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	30 f4       	brcc	.+12     	; 0x760 <get_tacho_count+0x22>
		_tmp = (UINT16_MAX - _last_reading + _tmp);
     754:	a9 01       	movw	r20, r18
     756:	48 1b       	sub	r20, r24
     758:	59 0b       	sbc	r21, r25
     75a:	ca 01       	movw	r24, r20
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	04 c0       	rjmp	.+8      	; 0x768 <get_tacho_count+0x2a>
		} else {
		_tmp = _tmp-_last_reading;
     760:	a9 01       	movw	r20, r18
     762:	48 1b       	sub	r20, r24
     764:	59 0b       	sbc	r21, r25
     766:	ca 01       	movw	r24, r20
	}
	_last_reading = _tmp_last;
     768:	30 93 de 02 	sts	0x02DE, r19
     76c:	20 93 dd 02 	sts	0x02DD, r18
	
	return _tmp;
}
     770:	08 95       	ret

00000772 <set_bt_reset>:

// ----------------------------------------------------------------------------------------------------------------------
void set_bt_reset(uint8_t state) {
	if (state) {
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <set_bt_reset+0x8>
		BT_RESET_PORT &= ~_BV(BT_RESET_PIN); // Set RESET low/active
     776:	10 98       	cbi	0x02, 0	; 2
     778:	08 95       	ret
		} else {
		BT_RESET_PORT |= _BV(BT_RESET_PIN); // Set RESET high/in-active
     77a:	10 9a       	sbi	0x02, 0	; 2
     77c:	08 95       	ret

0000077e <bt_send_bytes>:
static void _send_bytes_to_bt(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_bt_serial_instance, bytes, len);
}

// ----------------------------------------------------------------------------------------------------------------------
uint8_t bt_send_bytes(uint8_t *bytes, uint8_t len) {
     77e:	46 2f       	mov	r20, r22
	return serial_send_bytes(_bt_serial_instance, bytes, len);
     780:	bc 01       	movw	r22, r24
     782:	80 91 9f 03 	lds	r24, 0x039F
     786:	90 91 a0 03 	lds	r25, 0x03A0
     78a:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <serial_send_bytes>
}
     78e:	08 95       	ret

00000790 <init_bt_module>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_bt_module(void (*bt_status_call_back)(uint8_t result), QueueHandle_t RX_Que) {
	_xRxedCharsQ = RX_Que;
     790:	70 93 39 03 	sts	0x0339, r23
     794:	60 93 38 03 	sts	0x0338, r22
	_app_bt_status_call_back = bt_status_call_back;
     798:	90 93 3b 03 	sts	0x033B, r25
     79c:	80 93 3a 03 	sts	0x033A, r24
	_bt_dialog_active = 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 3c 03 	sts	0x033C, r24
	dialog_start(_dialog_bt_init_seq, _send_bytes_to_bt, _bt_status_call_back);
     7a6:	48 ee       	ldi	r20, 0xE8	; 232
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	6d e5       	ldi	r22, 0x5D	; 93
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	87 e0       	ldi	r24, 0x07	; 7
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	9d c1       	rjmp	.+826    	; 0xaee <dialog_start>
     7b4:	08 95       	ret

000007b6 <set_goal_line_semaphore>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void set_goal_line_semaphore(SemaphoreHandle_t goal_line_semaphore) {
	if (goal_line_semaphore) {
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <set_goal_line_semaphore+0xc>
		_goal_line_semaphore = goal_line_semaphore;
     7ba:	90 93 37 03 	sts	0x0337, r25
     7be:	80 93 36 03 	sts	0x0336, r24
     7c2:	08 95       	ret

000007c4 <__vector_1>:
	}
}

ISR(INT0_vect) {
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	0b b6       	in	r0, 0x3b	; 59
     7d0:	0f 92       	push	r0
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	static signed portBASE_TYPE _higher_priority_task_woken;
	if (_goal_line_semaphore) {
     7ea:	80 91 36 03 	lds	r24, 0x0336
     7ee:	90 91 37 03 	lds	r25, 0x0337
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	49 f0       	breq	.+18     	; 0x808 <__vector_1+0x44>
		_higher_priority_task_woken = pdFALSE;
     7f6:	10 92 dc 02 	sts	0x02DC, r1

		xSemaphoreGiveFromISR(_goal_line_semaphore, &_higher_priority_task_woken);
     7fa:	6c ed       	ldi	r22, 0xDC	; 220
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	22 d6       	rcall	.+3140   	; 0x1444 <xQueueGiveFromISR>
		
		if (_higher_priority_task_woken != pdFALSE) {
     800:	80 91 dc 02 	lds	r24, 0x02DC
     804:	81 11       	cpse	r24, r1
			portYIELD();
     806:	d0 d3       	rcall	.+1952   	; 0xfa8 <vPortYield>
		}
	}
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0b be       	out	0x3b, r0	; 59
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_13>:
	#elif ((DIALOG_HANDLER_PRESCALER == 1024))
	DIALOG_HANDLER_TCCRB_reg |= _BV(DIALOG_HANDLER_CS0_bit) | _BV(DIALOG_HANDLER_CS2_bit); ;    // Prescaler 1024 and Start Timer
	#endif
}

ISR(TIMER2_COMPA_vect) {
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	static uint8_t _count = 10;
	if (_bt_dialog_active) {
     854:	80 91 3c 03 	lds	r24, 0x033C
     858:	88 23       	and	r24, r24
     85a:	59 f0       	breq	.+22     	; 0x872 <__vector_13+0x44>
		if (--_count == 0) {
     85c:	80 91 06 02 	lds	r24, 0x0206
     860:	81 50       	subi	r24, 0x01	; 1
     862:	19 f0       	breq	.+6      	; 0x86a <__vector_13+0x3c>
     864:	80 93 06 02 	sts	0x0206, r24
     868:	04 c0       	rjmp	.+8      	; 0x872 <__vector_13+0x44>
			_count = 10;
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	80 93 06 02 	sts	0x0206, r24
			dialog_tick();
     870:	4f d1       	rcall	.+670    	; 0xb10 <dialog_tick>
		}
	}
}
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0b be       	out	0x3b, r0	; 59
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <buffer_init>:
 @return true if buffer is empty.
 @param *buffer pointer to the buffer structure.
 ***********************************************/
uint8_t buffer_is_empty(buffer_struct_t *buffer) {
	return (buffer->no_in_buffer == 0);
}
     898:	fc 01       	movw	r30, r24
     89a:	10 a6       	std	Z+40, r1	; 0x28
     89c:	11 a6       	std	Z+41, r1	; 0x29
     89e:	12 a6       	std	Z+42, r1	; 0x2a
     8a0:	08 95       	ret

000008a2 <buffer_get_item>:
     8a2:	fc 01       	movw	r30, r24
     8a4:	82 a5       	ldd	r24, Z+42	; 0x2a
     8a6:	88 23       	and	r24, r24
     8a8:	a1 f0       	breq	.+40     	; 0x8d2 <buffer_get_item+0x30>
     8aa:	81 a5       	ldd	r24, Z+41	; 0x29
     8ac:	df 01       	movw	r26, r30
     8ae:	a8 0f       	add	r26, r24
     8b0:	b1 1d       	adc	r27, r1
     8b2:	8c 91       	ld	r24, X
     8b4:	db 01       	movw	r26, r22
     8b6:	8c 93       	st	X, r24
     8b8:	81 a5       	ldd	r24, Z+41	; 0x29
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	68 e2       	ldi	r22, 0x28	; 40
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
     8c6:	81 a7       	std	Z+41, r24	; 0x29
     8c8:	82 a5       	ldd	r24, Z+42	; 0x2a
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	82 a7       	std	Z+42, r24	; 0x2a
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret

000008d6 <buffer_put_item>:
     8d6:	fc 01       	movw	r30, r24
     8d8:	22 a5       	ldd	r18, Z+42	; 0x2a
     8da:	28 32       	cpi	r18, 0x28	; 40
     8dc:	80 f4       	brcc	.+32     	; 0x8fe <buffer_put_item+0x28>
     8de:	80 a5       	ldd	r24, Z+40	; 0x28
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	df 01       	movw	r26, r30
     8e4:	a8 0f       	add	r26, r24
     8e6:	b9 1f       	adc	r27, r25
     8e8:	6c 93       	st	X, r22
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	68 e2       	ldi	r22, 0x28	; 40
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
     8f4:	80 a7       	std	Z+40, r24	; 0x28
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	22 a7       	std	Z+42, r18	; 0x2a
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	08 95       	ret

00000902 <buffer_no_of_items>:
 @return no of items in the buffer.
 @param *buffer pointer to the buffer structure.
 ***********************************************/
uint8_t buffer_no_of_items(buffer_struct_t *buffer) {
	return buffer->no_in_buffer;
}
     902:	fc 01       	movw	r30, r24
     904:	82 a5       	ldd	r24, Z+42	; 0x2a
     906:	08 95       	ret

00000908 <buffer_clear>:
 @ingroup buffer_function
 @brief Clear the content of the buffer.

 @param *buffer pointer to the buffer structure.
 **********************************************************************/
void buffer_clear(buffer_struct_t *buffer) {
     908:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     90a:	10 a6       	std	Z+40, r1	; 0x28
	buffer->out_i = 0;
     90c:	11 a6       	std	Z+41, r1	; 0x29
	buffer->no_in_buffer = 0;
     90e:	12 a6       	std	Z+42, r1	; 0x2a
     910:	08 95       	ret

00000912 <_dialog_prepare_for_next_byte>:

 When the function returns it has setup the state variable _dialog_await_state that will be used in dialog_char_received(), and the needed argument counters etc.
 */
static void _dialog_prepare_for_next_byte() {
  // esc char?
  if (*(_dialog_format.response_p) == '%') {
     912:	e0 91 b0 03 	lds	r30, 0x03B0
     916:	f0 91 b1 03 	lds	r31, 0x03B1
     91a:	80 81       	ld	r24, Z
     91c:	85 32       	cpi	r24, 0x25	; 37
     91e:	09 f0       	breq	.+2      	; 0x922 <_dialog_prepare_for_next_byte+0x10>
     920:	85 c0       	rjmp	.+266    	; 0xa2c <_dialog_prepare_for_next_byte+0x11a>
    _dialog_format.response_p++;
     922:	cf 01       	movw	r24, r30
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	90 93 b1 03 	sts	0x03B1, r25
     92a:	80 93 b0 03 	sts	0x03B0, r24

    if (*(_dialog_format.response_p) == '%') {
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	85 32       	cpi	r24, 0x25	; 37
     932:	19 f4       	brne	.+6      	; 0x93a <_dialog_prepare_for_next_byte+0x28>
      //Byte stuffing
      _dialog_await_state = NORMAL_STATE;
     934:	10 92 a7 03 	sts	0x03A7, r1
     938:	08 95       	ret
    } else if (*_dialog_format.response_p == '*') {
     93a:	8a 32       	cpi	r24, 0x2A	; 42
     93c:	e1 f5       	brne	.+120    	; 0x9b6 <_dialog_prepare_for_next_byte+0xa4>
      // Max args: %*nnB
      _dialog_format.response_p++;
     93e:	cf 01       	movw	r24, r30
     940:	02 96       	adiw	r24, 0x02	; 2
     942:	90 93 b1 03 	sts	0x03B1, r25
     946:	80 93 b0 03 	sts	0x03B0, r24
     94a:	33 96       	adiw	r30, 0x03	; 3
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	dc 01       	movw	r26, r24
     950:	01 96       	adiw	r24, 0x01	; 1
      // Find the arg. cnt
      _dialog_format.arg_cnt = 0;
      do {
        _dialog_format.arg_cnt *= 10;
     952:	22 0f       	add	r18, r18
     954:	32 2f       	mov	r19, r18
     956:	33 0f       	add	r19, r19
     958:	33 0f       	add	r19, r19
     95a:	23 0f       	add	r18, r19
        _dialog_format.arg_cnt += (*_dialog_format.response_p) - '0';
     95c:	20 53       	subi	r18, 0x30	; 48
     95e:	3c 91       	ld	r19, X
     960:	23 0f       	add	r18, r19
      } while (*(++_dialog_format.response_p) != 'B');
     962:	31 91       	ld	r19, Z+
     964:	32 34       	cpi	r19, 0x42	; 66
     966:	99 f7       	brne	.-26     	; 0x94e <_dialog_prepare_for_next_byte+0x3c>
     968:	20 93 b2 03 	sts	0x03B2, r18
      _dialog_format.response_p++;
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	b0 93 b1 03 	sts	0x03B1, r27
     972:	a0 93 b0 03 	sts	0x03B0, r26
      // Are argument buffers allocated?
      if (_dialog_format.arg_buffers != 0) {
     976:	80 91 b4 03 	lds	r24, 0x03B4
     97a:	90 91 b5 03 	lds	r25, 0x03B5
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	b1 f0       	breq	.+44     	; 0x9ae <_dialog_prepare_for_next_byte+0x9c>
        _dialog_format.arg_index++;
     982:	e3 eb       	ldi	r30, 0xB3	; 179
     984:	f3 e0       	ldi	r31, 0x03	; 3
     986:	20 81       	ld	r18, Z
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	20 83       	st	Z, r18
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len = 0;
     98c:	33 27       	eor	r19, r19
     98e:	27 fd       	sbrc	r18, 7
     990:	30 95       	com	r19
     992:	f9 01       	movw	r30, r18
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e2 0f       	add	r30, r18
     99a:	f3 1f       	adc	r31, r19
     99c:	e8 0f       	add	r30, r24
     99e:	f9 1f       	adc	r31, r25
     9a0:	12 82       	std	Z+2, r1	; 0x02
        _dialog_format.arg_buf_p = _dialog_format.arg_buffers[_dialog_format.arg_index].arg_buf;
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	90 93 b7 03 	sts	0x03B7, r25
     9aa:	80 93 b6 03 	sts	0x03B6, r24
      }
      _dialog_await_state = ARG_MAX_STATE;
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	80 93 a7 03 	sts	0x03A7, r24
     9b4:	08 95       	ret
     9b6:	80 91 b0 03 	lds	r24, 0x03B0
     9ba:	90 91 b1 03 	lds	r25, 0x03B1
     9be:	dc 01       	movw	r26, r24
     9c0:	11 96       	adiw	r26, 0x01	; 1
    _dialog_format.response_p++;

    if (*(_dialog_format.response_p) == '%') {
      //Byte stuffing
      _dialog_await_state = NORMAL_STATE;
    } else if (*_dialog_format.response_p == '*') {
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	01 96       	adiw	r24, 0x01	; 1
    } else {
      // args: %nnB
      // Find the arg. cnt
      _dialog_format.arg_cnt = 0;
      do {
        _dialog_format.arg_cnt *= 10;
     9c8:	22 0f       	add	r18, r18
     9ca:	32 2f       	mov	r19, r18
     9cc:	33 0f       	add	r19, r19
     9ce:	33 0f       	add	r19, r19
     9d0:	23 0f       	add	r18, r19
        _dialog_format.arg_cnt += (*_dialog_format.response_p) - '0';
     9d2:	20 53       	subi	r18, 0x30	; 48
     9d4:	30 81       	ld	r19, Z
     9d6:	23 0f       	add	r18, r19
      } while (*(++_dialog_format.response_p) != 'B');
     9d8:	3d 91       	ld	r19, X+
     9da:	32 34       	cpi	r19, 0x42	; 66
     9dc:	99 f7       	brne	.-26     	; 0x9c4 <_dialog_prepare_for_next_byte+0xb2>
     9de:	20 93 b2 03 	sts	0x03B2, r18
      _dialog_format.response_p++;
     9e2:	32 96       	adiw	r30, 0x02	; 2
     9e4:	f0 93 b1 03 	sts	0x03B1, r31
     9e8:	e0 93 b0 03 	sts	0x03B0, r30
      // Are argument buffers allocated?
      if (_dialog_format.arg_buffers != 0) {
     9ec:	80 91 b4 03 	lds	r24, 0x03B4
     9f0:	90 91 b5 03 	lds	r25, 0x03B5
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	b1 f0       	breq	.+44     	; 0xa24 <_dialog_prepare_for_next_byte+0x112>
        _dialog_format.arg_index++;
     9f8:	a3 eb       	ldi	r26, 0xB3	; 179
     9fa:	b3 e0       	ldi	r27, 0x03	; 3
     9fc:	ec 91       	ld	r30, X
     9fe:	ef 5f       	subi	r30, 0xFF	; 255
     a00:	ec 93       	st	X, r30
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len = 0;
     a02:	ff 27       	eor	r31, r31
     a04:	e7 fd       	sbrc	r30, 7
     a06:	f0 95       	com	r31
     a08:	9f 01       	movw	r18, r30
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	e2 0f       	add	r30, r18
     a10:	f3 1f       	adc	r31, r19
     a12:	e8 0f       	add	r30, r24
     a14:	f9 1f       	adc	r31, r25
     a16:	12 82       	std	Z+2, r1	; 0x02
        _dialog_format.arg_buf_p = _dialog_format.arg_buffers[_dialog_format.arg_index].arg_buf;
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	90 93 b7 03 	sts	0x03B7, r25
     a20:	80 93 b6 03 	sts	0x03B6, r24
      }
      _dialog_await_state = ARG_STATE;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 a7 03 	sts	0x03A7, r24
     a2a:	08 95       	ret
    }
  } else {
    _dialog_await_state = NORMAL_STATE;
     a2c:	10 92 a7 03 	sts	0x03A7, r1
     a30:	08 95       	ret

00000a32 <_dialog_goto_state>:
 IF the new state is either DIALOG_OK_STOP or DIALOG_ERROR_STOP then the call_back function will be called.
 ELSE the new State will be setup.

 @param[in] new_state the new state to goto.
 */
static void _dialog_goto_state(const uint8_t new_state) {
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
  _dialog_second_counter = 0;
     a36:	10 92 ab 03 	sts	0x03AB, r1
  _dialog_current_state = new_state;
     a3a:	80 93 aa 03 	sts	0x03AA, r24
  if (new_state == DIALOG_ERROR_STOP || new_state == DIALOG_OK_STOP) {
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	98 0f       	add	r25, r24
     a42:	92 30       	cpi	r25, 0x02	; 2
     a44:	30 f4       	brcc	.+12     	; 0xa52 <_dialog_goto_state+0x20>
    (*_dialog_pf_call_back)(new_state);
     a46:	e0 91 a3 03 	lds	r30, 0x03A3
     a4a:	f0 91 a4 03 	lds	r31, 0x03A4
     a4e:	19 95       	eicall
     a50:	4b c0       	rjmp	.+150    	; 0xae8 <_dialog_goto_state+0xb6>
  } else {
    // Send command if any
    if (_dialog_seq[new_state].command_length != 0) {
     a52:	9b e0       	ldi	r25, 0x0B	; 11
     a54:	89 9f       	mul	r24, r25
     a56:	e0 01       	movw	r28, r0
     a58:	11 24       	eor	r1, r1
     a5a:	a0 91 a8 03 	lds	r26, 0x03A8
     a5e:	b0 91 a9 03 	lds	r27, 0x03A9
     a62:	ac 0f       	add	r26, r28
     a64:	bd 1f       	adc	r27, r29
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	6c 91       	ld	r22, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
     a6c:	66 23       	and	r22, r22
     a6e:	39 f0       	breq	.+14     	; 0xa7e <_dialog_goto_state+0x4c>
      (*_dialog_pf_send)(_dialog_seq[new_state].command,
     a70:	e0 91 a5 03 	lds	r30, 0x03A5
     a74:	f0 91 a6 03 	lds	r31, 0x03A6
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	19 95       	eicall
      _dialog_seq[new_state].command_length);
    }

    // Any response to wait for?
    if (_dialog_seq[new_state].responce_format_length > 0) {
     a7e:	80 91 a8 03 	lds	r24, 0x03A8
     a82:	90 91 a9 03 	lds	r25, 0x03A9
     a86:	c8 0f       	add	r28, r24
     a88:	d9 1f       	adc	r29, r25
     a8a:	2d 81       	ldd	r18, Y+5	; 0x05
     a8c:	22 23       	and	r18, r18
     a8e:	51 f1       	breq	.+84     	; 0xae4 <_dialog_goto_state+0xb2>
 @param[in] len
 @param[out] *buf
 */
static void _dialog_await(uint8_t new_state) {
  _dialog_format.response_p = _dialog_format.response =
                  _dialog_seq[new_state].responce_format;
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
 @param[in] response_format to be waited for..
 @param[in] len
 @param[out] *buf
 */
static void _dialog_await(uint8_t new_state) {
  _dialog_format.response_p = _dialog_format.response =
     a94:	90 93 ad 03 	sts	0x03AD, r25
     a98:	80 93 ac 03 	sts	0x03AC, r24
     a9c:	90 93 b1 03 	sts	0x03B1, r25
     aa0:	80 93 b0 03 	sts	0x03B0, r24
                  _dialog_seq[new_state].responce_format;
  _dialog_format.arg_buffers = _dialog_seq[new_state].arg_buffers;
     aa4:	e9 85       	ldd	r30, Y+9	; 0x09
     aa6:	fa 85       	ldd	r31, Y+10	; 0x0a
     aa8:	f0 93 b5 03 	sts	0x03B5, r31
     aac:	e0 93 b4 03 	sts	0x03B4, r30
  _dialog_format.arg_index = -1;
     ab0:	3f ef       	ldi	r19, 0xFF	; 255
     ab2:	30 93 b3 03 	sts	0x03B3, r19
  // Are any arg_buffers specified?
  if (_dialog_format.arg_buffers) {
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	31 f0       	breq	.+12     	; 0xac6 <_dialog_goto_state+0x94>
    _dialog_format.arg_buf_p = _dialog_seq[new_state].arg_buffers[0].arg_buf;
     aba:	40 81       	ld	r20, Z
     abc:	51 81       	ldd	r21, Z+1	; 0x01
     abe:	50 93 b7 03 	sts	0x03B7, r21
     ac2:	40 93 b6 03 	sts	0x03B6, r20
  }
  _dialog_format.last = _dialog_seq[new_state].responce_format
                  + _dialog_seq[new_state].responce_format_length - 1;
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	31 09       	sbc	r19, r1
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
  _dialog_format.arg_index = -1;
  // Are any arg_buffers specified?
  if (_dialog_format.arg_buffers) {
    _dialog_format.arg_buf_p = _dialog_seq[new_state].arg_buffers[0].arg_buf;
  }
  _dialog_format.last = _dialog_seq[new_state].responce_format
     ad0:	90 93 af 03 	sts	0x03AF, r25
     ad4:	80 93 ae 03 	sts	0x03AE, r24
                  + _dialog_seq[new_state].responce_format_length - 1;
  _dialog_prepare_for_next_byte();
     ad8:	1c df       	rcall	.-456    	; 0x912 <_dialog_prepare_for_next_byte>
    }

    // Any response to wait for?
    if (_dialog_seq[new_state].responce_format_length > 0) {
      _dialog_await(new_state);
      _dialog_second_counter = _dialog_seq[new_state].max_response_time
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	80 93 ab 03 	sts	0x03AB, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <_dialog_goto_state+0xb6>
                      + 1; // add one because of 1 sec jitter in second timer
    } else {
      _dialog_goto_state(_dialog_seq[new_state].ok_state);
     ae4:	8f 81       	ldd	r24, Y+7	; 0x07
     ae6:	a5 df       	rcall	.-182    	; 0xa32 <_dialog_goto_state>
    }
  }
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <dialog_start>:
 @endcode
 */
void dialog_start(dialog_seq_t *p_seq,
		void (*pf_send)(uint8_t *command, uint8_t command_length),
		void (*pf_call_back)(uint8_t result)) {
  _dialog_seq = p_seq;
     aee:	90 93 a9 03 	sts	0x03A9, r25
     af2:	80 93 a8 03 	sts	0x03A8, r24
  _dialog_pf_send = pf_send;
     af6:	70 93 a6 03 	sts	0x03A6, r23
     afa:	60 93 a5 03 	sts	0x03A5, r22
  _dialog_pf_call_back = pf_call_back;
     afe:	50 93 a4 03 	sts	0x03A4, r21
     b02:	40 93 a3 03 	sts	0x03A3, r20
  _dialog_current_state = 0;
     b06:	10 92 aa 03 	sts	0x03AA, r1
  _dialog_goto_state(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	92 cf       	rjmp	.-220    	; 0xa32 <_dialog_goto_state>
     b0e:	08 95       	ret

00000b10 <dialog_tick>:
 @brief Housekeeping function that must be called every second when a dialog is active.

 If the maximum wait time is exceeded the the dialog will change to error state.
 */
void dialog_tick() {
  if (_dialog_second_counter) {
     b10:	80 91 ab 03 	lds	r24, 0x03AB
     b14:	88 23       	and	r24, r24
     b16:	91 f0       	breq	.+36     	; 0xb3c <dialog_tick+0x2c>
    if (--_dialog_second_counter == 0) {
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	80 93 ab 03 	sts	0x03AB, r24
     b1e:	81 11       	cpse	r24, r1
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <dialog_tick+0x2c>
      _dialog_goto_state(_dialog_seq[_dialog_current_state].error_state);
     b22:	80 91 aa 03 	lds	r24, 0x03AA
     b26:	e0 91 a8 03 	lds	r30, 0x03A8
     b2a:	f0 91 a9 03 	lds	r31, 0x03A9
     b2e:	9b e0       	ldi	r25, 0x0B	; 11
     b30:	89 9f       	mul	r24, r25
     b32:	e0 0d       	add	r30, r0
     b34:	f1 1d       	adc	r31, r1
     b36:	11 24       	eor	r1, r1
     b38:	80 85       	ldd	r24, Z+8	; 0x08
     b3a:	7b cf       	rjmp	.-266    	; 0xa32 <_dialog_goto_state>
     b3c:	08 95       	ret

00000b3e <dialog_byte_received>:
If there are specified a pointer to an argument buffer in the current state of the dialog_seq, the received argument bytes will be stored in this buffer, else the argument values will be thrown away.

 When/If the expected response string is received the dialog state is changed to the current dialog states OK state.
 @param[in] byte received from device we are communication with.
 */
void dialog_byte_received(const uint8_t byte) {
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	98 2e       	mov	r9, r24
  uint8_t _retry;
  
  switch (_dialog_await_state) {
     b5c:	80 91 a7 03 	lds	r24, 0x03A7
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <dialog_byte_received+0x28>
     b64:	42 c0       	rjmp	.+132    	; 0xbea <dialog_byte_received+0xac>
     b66:	20 f0       	brcs	.+8      	; 0xb70 <dialog_byte_received+0x32>
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	09 f4       	brne	.+2      	; 0xb6e <dialog_byte_received+0x30>
     b6c:	70 c0       	rjmp	.+224    	; 0xc4e <dialog_byte_received+0x110>
     b6e:	af c0       	rjmp	.+350    	; 0xcce <dialog_byte_received+0x190>
     b70:	81 2c       	mov	r8, r1
  case NORMAL_STATE:
    _retry = 0;
    do {
      if (*_dialog_format.response_p++ != byte) {
     b72:	c0 eb       	ldi	r28, 0xB0	; 176
     b74:	d3 e0       	ldi	r29, 0x03	; 3
        // Problem: not the expected byte
        // Lets try from the beginning of the format
        _dialog_format.response_p = _dialog_format.response;
     b76:	0f 2e       	mov	r0, r31
     b78:	fc ea       	ldi	r31, 0xAC	; 172
     b7a:	cf 2e       	mov	r12, r31
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	df 2e       	mov	r13, r31
     b80:	f0 2d       	mov	r31, r0

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
     b82:	0f 2e       	mov	r0, r31
     b84:	f3 eb       	ldi	r31, 0xB3	; 179
     b86:	ef 2e       	mov	r14, r31
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	ff 2e       	mov	r15, r31
     b8c:	f0 2d       	mov	r31, r0
        if (_dialog_format.arg_buffers != 0) {
     b8e:	04 eb       	ldi	r16, 0xB4	; 180
     b90:	13 e0       	ldi	r17, 0x03	; 3
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
        }

        if (!_retry) {
     b92:	77 24       	eor	r7, r7
     b94:	73 94       	inc	r7
     b96:	61 2c       	mov	r6, r1
        _dialog_format.response_p = _dialog_format.response;

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
        if (_dialog_format.arg_buffers != 0) {
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
     b98:	0f 2e       	mov	r0, r31
     b9a:	f6 eb       	ldi	r31, 0xB6	; 182
     b9c:	af 2e       	mov	r10, r31
     b9e:	f3 e0       	ldi	r31, 0x03	; 3
     ba0:	bf 2e       	mov	r11, r31
     ba2:	f0 2d       	mov	r31, r0
  
  switch (_dialog_await_state) {
  case NORMAL_STATE:
    _retry = 0;
    do {
      if (*_dialog_format.response_p++ != byte) {
     ba4:	e8 81       	ld	r30, Y
     ba6:	f9 81       	ldd	r31, Y+1	; 0x01
     ba8:	9f 01       	movw	r18, r30
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	39 83       	std	Y+1, r19	; 0x01
     bb0:	28 83       	st	Y, r18
     bb2:	80 81       	ld	r24, Z
     bb4:	89 15       	cp	r24, r9
     bb6:	a9 f0       	breq	.+42     	; 0xbe2 <dialog_byte_received+0xa4>
        // Problem: not the expected byte
        // Lets try from the beginning of the format
        _dialog_format.response_p = _dialog_format.response;
     bb8:	d6 01       	movw	r26, r12
     bba:	8d 91       	ld	r24, X+
     bbc:	9c 91       	ld	r25, X
     bbe:	99 83       	std	Y+1, r25	; 0x01
     bc0:	88 83       	st	Y, r24

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
     bc2:	f7 01       	movw	r30, r14
     bc4:	10 82       	st	Z, r1
        if (_dialog_format.arg_buffers != 0) {
     bc6:	d8 01       	movw	r26, r16
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <dialog_byte_received+0x9c>
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	f5 01       	movw	r30, r10
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	80 83       	st	Z, r24
        }

        if (!_retry) {
     bda:	87 2d       	mov	r24, r7
     bdc:	81 10       	cpse	r8, r1
     bde:	86 2d       	mov	r24, r6
          _retry = 1;
     be0:	88 2e       	mov	r8, r24
        } else {
          _retry = 0;
        }
      }
      _dialog_prepare_for_next_byte();
     be2:	97 de       	rcall	.-722    	; 0x912 <_dialog_prepare_for_next_byte>
    } while (_retry);
     be4:	81 10       	cpse	r8, r1
     be6:	de cf       	rjmp	.-68     	; 0xba4 <dialog_byte_received+0x66>
     be8:	72 c0       	rjmp	.+228    	; 0xcce <dialog_byte_received+0x190>
    break;

  case ARG_STATE:
    // Test if buffer is specified
    if (_dialog_format.arg_buffers != 0) {
     bea:	20 91 b4 03 	lds	r18, 0x03B4
     bee:	30 91 b5 03 	lds	r19, 0x03B5
     bf2:	21 15       	cp	r18, r1
     bf4:	31 05       	cpc	r19, r1
     bf6:	11 f1       	breq	.+68     	; 0xc3c <dialog_byte_received+0xfe>
      *_dialog_format.arg_buf_p++ = byte;
     bf8:	a6 eb       	ldi	r26, 0xB6	; 182
     bfa:	b3 e0       	ldi	r27, 0x03	; 3
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	cf 01       	movw	r24, r30
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	8d 93       	st	X+, r24
     c08:	9c 93       	st	X, r25
     c0a:	90 82       	st	Z, r9
      // Update length of received argument in arg_buffers
      _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len++;
     c0c:	e0 91 b3 03 	lds	r30, 0x03B3
     c10:	ff 27       	eor	r31, r31
     c12:	e7 fd       	sbrc	r30, 7
     c14:	f0 95       	com	r31
     c16:	cf 01       	movw	r24, r30
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	e8 0f       	add	r30, r24
     c1e:	f9 1f       	adc	r31, r25
     c20:	e2 0f       	add	r30, r18
     c22:	f3 1f       	adc	r31, r19
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	82 83       	std	Z+2, r24	; 0x02

      // have we got all the bytes in the this argument
      if (--(_dialog_format.arg_cnt) == 0) {
     c2a:	e2 eb       	ldi	r30, 0xB2	; 178
     c2c:	f3 e0       	ldi	r31, 0x03	; 3
     c2e:	80 81       	ld	r24, Z
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	80 83       	st	Z, r24
     c34:	81 11       	cpse	r24, r1
     c36:	4b c0       	rjmp	.+150    	; 0xcce <dialog_byte_received+0x190>
        _dialog_prepare_for_next_byte();
     c38:	6c de       	rcall	.-808    	; 0x912 <_dialog_prepare_for_next_byte>
     c3a:	49 c0       	rjmp	.+146    	; 0xcce <dialog_byte_received+0x190>
      }
    } else if (--(_dialog_format.arg_cnt) == 0) {
     c3c:	e2 eb       	ldi	r30, 0xB2	; 178
     c3e:	f3 e0       	ldi	r31, 0x03	; 3
     c40:	80 81       	ld	r24, Z
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	80 83       	st	Z, r24
     c46:	81 11       	cpse	r24, r1
     c48:	42 c0       	rjmp	.+132    	; 0xcce <dialog_byte_received+0x190>
        _dialog_prepare_for_next_byte();
     c4a:	63 de       	rcall	.-826    	; 0x912 <_dialog_prepare_for_next_byte>
     c4c:	40 c0       	rjmp	.+128    	; 0xcce <dialog_byte_received+0x190>
    }
    break;

  case ARG_MAX_STATE:
    // Test if we still are receiving argument bytes
    if (byte != *_dialog_format.response_p) {
     c4e:	e0 91 b0 03 	lds	r30, 0x03B0
     c52:	f0 91 b1 03 	lds	r31, 0x03B1
     c56:	80 81       	ld	r24, Z
     c58:	89 15       	cp	r24, r9
     c5a:	51 f1       	breq	.+84     	; 0xcb0 <dialog_byte_received+0x172>
      // Test if buffer is specified
      if (_dialog_format.arg_buffers != 0) {
     c5c:	80 91 b4 03 	lds	r24, 0x03B4
     c60:	90 91 b5 03 	lds	r25, 0x03B5
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	09 f4       	brne	.+2      	; 0xc6a <dialog_byte_received+0x12c>
     c68:	4e c0       	rjmp	.+156    	; 0xd06 <dialog_byte_received+0x1c8>
        *_dialog_format.arg_buf_p++ = byte;
     c6a:	a6 eb       	ldi	r26, 0xB6	; 182
     c6c:	b3 e0       	ldi	r27, 0x03	; 3
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	9f 01       	movw	r18, r30
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	2d 93       	st	X+, r18
     c7c:	3c 93       	st	X, r19
     c7e:	90 82       	st	Z, r9
        // Update length of received argument in arg_buffers
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len++;
     c80:	20 91 b3 03 	lds	r18, 0x03B3
     c84:	33 27       	eor	r19, r19
     c86:	27 fd       	sbrc	r18, 7
     c88:	30 95       	com	r19
     c8a:	f9 01       	movw	r30, r18
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	82 83       	std	Z+2, r24	; 0x02

        // Have we received the maximum number of bytes in argument?
        if (--(_dialog_format.arg_cnt) == 0) {
     c9e:	e2 eb       	ldi	r30, 0xB2	; 178
     ca0:	f3 e0       	ldi	r31, 0x03	; 3
     ca2:	80 81       	ld	r24, Z
     ca4:	81 50       	subi	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
     ca8:	81 11       	cpse	r24, r1
     caa:	11 c0       	rjmp	.+34     	; 0xcce <dialog_byte_received+0x190>
          _dialog_prepare_for_next_byte();
     cac:	32 de       	rcall	.-924    	; 0x912 <_dialog_prepare_for_next_byte>
     cae:	0f c0       	rjmp	.+30     	; 0xcce <dialog_byte_received+0x190>
        }
      }
    } else if (--(_dialog_format.arg_cnt) == 0) { // or have we received the maximum allowed no of bytes in the argument?
     cb0:	a2 eb       	ldi	r26, 0xB2	; 178
     cb2:	b3 e0       	ldi	r27, 0x03	; 3
     cb4:	8c 91       	ld	r24, X
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	8c 93       	st	X, r24
     cba:	81 11       	cpse	r24, r1
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <dialog_byte_received+0x184>
      _dialog_prepare_for_next_byte();
     cbe:	29 de       	rcall	.-942    	; 0x912 <_dialog_prepare_for_next_byte>
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <dialog_byte_received+0x190>
    } else {
      // Next byte in normal response is received
      _dialog_format.response_p++;
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	f0 93 b1 03 	sts	0x03B1, r31
     cc8:	e0 93 b0 03 	sts	0x03B0, r30
      _dialog_prepare_for_next_byte();
     ccc:	22 de       	rcall	.-956    	; 0x912 <_dialog_prepare_for_next_byte>
  default:
    break;
  }

  // Test if we are done - have received all bytes in this state of the dialog_seq
  if ((_dialog_await_state == NORMAL_STATE) && (_dialog_format.response_p > _dialog_format.last)) {
     cce:	80 91 a7 03 	lds	r24, 0x03A7
     cd2:	81 11       	cpse	r24, r1
     cd4:	18 c0       	rjmp	.+48     	; 0xd06 <dialog_byte_received+0x1c8>
     cd6:	20 91 b0 03 	lds	r18, 0x03B0
     cda:	30 91 b1 03 	lds	r19, 0x03B1
     cde:	80 91 ae 03 	lds	r24, 0x03AE
     ce2:	90 91 af 03 	lds	r25, 0x03AF
     ce6:	82 17       	cp	r24, r18
     ce8:	93 07       	cpc	r25, r19
     cea:	68 f4       	brcc	.+26     	; 0xd06 <dialog_byte_received+0x1c8>
    // OK - goto OK state
    _dialog_goto_state(_dialog_seq[_dialog_current_state].ok_state);
     cec:	80 91 aa 03 	lds	r24, 0x03AA
     cf0:	e0 91 a8 03 	lds	r30, 0x03A8
     cf4:	f0 91 a9 03 	lds	r31, 0x03A9
     cf8:	9b e0       	ldi	r25, 0x0B	; 11
     cfa:	89 9f       	mul	r24, r25
     cfc:	e0 0d       	add	r30, r0
     cfe:	f1 1d       	adc	r31, r1
     d00:	11 24       	eor	r1, r1
     d02:	87 81       	ldd	r24, Z+7	; 0x07
     d04:	96 de       	rcall	.-724    	; 0xa32 <_dialog_goto_state>
  }
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	08 95       	ret

00000d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d24:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d26:	03 96       	adiw	r24, 0x03	; 3
     d28:	92 83       	std	Z+2, r25	; 0x02
     d2a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	34 83       	std	Z+4, r19	; 0x04
     d32:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d34:	96 83       	std	Z+6, r25	; 0x06
     d36:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d38:	90 87       	std	Z+8, r25	; 0x08
     d3a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d3c:	10 82       	st	Z, r1
     d3e:	08 95       	ret

00000d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d40:	fc 01       	movw	r30, r24
     d42:	11 86       	std	Z+9, r1	; 0x09
     d44:	10 86       	std	Z+8, r1	; 0x08
     d46:	08 95       	ret

00000d48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	9c 01       	movw	r18, r24
     d4e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     d50:	dc 01       	movw	r26, r24
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	cd 91       	ld	r28, X+
     d56:	dc 91       	ld	r29, X
     d58:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d5a:	d3 83       	std	Z+3, r29	; 0x03
     d5c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	95 83       	std	Z+5, r25	; 0x05
     d64:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	dc 01       	movw	r26, r24
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	7c 93       	st	X, r23
     d70:	6e 93       	st	-X, r22
     d72:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     d74:	7d 83       	std	Y+5, r23	; 0x05
     d76:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d78:	31 87       	std	Z+9, r19	; 0x09
     d7a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     d7c:	f9 01       	movw	r30, r18
     d7e:	80 81       	ld	r24, Z
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 83       	st	Z, r24
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d90:	48 81       	ld	r20, Y
     d92:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d94:	4f 3f       	cpi	r20, 0xFF	; 255
     d96:	2f ef       	ldi	r18, 0xFF	; 255
     d98:	52 07       	cpc	r21, r18
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d9c:	fc 01       	movw	r30, r24
     d9e:	a7 81       	ldd	r26, Z+7	; 0x07
     da0:	b0 85       	ldd	r27, Z+8	; 0x08
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     da4:	dc 01       	movw	r26, r24
     da6:	13 96       	adiw	r26, 0x03	; 3
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	13 97       	sbiw	r26, 0x03	; 3
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	42 17       	cp	r20, r18
     db6:	53 07       	cpc	r21, r19
     db8:	10 f0       	brcs	.+4      	; 0xdbe <vListInsert+0x34>
     dba:	df 01       	movw	r26, r30
     dbc:	f5 cf       	rjmp	.-22     	; 0xda8 <vListInsert+0x1e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	ed 91       	ld	r30, X+
     dc2:	fc 91       	ld	r31, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	fb 83       	std	Y+3, r31	; 0x03
     dc8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     dca:	d5 83       	std	Z+5, r29	; 0x05
     dcc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     dce:	bd 83       	std	Y+5, r27	; 0x05
     dd0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     dd2:	13 96       	adiw	r26, 0x03	; 3
     dd4:	dc 93       	st	X, r29
     dd6:	ce 93       	st	-X, r28
     dd8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     dda:	99 87       	std	Y+9, r25	; 0x09
     ddc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     dde:	fc 01       	movw	r30, r24
     de0:	20 81       	ld	r18, Z
     de2:	2f 5f       	subi	r18, 0xFF	; 255
     de4:	20 83       	st	Z, r18
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     df2:	a0 85       	ldd	r26, Z+8	; 0x08
     df4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     df6:	c2 81       	ldd	r28, Z+2	; 0x02
     df8:	d3 81       	ldd	r29, Z+3	; 0x03
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	95 81       	ldd	r25, Z+5	; 0x05
     dfe:	9d 83       	std	Y+5, r25	; 0x05
     e00:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e02:	c4 81       	ldd	r28, Z+4	; 0x04
     e04:	d5 81       	ldd	r29, Z+5	; 0x05
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	9b 83       	std	Y+3, r25	; 0x03
     e0c:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	cd 91       	ld	r28, X+
     e12:	dc 91       	ld	r29, X
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	ce 17       	cp	r28, r30
     e18:	df 07       	cpc	r29, r31
     e1a:	31 f4       	brne	.+12     	; 0xe28 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     e28:	11 86       	std	Z+9, r1	; 0x09
     e2a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     e2c:	8c 91       	ld	r24, X
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <pxPortInitialiseStack>:
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */

#if defined( portUSE_TIMER0 )
   /* Setup clock source and compare match behaviour. Assuming 328p*/
	portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
     e38:	31 e1       	ldi	r19, 0x11	; 17
     e3a:	fc 01       	movw	r30, r24
     e3c:	30 83       	st	Z, r19
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	22 e2       	ldi	r18, 0x22	; 34
     e42:	20 83       	st	Z, r18
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	a3 e3       	ldi	r26, 0x33	; 51
     e48:	a0 83       	st	Z, r26
     e4a:	31 97       	sbiw	r30, 0x01	; 1
     e4c:	60 83       	st	Z, r22
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	70 83       	st	Z, r23
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	10 82       	st	Z, r1
     e56:	31 97       	sbiw	r30, 0x01	; 1
     e58:	10 82       	st	Z, r1
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	60 e8       	ldi	r22, 0x80	; 128
     e5e:	60 83       	st	Z, r22
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	10 82       	st	Z, r1
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	62 e0       	ldi	r22, 0x02	; 2
     e70:	60 83       	st	Z, r22
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	63 e0       	ldi	r22, 0x03	; 3
     e76:	60 83       	st	Z, r22
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	60 83       	st	Z, r22
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	60 83       	st	Z, r22
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	60 83       	st	Z, r22
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	67 e0       	ldi	r22, 0x07	; 7
     e8e:	60 83       	st	Z, r22
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	68 e0       	ldi	r22, 0x08	; 8
     e94:	60 83       	st	Z, r22
     e96:	31 97       	sbiw	r30, 0x01	; 1
     e98:	69 e0       	ldi	r22, 0x09	; 9
     e9a:	60 83       	st	Z, r22
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	60 e1       	ldi	r22, 0x10	; 16
     ea0:	60 83       	st	Z, r22
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	30 83       	st	Z, r19
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	32 e1       	ldi	r19, 0x12	; 18
     eaa:	30 83       	st	Z, r19
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	33 e1       	ldi	r19, 0x13	; 19
     eb0:	30 83       	st	Z, r19
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	34 e1       	ldi	r19, 0x14	; 20
     eb6:	30 83       	st	Z, r19
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	35 e1       	ldi	r19, 0x15	; 21
     ebc:	30 83       	st	Z, r19
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	36 e1       	ldi	r19, 0x16	; 22
     ec2:	30 83       	st	Z, r19
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	37 e1       	ldi	r19, 0x17	; 23
     ec8:	30 83       	st	Z, r19
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	38 e1       	ldi	r19, 0x18	; 24
     ece:	30 83       	st	Z, r19
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	39 e1       	ldi	r19, 0x19	; 25
     ed4:	30 83       	st	Z, r19
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	30 e2       	ldi	r19, 0x20	; 32
     eda:	30 83       	st	Z, r19
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	31 e2       	ldi	r19, 0x21	; 33
     ee0:	30 83       	st	Z, r19
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	20 83       	st	Z, r18
     ee6:	31 97       	sbiw	r30, 0x01	; 1
     ee8:	23 e2       	ldi	r18, 0x23	; 35
     eea:	20 83       	st	Z, r18
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	40 83       	st	Z, r20
     ef0:	31 97       	sbiw	r30, 0x01	; 1
     ef2:	50 83       	st	Z, r21
     ef4:	31 97       	sbiw	r30, 0x01	; 1
     ef6:	26 e2       	ldi	r18, 0x26	; 38
     ef8:	20 83       	st	Z, r18
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	27 e2       	ldi	r18, 0x27	; 39
     efe:	20 83       	st	Z, r18
     f00:	31 97       	sbiw	r30, 0x01	; 1
     f02:	28 e2       	ldi	r18, 0x28	; 40
     f04:	20 83       	st	Z, r18
     f06:	31 97       	sbiw	r30, 0x01	; 1
     f08:	29 e2       	ldi	r18, 0x29	; 41
     f0a:	20 83       	st	Z, r18
     f0c:	31 97       	sbiw	r30, 0x01	; 1
     f0e:	20 e3       	ldi	r18, 0x30	; 48
     f10:	20 83       	st	Z, r18
     f12:	31 97       	sbiw	r30, 0x01	; 1
     f14:	21 e3       	ldi	r18, 0x31	; 49
     f16:	20 83       	st	Z, r18
     f18:	89 97       	sbiw	r24, 0x29	; 41
     f1a:	08 95       	ret

00000f1c <xPortStartScheduler>:
     f1c:	88 ee       	ldi	r24, 0xE8	; 232
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	90 93 bb 03 	sts	0x03BB, r25
     f24:	80 93 ba 03 	sts	0x03BA, r24
     f28:	90 93 b9 03 	sts	0x03B9, r25
     f2c:	80 93 b8 03 	sts	0x03B8, r24
     f30:	89 ef       	ldi	r24, 0xF9	; 249
     f32:	87 bd       	out	0x27, r24	; 39
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	84 bd       	out	0x24, r24	; 36
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	85 bd       	out	0x25, r24	; 37
     f3c:	ee e6       	ldi	r30, 0x6E	; 110
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	80 83       	st	Z, r24
     f46:	a0 91 db 0d 	lds	r26, 0x0DDB
     f4a:	b0 91 dc 0d 	lds	r27, 0x0DDC
     f4e:	cd 91       	ld	r28, X+
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	dd 91       	ld	r29, X+
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	9f 90       	pop	r9
     f84:	8f 90       	pop	r8
     f86:	7f 90       	pop	r7
     f88:	6f 90       	pop	r6
     f8a:	5f 90       	pop	r5
     f8c:	4f 90       	pop	r4
     f8e:	3f 90       	pop	r3
     f90:	2f 90       	pop	r2
     f92:	1f 90       	pop	r1
     f94:	0f 90       	pop	r0
     f96:	0c be       	out	0x3c, r0	; 60
     f98:	0f 90       	pop	r0
     f9a:	0b be       	out	0x3b, r0	; 59
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	08 95       	ret
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 95       	ret

00000fa8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	0f 92       	push	r0
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	0c b6       	in	r0, 0x3c	; 60
     fb6:	0f 92       	push	r0
     fb8:	1f 92       	push	r1
     fba:	11 24       	eor	r1, r1
     fbc:	2f 92       	push	r2
     fbe:	3f 92       	push	r3
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	a0 91 db 0d 	lds	r26, 0x0DDB
     ffc:	b0 91 dc 0d 	lds	r27, 0x0DDC
    1000:	0d b6       	in	r0, 0x3d	; 61
    1002:	0d 92       	st	X+, r0
    1004:	0e b6       	in	r0, 0x3e	; 62
    1006:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1008:	b3 d5       	rcall	.+2918   	; 0x1b70 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    100a:	a0 91 db 0d 	lds	r26, 0x0DDB
    100e:	b0 91 dc 0d 	lds	r27, 0x0DDC
    1012:	cd 91       	ld	r28, X+
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	dd 91       	ld	r29, X+
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	9f 90       	pop	r9
    1048:	8f 90       	pop	r8
    104a:	7f 90       	pop	r7
    104c:	6f 90       	pop	r6
    104e:	5f 90       	pop	r5
    1050:	4f 90       	pop	r4
    1052:	3f 90       	pop	r3
    1054:	2f 90       	pop	r2
    1056:	1f 90       	pop	r1
    1058:	0f 90       	pop	r0
    105a:	0c be       	out	0x3c, r0	; 60
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1066:	08 95       	ret

00001068 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	0f 92       	push	r0
    1070:	0b b6       	in	r0, 0x3b	; 59
    1072:	0f 92       	push	r0
    1074:	0c b6       	in	r0, 0x3c	; 60
    1076:	0f 92       	push	r0
    1078:	1f 92       	push	r1
    107a:	11 24       	eor	r1, r1
    107c:	2f 92       	push	r2
    107e:	3f 92       	push	r3
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	a0 91 db 0d 	lds	r26, 0x0DDB
    10bc:	b0 91 dc 0d 	lds	r27, 0x0DDC
    10c0:	0d b6       	in	r0, 0x3d	; 61
    10c2:	0d 92       	st	X+, r0
    10c4:	0e b6       	in	r0, 0x3e	; 62
    10c6:	0d 92       	st	X+, r0

	if (--ticksRemainingInSec == 0)
    10c8:	80 91 b8 03 	lds	r24, 0x03B8
    10cc:	90 91 b9 03 	lds	r25, 0x03B9
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	90 93 b9 03 	sts	0x03B9, r25
    10d6:	80 93 b8 03 	sts	0x03B8, r24
    10da:	89 2b       	or	r24, r25
    10dc:	41 f4       	brne	.+16     	; 0x10ee <vPortYieldFromTick+0x86>
	{
//		system_tick();
		ticksRemainingInSec = portTickRateHz;
    10de:	80 91 ba 03 	lds	r24, 0x03BA
    10e2:	90 91 bb 03 	lds	r25, 0x03BB
    10e6:	90 93 b9 03 	sts	0x03B9, r25
    10ea:	80 93 b8 03 	sts	0x03B8, r24
	}

	if( xTaskIncrementTick() != pdFALSE )
    10ee:	ec d3       	rcall	.+2008   	; 0x18c8 <xTaskIncrementTick>
    10f0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    10f2:	3e d5       	rcall	.+2684   	; 0x1b70 <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    10f4:	a0 91 db 0d 	lds	r26, 0x0DDB
    10f8:	b0 91 dc 0d 	lds	r27, 0x0DDC
    10fc:	cd 91       	ld	r28, X+
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	dd 91       	ld	r29, X+
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	8f 90       	pop	r8
    1134:	7f 90       	pop	r7
    1136:	6f 90       	pop	r6
    1138:	5f 90       	pop	r5
    113a:	4f 90       	pop	r4
    113c:	3f 90       	pop	r3
    113e:	2f 90       	pop	r2
    1140:	1f 90       	pop	r1
    1142:	0f 90       	pop	r0
    1144:	0c be       	out	0x3c, r0	; 60
    1146:	0f 90       	pop	r0
    1148:	0b be       	out	0x3b, r0	; 59
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1150:	08 95       	ret

00001152 <__vector_21>:
	 */
//	ISR(TIMER_COMPA_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(TIMER_COMPA_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(TIMER_COMPA_ISR, ISR_NAKED)
	{
		vPortYieldFromTick();
    1152:	8a df       	rcall	.-236    	; 0x1068 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    1154:	18 95       	reti

00001156 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    115c:	af d3       	rcall	.+1886   	; 0x18bc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    115e:	80 91 bc 03 	lds	r24, 0x03BC
    1162:	90 91 bd 03 	lds	r25, 0x03BD
    1166:	89 2b       	or	r24, r25
    1168:	31 f4       	brne	.+12     	; 0x1176 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    116a:	81 ec       	ldi	r24, 0xC1	; 193
    116c:	93 e0       	ldi	r25, 0x03	; 3
    116e:	90 93 bd 03 	sts	0x03BD, r25
    1172:	80 93 bc 03 	sts	0x03BC, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1176:	40 91 be 03 	lds	r20, 0x03BE
    117a:	50 91 bf 03 	lds	r21, 0x03BF
    117e:	9e 01       	movw	r18, r28
    1180:	24 0f       	add	r18, r20
    1182:	35 1f       	adc	r19, r21
    1184:	23 3c       	cpi	r18, 0xC3	; 195
    1186:	89 e0       	ldi	r24, 0x09	; 9
    1188:	38 07       	cpc	r19, r24
    118a:	70 f4       	brcc	.+28     	; 0x11a8 <pvPortMalloc+0x52>
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	70 f4       	brcc	.+28     	; 0x11ae <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1192:	c0 91 bc 03 	lds	r28, 0x03BC
    1196:	d0 91 bd 03 	lds	r29, 0x03BD
    119a:	c4 0f       	add	r28, r20
    119c:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
    119e:	30 93 bf 03 	sts	0x03BF, r19
    11a2:	20 93 be 03 	sts	0x03BE, r18
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <pvPortMalloc+0x5c>
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    11b2:	45 d4       	rcall	.+2186   	; 0x1a3e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    11b4:	ce 01       	movw	r24, r28
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    11bc:	08 95       	ret

000011be <prvCopyDataToQueue>:
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	14 2f       	mov	r17, r20
    11c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11ca:	88 23       	and	r24, r24
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <prvCopyDataToQueue+0x8a>
    11ce:	41 11       	cpse	r20, r1
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <prvCopyDataToQueue+0x42>
    11d2:	48 2f       	mov	r20, r24
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <memcpy>
    11de:	2c 8d       	ldd	r18, Y+28	; 0x1c
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	82 0f       	add	r24, r18
    11e6:	91 1d       	adc	r25, r1
    11e8:	9d 83       	std	Y+5, r25	; 0x05
    11ea:	8c 83       	std	Y+4, r24	; 0x04
    11ec:	2a 81       	ldd	r18, Y+2	; 0x02
    11ee:	3b 81       	ldd	r19, Y+3	; 0x03
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	48 f1       	brcs	.+82     	; 0x1248 <prvCopyDataToQueue+0x8a>
    11f6:	88 81       	ld	r24, Y
    11f8:	99 81       	ldd	r25, Y+1	; 0x01
    11fa:	9d 83       	std	Y+5, r25	; 0x05
    11fc:	8c 83       	std	Y+4, r24	; 0x04
    11fe:	24 c0       	rjmp	.+72     	; 0x1248 <prvCopyDataToQueue+0x8a>
    1200:	48 2f       	mov	r20, r24
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <memcpy>
    120c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	31 95       	neg	r19
    1212:	21 95       	neg	r18
    1214:	31 09       	sbc	r19, r1
    1216:	8e 81       	ldd	r24, Y+6	; 0x06
    1218:	9f 81       	ldd	r25, Y+7	; 0x07
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	9f 83       	std	Y+7, r25	; 0x07
    1220:	8e 83       	std	Y+6, r24	; 0x06
    1222:	68 81       	ld	r22, Y
    1224:	79 81       	ldd	r23, Y+1	; 0x01
    1226:	86 17       	cp	r24, r22
    1228:	97 07       	cpc	r25, r23
    122a:	30 f4       	brcc	.+12     	; 0x1238 <prvCopyDataToQueue+0x7a>
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	28 0f       	add	r18, r24
    1232:	39 1f       	adc	r19, r25
    1234:	3f 83       	std	Y+7, r19	; 0x07
    1236:	2e 83       	std	Y+6, r18	; 0x06
    1238:	12 30       	cpi	r17, 0x02	; 2
    123a:	31 f4       	brne	.+12     	; 0x1248 <prvCopyDataToQueue+0x8a>
    123c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <prvCopyDataToQueue+0x8a>
    1242:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	8a 8f       	std	Y+26, r24	; 0x1a
    1248:	8a 8d       	ldd	r24, Y+26	; 0x1a
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 8f       	std	Y+26, r24	; 0x1a
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	08 95       	ret

00001258 <prvCopyDataFromQueue>:
    1258:	fc 01       	movw	r30, r24
    125a:	cb 01       	movw	r24, r22
    125c:	44 8d       	ldd	r20, Z+28	; 0x1c
    125e:	44 23       	and	r20, r20
    1260:	a1 f0       	breq	.+40     	; 0x128a <prvCopyDataFromQueue+0x32>
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	26 81       	ldd	r18, Z+6	; 0x06
    1266:	37 81       	ldd	r19, Z+7	; 0x07
    1268:	24 0f       	add	r18, r20
    126a:	35 1f       	adc	r19, r21
    126c:	37 83       	std	Z+7, r19	; 0x07
    126e:	26 83       	std	Z+6, r18	; 0x06
    1270:	62 81       	ldd	r22, Z+2	; 0x02
    1272:	73 81       	ldd	r23, Z+3	; 0x03
    1274:	26 17       	cp	r18, r22
    1276:	37 07       	cpc	r19, r23
    1278:	20 f0       	brcs	.+8      	; 0x1282 <prvCopyDataFromQueue+0x2a>
    127a:	20 81       	ld	r18, Z
    127c:	31 81       	ldd	r19, Z+1	; 0x01
    127e:	37 83       	std	Z+7, r19	; 0x07
    1280:	26 83       	std	Z+6, r18	; 0x06
    1282:	66 81       	ldd	r22, Z+6	; 0x06
    1284:	77 81       	ldd	r23, Z+7	; 0x07
    1286:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <memcpy>
    128a:	08 95       	ret

0000128c <prvUnlockQueue>:
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	0f 92       	push	r0
    129c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    129e:	18 16       	cp	r1, r24
    12a0:	a4 f4       	brge	.+40     	; 0x12ca <prvUnlockQueue+0x3e>
    12a2:	89 89       	ldd	r24, Y+17	; 0x11
    12a4:	88 23       	and	r24, r24
    12a6:	89 f0       	breq	.+34     	; 0x12ca <prvUnlockQueue+0x3e>
    12a8:	8e 01       	movw	r16, r28
    12aa:	0f 5e       	subi	r16, 0xEF	; 239
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <prvUnlockQueue+0x2a>
    12b0:	89 89       	ldd	r24, Y+17	; 0x11
    12b2:	88 23       	and	r24, r24
    12b4:	51 f0       	breq	.+20     	; 0x12ca <prvUnlockQueue+0x3e>
    12b6:	c8 01       	movw	r24, r16
    12b8:	ed d4       	rcall	.+2522   	; 0x1c94 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	6c d5       	rcall	.+2776   	; 0x1d96 <vTaskMissedYield>
    12be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c0:	81 50       	subi	r24, 0x01	; 1
    12c2:	8e 8f       	std	Y+30, r24	; 0x1e
    12c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c6:	18 16       	cp	r1, r24
    12c8:	9c f3       	brlt	.-26     	; 0x12b0 <prvUnlockQueue+0x24>
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	8e 8f       	std	Y+30, r24	; 0x1e
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12da:	18 16       	cp	r1, r24
    12dc:	a4 f4       	brge	.+40     	; 0x1306 <prvUnlockQueue+0x7a>
    12de:	88 85       	ldd	r24, Y+8	; 0x08
    12e0:	88 23       	and	r24, r24
    12e2:	89 f0       	breq	.+34     	; 0x1306 <prvUnlockQueue+0x7a>
    12e4:	8e 01       	movw	r16, r28
    12e6:	08 5f       	subi	r16, 0xF8	; 248
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <prvUnlockQueue+0x66>
    12ec:	88 85       	ldd	r24, Y+8	; 0x08
    12ee:	88 23       	and	r24, r24
    12f0:	51 f0       	breq	.+20     	; 0x1306 <prvUnlockQueue+0x7a>
    12f2:	c8 01       	movw	r24, r16
    12f4:	cf d4       	rcall	.+2462   	; 0x1c94 <xTaskRemoveFromEventList>
    12f6:	81 11       	cpse	r24, r1
    12f8:	4e d5       	rcall	.+2716   	; 0x1d96 <vTaskMissedYield>
    12fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1302:	18 16       	cp	r1, r24
    1304:	9c f3       	brlt	.-26     	; 0x12ec <prvUnlockQueue+0x60>
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	8d 8f       	std	Y+29, r24	; 0x1d
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <xQueueGenericReset>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	0f 92       	push	r0
    1324:	88 81       	ld	r24, Y
    1326:	99 81       	ldd	r25, Y+1	; 0x01
    1328:	2c 8d       	ldd	r18, Y+28	; 0x1c
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    132e:	72 9f       	mul	r23, r18
    1330:	a0 01       	movw	r20, r0
    1332:	73 9f       	mul	r23, r19
    1334:	50 0d       	add	r21, r0
    1336:	11 24       	eor	r1, r1
    1338:	fc 01       	movw	r30, r24
    133a:	e4 0f       	add	r30, r20
    133c:	f5 1f       	adc	r31, r21
    133e:	fb 83       	std	Y+3, r31	; 0x03
    1340:	ea 83       	std	Y+2, r30	; 0x02
    1342:	1a 8e       	std	Y+26, r1	; 0x1a
    1344:	9d 83       	std	Y+5, r25	; 0x05
    1346:	8c 83       	std	Y+4, r24	; 0x04
    1348:	42 1b       	sub	r20, r18
    134a:	53 0b       	sbc	r21, r19
    134c:	84 0f       	add	r24, r20
    134e:	95 1f       	adc	r25, r21
    1350:	9f 83       	std	Y+7, r25	; 0x07
    1352:	8e 83       	std	Y+6, r24	; 0x06
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	8d 8f       	std	Y+29, r24	; 0x1d
    1358:	8e 8f       	std	Y+30, r24	; 0x1e
    135a:	61 11       	cpse	r22, r1
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <xQueueGenericReset+0x5a>
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	88 23       	and	r24, r24
    1362:	69 f0       	breq	.+26     	; 0x137e <xQueueGenericReset+0x66>
    1364:	ce 01       	movw	r24, r28
    1366:	08 96       	adiw	r24, 0x08	; 8
    1368:	95 d4       	rcall	.+2346   	; 0x1c94 <xTaskRemoveFromEventList>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	41 f4       	brne	.+16     	; 0x137e <xQueueGenericReset+0x66>
    136e:	1c de       	rcall	.-968    	; 0xfa8 <vPortYield>
    1370:	06 c0       	rjmp	.+12     	; 0x137e <xQueueGenericReset+0x66>
    1372:	ce 01       	movw	r24, r28
    1374:	08 96       	adiw	r24, 0x08	; 8
    1376:	d6 dc       	rcall	.-1620   	; 0xd24 <vListInitialise>
    1378:	ce 01       	movw	r24, r28
    137a:	41 96       	adiw	r24, 0x11	; 17
    137c:	d3 dc       	rcall	.-1626   	; 0xd24 <vListInitialise>
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <xQueueGenericCreate>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	08 2f       	mov	r16, r24
    1394:	16 2f       	mov	r17, r22
    1396:	66 23       	and	r22, r22
    1398:	b9 f0       	breq	.+46     	; 0x13c8 <xQueueGenericCreate+0x3e>
    139a:	86 9f       	mul	r24, r22
    139c:	c0 01       	movw	r24, r0
    139e:	11 24       	eor	r1, r1
    13a0:	80 96       	adiw	r24, 0x20	; 32
    13a2:	d9 de       	rcall	.-590    	; 0x1156 <pvPortMalloc>
    13a4:	ec 01       	movw	r28, r24
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <xQueueGenericCreate+0x28>
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <xQueueGenericCreate+0x4a>
    13ac:	d9 83       	std	Y+1, r29	; 0x01
    13ae:	c8 83       	st	Y, r28
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <xQueueGenericCreate+0x32>
    13b2:	9c 01       	movw	r18, r24
    13b4:	21 5e       	subi	r18, 0xE1	; 225
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	39 83       	std	Y+1, r19	; 0x01
    13ba:	28 83       	st	Y, r18
    13bc:	0b 8f       	std	Y+27, r16	; 0x1b
    13be:	1c 8f       	std	Y+28, r17	; 0x1c
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	ce 01       	movw	r24, r28
    13c4:	a9 df       	rcall	.-174    	; 0x1318 <xQueueGenericReset>
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <xQueueGenericCreate+0x4a>
    13c8:	8f e1       	ldi	r24, 0x1F	; 31
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	c4 de       	rcall	.-632    	; 0x1156 <pvPortMalloc>
    13ce:	ec 01       	movw	r28, r24
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f7       	brne	.-40     	; 0x13ac <xQueueGenericCreate+0x22>
    13d4:	ce 01       	movw	r24, r28
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
    13ea:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    13ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	98 17       	cp	r25, r24
    13f2:	10 f0       	brcs	.+4      	; 0x13f8 <xQueueGenericSendFromISR+0x18>
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	d1 f4       	brne	.+52     	; 0x142c <xQueueGenericSendFromISR+0x4c>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    13f8:	42 2f       	mov	r20, r18
    13fa:	ce 01       	movw	r24, r28
    13fc:	e0 de       	rcall	.-576    	; 0x11be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    13fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	79 f4       	brne	.+30     	; 0x1422 <xQueueGenericSendFromISR+0x42>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	88 23       	and	r24, r24
    1408:	99 f0       	breq	.+38     	; 0x1430 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    140a:	ce 01       	movw	r24, r28
    140c:	41 96       	adiw	r24, 0x11	; 17
    140e:	42 d4       	rcall	.+2180   	; 0x1c94 <xTaskRemoveFromEventList>
    1410:	88 23       	and	r24, r24
    1412:	81 f0       	breq	.+32     	; 0x1434 <xQueueGenericSendFromISR+0x54>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1414:	01 15       	cp	r16, r1
    1416:	11 05       	cpc	r17, r1
    1418:	79 f0       	breq	.+30     	; 0x1438 <xQueueGenericSendFromISR+0x58>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	f8 01       	movw	r30, r16
    141e:	80 83       	st	Z, r24
    1420:	0c c0       	rjmp	.+24     	; 0x143a <xQueueGenericSendFromISR+0x5a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1422:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	07 c0       	rjmp	.+14     	; 0x143a <xQueueGenericSendFromISR+0x5a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	05 c0       	rjmp	.+10     	; 0x143a <xQueueGenericSendFromISR+0x5a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	03 c0       	rjmp	.+6      	; 0x143a <xQueueGenericSendFromISR+0x5a>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <xQueueGenericSendFromISR+0x5a>
    1438:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	fc 01       	movw	r30, r24
    144a:	eb 01       	movw	r28, r22
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    144c:	92 8d       	ldd	r25, Z+26	; 0x1a
    144e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1450:	98 17       	cp	r25, r24
    1452:	c0 f4       	brcc	.+48     	; 0x1484 <xQueueGiveFromISR+0x40>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    1454:	82 8d       	ldd	r24, Z+26	; 0x1a
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    145a:	86 8d       	ldd	r24, Z+30	; 0x1e
    145c:	8f 3f       	cpi	r24, 0xFF	; 255
    145e:	69 f4       	brne	.+26     	; 0x147a <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1460:	81 89       	ldd	r24, Z+17	; 0x11
    1462:	88 23       	and	r24, r24
    1464:	89 f0       	breq	.+34     	; 0x1488 <xQueueGiveFromISR+0x44>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1466:	cf 01       	movw	r24, r30
    1468:	41 96       	adiw	r24, 0x11	; 17
    146a:	14 d4       	rcall	.+2088   	; 0x1c94 <xTaskRemoveFromEventList>
    146c:	88 23       	and	r24, r24
    146e:	71 f0       	breq	.+28     	; 0x148c <xQueueGiveFromISR+0x48>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1470:	20 97       	sbiw	r28, 0x00	; 0
    1472:	71 f0       	breq	.+28     	; 0x1490 <xQueueGiveFromISR+0x4c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	88 83       	st	Y, r24
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <xQueueGiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    147a:	86 8d       	ldd	r24, Z+30	; 0x1e
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <xQueueGiveFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <xQueueGiveFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <xQueueGiveFromISR+0x4e>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <xQueueGiveFromISR+0x4e>
    1490:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1498:	9f 92       	push	r9
    149a:	af 92       	push	r10
    149c:	bf 92       	push	r11
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <xQueueGenericReceive+0x18>
    14b0:	1f 92       	push	r1
    14b2:	1f 92       	push	r1
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8c 01       	movw	r16, r24
    14ba:	6b 01       	movw	r12, r22
    14bc:	5d 83       	std	Y+5, r21	; 0x05
    14be:	4c 83       	std	Y+4, r20	; 0x04
    14c0:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    14c2:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    14c4:	99 24       	eor	r9, r9
    14c6:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    14c8:	7c 01       	movw	r14, r24
    14ca:	81 e1       	ldi	r24, 0x11	; 17
    14cc:	e8 0e       	add	r14, r24
    14ce:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    14d6:	f8 01       	movw	r30, r16
    14d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    14da:	88 23       	and	r24, r24
    14dc:	21 f1       	breq	.+72     	; 0x1526 <xQueueGenericReceive+0x8e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    14de:	e6 80       	ldd	r14, Z+6	; 0x06
    14e0:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    14e2:	b6 01       	movw	r22, r12
    14e4:	c8 01       	movw	r24, r16
    14e6:	b8 de       	rcall	.-656    	; 0x1258 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    14e8:	b1 10       	cpse	r11, r1
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    14ec:	f8 01       	movw	r30, r16
    14ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	82 8f       	std	Z+26, r24	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14f4:	80 85       	ldd	r24, Z+8	; 0x08
    14f6:	88 23       	and	r24, r24
    14f8:	91 f0       	breq	.+36     	; 0x151e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    14fa:	c8 01       	movw	r24, r16
    14fc:	08 96       	adiw	r24, 0x08	; 8
    14fe:	ca d3       	rcall	.+1940   	; 0x1c94 <xTaskRemoveFromEventList>
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	69 f4       	brne	.+26     	; 0x151e <xQueueGenericReceive+0x86>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1504:	51 dd       	rcall	.-1374   	; 0xfa8 <vPortYield>
    1506:	0b c0       	rjmp	.+22     	; 0x151e <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1508:	f8 01       	movw	r30, r16
    150a:	f7 82       	std	Z+7, r15	; 0x07
    150c:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    150e:	81 89       	ldd	r24, Z+17	; 0x11
    1510:	88 23       	and	r24, r24
    1512:	29 f0       	breq	.+10     	; 0x151e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1514:	c8 01       	movw	r24, r16
    1516:	41 96       	adiw	r24, 0x11	; 17
    1518:	bd d3       	rcall	.+1914   	; 0x1c94 <xTaskRemoveFromEventList>
    151a:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    151c:	45 dd       	rcall	.-1398   	; 0xfa8 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	44 c0       	rjmp	.+136    	; 0x15ae <xQueueGenericReceive+0x116>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1526:	4c 81       	ldd	r20, Y+4	; 0x04
    1528:	5d 81       	ldd	r21, Y+5	; 0x05
    152a:	45 2b       	or	r20, r21
    152c:	21 f4       	brne	.+8      	; 0x1536 <xQueueGenericReceive+0x9e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	3c c0       	rjmp	.+120    	; 0x15ae <xQueueGenericReceive+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    1536:	a1 10       	cpse	r10, r1
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <xQueueGenericReceive+0xaa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	ee d3       	rcall	.+2012   	; 0x1d1c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1540:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1546:	ba d1       	rcall	.+884    	; 0x18bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	0f 92       	push	r0
    154e:	f8 01       	movw	r30, r16
    1550:	85 8d       	ldd	r24, Z+29	; 0x1d
    1552:	8f 3f       	cpi	r24, 0xFF	; 255
    1554:	09 f4       	brne	.+2      	; 0x1558 <xQueueGenericReceive+0xc0>
    1556:	15 8e       	std	Z+29, r1	; 0x1d
    1558:	f8 01       	movw	r30, r16
    155a:	86 8d       	ldd	r24, Z+30	; 0x1e
    155c:	8f 3f       	cpi	r24, 0xFF	; 255
    155e:	09 f4       	brne	.+2      	; 0x1562 <xQueueGenericReceive+0xca>
    1560:	16 8e       	std	Z+30, r1	; 0x1e
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1566:	be 01       	movw	r22, r28
    1568:	6c 5f       	subi	r22, 0xFC	; 252
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	ce 01       	movw	r24, r28
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	e0 d3       	rcall	.+1984   	; 0x1d32 <xTaskCheckForTimeOut>
    1572:	81 11       	cpse	r24, r1
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <xQueueGenericReceive+0x10e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    157c:	f8 01       	movw	r30, r16
    157e:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1584:	81 11       	cpse	r24, r1
    1586:	0b c0       	rjmp	.+22     	; 0x159e <xQueueGenericReceive+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1588:	6c 81       	ldd	r22, Y+4	; 0x04
    158a:	7d 81       	ldd	r23, Y+5	; 0x05
    158c:	c7 01       	movw	r24, r14
    158e:	68 d3       	rcall	.+1744   	; 0x1c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1590:	c8 01       	movw	r24, r16
    1592:	7c de       	rcall	.-776    	; 0x128c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1594:	54 d2       	rcall	.+1192   	; 0x1a3e <xTaskResumeAll>
    1596:	81 11       	cpse	r24, r1
    1598:	9b cf       	rjmp	.-202    	; 0x14d0 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    159a:	06 dd       	rcall	.-1524   	; 0xfa8 <vPortYield>
    159c:	99 cf       	rjmp	.-206    	; 0x14d0 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    159e:	c8 01       	movw	r24, r16
    15a0:	75 de       	rcall	.-790    	; 0x128c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    15a2:	4d d2       	rcall	.+1178   	; 0x1a3e <xTaskResumeAll>
    15a4:	95 cf       	rjmp	.-214    	; 0x14d0 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    15a6:	c8 01       	movw	r24, r16
    15a8:	71 de       	rcall	.-798    	; 0x128c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    15aa:	49 d2       	rcall	.+1170   	; 0x1a3e <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	08 95       	ret

000015d0 <prvResetNextTaskUnblockTime>:
    15d0:	e0 91 a3 0d 	lds	r30, 0x0DA3
    15d4:	f0 91 a4 0d 	lds	r31, 0x0DA4
    15d8:	80 81       	ld	r24, Z
    15da:	81 11       	cpse	r24, r1
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <prvResetNextTaskUnblockTime+0x1c>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	90 93 4a 02 	sts	0x024A, r25
    15e6:	80 93 49 02 	sts	0x0249, r24
    15ea:	08 95       	ret
    15ec:	e0 91 a3 0d 	lds	r30, 0x0DA3
    15f0:	f0 91 a4 0d 	lds	r31, 0x0DA4
    15f4:	05 80       	ldd	r0, Z+5	; 0x05
    15f6:	f6 81       	ldd	r31, Z+6	; 0x06
    15f8:	e0 2d       	mov	r30, r0
    15fa:	06 80       	ldd	r0, Z+6	; 0x06
    15fc:	f7 81       	ldd	r31, Z+7	; 0x07
    15fe:	e0 2d       	mov	r30, r0
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	90 93 4a 02 	sts	0x024A, r25
    1608:	80 93 49 02 	sts	0x0249, r24
    160c:	08 95       	ret

0000160e <prvAddCurrentTaskToDelayedList>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	e0 91 db 0d 	lds	r30, 0x0DDB
    1618:	f0 91 dc 0d 	lds	r31, 0x0DDC
    161c:	93 83       	std	Z+3, r25	; 0x03
    161e:	82 83       	std	Z+2, r24	; 0x02
    1620:	80 91 8b 0d 	lds	r24, 0x0D8B
    1624:	90 91 8c 0d 	lds	r25, 0x0D8C
    1628:	c8 17       	cp	r28, r24
    162a:	d9 07       	cpc	r29, r25
    162c:	60 f4       	brcc	.+24     	; 0x1646 <prvAddCurrentTaskToDelayedList+0x38>
    162e:	60 91 db 0d 	lds	r22, 0x0DDB
    1632:	70 91 dc 0d 	lds	r23, 0x0DDC
    1636:	80 91 a1 0d 	lds	r24, 0x0DA1
    163a:	90 91 a2 0d 	lds	r25, 0x0DA2
    163e:	6e 5f       	subi	r22, 0xFE	; 254
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	a3 db       	rcall	.-2234   	; 0xd8a <vListInsert>
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <prvAddCurrentTaskToDelayedList+0x64>
    1646:	60 91 db 0d 	lds	r22, 0x0DDB
    164a:	70 91 dc 0d 	lds	r23, 0x0DDC
    164e:	80 91 a3 0d 	lds	r24, 0x0DA3
    1652:	90 91 a4 0d 	lds	r25, 0x0DA4
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	97 db       	rcall	.-2258   	; 0xd8a <vListInsert>
    165c:	80 91 49 02 	lds	r24, 0x0249
    1660:	90 91 4a 02 	lds	r25, 0x024A
    1664:	c8 17       	cp	r28, r24
    1666:	d9 07       	cpc	r29, r25
    1668:	20 f4       	brcc	.+8      	; 0x1672 <prvAddCurrentTaskToDelayedList+0x64>
    166a:	d0 93 4a 02 	sts	0x024A, r29
    166e:	c0 93 49 02 	sts	0x0249, r28
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <xTaskGenericCreate>:
    1678:	4f 92       	push	r4
    167a:	5f 92       	push	r5
    167c:	6f 92       	push	r6
    167e:	7f 92       	push	r7
    1680:	8f 92       	push	r8
    1682:	9f 92       	push	r9
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	4c 01       	movw	r8, r24
    169a:	5b 01       	movw	r10, r22
    169c:	2a 01       	movw	r4, r20
    169e:	39 01       	movw	r6, r18
    16a0:	c1 14       	cp	r12, r1
    16a2:	d1 04       	cpc	r13, r1
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <xTaskGenericCreate+0x3a>
    16a6:	ca 01       	movw	r24, r20
    16a8:	56 dd       	rcall	.-1364   	; 0x1156 <pvPortMalloc>
    16aa:	6c 01       	movw	r12, r24
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <xTaskGenericCreate+0x3a>
    16b0:	ca c0       	rjmp	.+404    	; 0x1846 <xTaskGenericCreate+0x1ce>
    16b2:	86 e2       	ldi	r24, 0x26	; 38
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	4f dd       	rcall	.-1378   	; 0x1156 <pvPortMalloc>
    16b8:	ec 01       	movw	r28, r24
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	71 f0       	breq	.+28     	; 0x16da <xTaskGenericCreate+0x62>
    16be:	d8 8e       	std	Y+24, r13	; 0x18
    16c0:	cf 8a       	std	Y+23, r12	; 0x17
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	48 1a       	sub	r4, r24
    16c6:	51 08       	sbc	r5, r1
    16c8:	c4 0c       	add	r12, r4
    16ca:	d5 1c       	adc	r13, r5
    16cc:	d5 01       	movw	r26, r10
    16ce:	8c 91       	ld	r24, X
    16d0:	89 8f       	std	Y+25, r24	; 0x19
    16d2:	8c 91       	ld	r24, X
    16d4:	81 11       	cpse	r24, r1
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <xTaskGenericCreate+0x68>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <xTaskGenericCreate+0x8a>
    16da:	c6 01       	movw	r24, r12
    16dc:	6f dd       	rcall	.-1314   	; 0x11bc <vPortFree>
    16de:	b3 c0       	rjmp	.+358    	; 0x1846 <xTaskGenericCreate+0x1ce>
    16e0:	ae 01       	movw	r20, r28
    16e2:	46 5e       	subi	r20, 0xE6	; 230
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	f5 01       	movw	r30, r10
    16e8:	31 96       	adiw	r30, 0x01	; 1
    16ea:	27 e0       	ldi	r18, 0x07	; 7
    16ec:	cf 01       	movw	r24, r30
    16ee:	31 91       	ld	r19, Z+
    16f0:	da 01       	movw	r26, r20
    16f2:	3d 93       	st	X+, r19
    16f4:	ad 01       	movw	r20, r26
    16f6:	dc 01       	movw	r26, r24
    16f8:	8c 91       	ld	r24, X
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <xTaskGenericCreate+0x8a>
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	a9 f7       	brne	.-22     	; 0x16ec <xTaskGenericCreate+0x74>
    1702:	18 a2       	std	Y+32, r1	; 0x20
    1704:	10 2f       	mov	r17, r16
    1706:	04 30       	cpi	r16, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <xTaskGenericCreate+0x94>
    170a:	13 e0       	ldi	r17, 0x03	; 3
    170c:	1e 8b       	std	Y+22, r17	; 0x16
    170e:	5e 01       	movw	r10, r28
    1710:	b2 e0       	ldi	r27, 0x02	; 2
    1712:	ab 0e       	add	r10, r27
    1714:	b1 1c       	adc	r11, r1
    1716:	c5 01       	movw	r24, r10
    1718:	13 db       	rcall	.-2522   	; 0xd40 <vListInitialiseItem>
    171a:	ce 01       	movw	r24, r28
    171c:	0c 96       	adiw	r24, 0x0c	; 12
    171e:	10 db       	rcall	.-2528   	; 0xd40 <vListInitialiseItem>
    1720:	d9 87       	std	Y+9, r29	; 0x09
    1722:	c8 87       	std	Y+8, r28	; 0x08
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	81 1b       	sub	r24, r17
    172a:	91 09       	sbc	r25, r1
    172c:	9d 87       	std	Y+13, r25	; 0x0d
    172e:	8c 87       	std	Y+12, r24	; 0x0c
    1730:	db 8b       	std	Y+19, r29	; 0x13
    1732:	ca 8b       	std	Y+18, r28	; 0x12
    1734:	19 a2       	std	Y+33, r1	; 0x21
    1736:	1a a2       	std	Y+34, r1	; 0x22
    1738:	1b a2       	std	Y+35, r1	; 0x23
    173a:	1c a2       	std	Y+36, r1	; 0x24
    173c:	1d a2       	std	Y+37, r1	; 0x25
    173e:	a3 01       	movw	r20, r6
    1740:	b4 01       	movw	r22, r8
    1742:	c6 01       	movw	r24, r12
    1744:	79 db       	rcall	.-2318   	; 0xe38 <pxPortInitialiseStack>
    1746:	99 83       	std	Y+1, r25	; 0x01
    1748:	88 83       	st	Y, r24
    174a:	e1 14       	cp	r14, r1
    174c:	f1 04       	cpc	r15, r1
    174e:	19 f0       	breq	.+6      	; 0x1756 <xTaskGenericCreate+0xde>
    1750:	f7 01       	movw	r30, r14
    1752:	d1 83       	std	Z+1, r29	; 0x01
    1754:	c0 83       	st	Z, r28
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	0f 92       	push	r0
    175c:	80 91 8d 0d 	lds	r24, 0x0D8D
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 8d 0d 	sts	0x0D8D, r24
    1766:	80 91 db 0d 	lds	r24, 0x0DDB
    176a:	90 91 dc 0d 	lds	r25, 0x0DDC
    176e:	89 2b       	or	r24, r25
    1770:	69 f5       	brne	.+90     	; 0x17cc <xTaskGenericCreate+0x154>
    1772:	d0 93 dc 0d 	sts	0x0DDC, r29
    1776:	c0 93 db 0d 	sts	0x0DDB, r28
    177a:	80 91 8d 0d 	lds	r24, 0x0D8D
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f5       	brne	.+104    	; 0x17ea <xTaskGenericCreate+0x172>
    1782:	87 eb       	ldi	r24, 0xB7	; 183
    1784:	9d e0       	ldi	r25, 0x0D	; 13
    1786:	ce da       	rcall	.-2660   	; 0xd24 <vListInitialise>
    1788:	80 ec       	ldi	r24, 0xC0	; 192
    178a:	9d e0       	ldi	r25, 0x0D	; 13
    178c:	cb da       	rcall	.-2666   	; 0xd24 <vListInitialise>
    178e:	89 ec       	ldi	r24, 0xC9	; 201
    1790:	9d e0       	ldi	r25, 0x0D	; 13
    1792:	c8 da       	rcall	.-2672   	; 0xd24 <vListInitialise>
    1794:	82 ed       	ldi	r24, 0xD2	; 210
    1796:	9d e0       	ldi	r25, 0x0D	; 13
    1798:	c5 da       	rcall	.-2678   	; 0xd24 <vListInitialise>
    179a:	8e ea       	ldi	r24, 0xAE	; 174
    179c:	9d e0       	ldi	r25, 0x0D	; 13
    179e:	c2 da       	rcall	.-2684   	; 0xd24 <vListInitialise>
    17a0:	85 ea       	ldi	r24, 0xA5	; 165
    17a2:	9d e0       	ldi	r25, 0x0D	; 13
    17a4:	bf da       	rcall	.-2690   	; 0xd24 <vListInitialise>
    17a6:	88 e9       	ldi	r24, 0x98	; 152
    17a8:	9d e0       	ldi	r25, 0x0D	; 13
    17aa:	bc da       	rcall	.-2696   	; 0xd24 <vListInitialise>
    17ac:	8f e8       	ldi	r24, 0x8F	; 143
    17ae:	9d e0       	ldi	r25, 0x0D	; 13
    17b0:	b9 da       	rcall	.-2702   	; 0xd24 <vListInitialise>
    17b2:	8e ea       	ldi	r24, 0xAE	; 174
    17b4:	9d e0       	ldi	r25, 0x0D	; 13
    17b6:	90 93 a4 0d 	sts	0x0DA4, r25
    17ba:	80 93 a3 0d 	sts	0x0DA3, r24
    17be:	85 ea       	ldi	r24, 0xA5	; 165
    17c0:	9d e0       	ldi	r25, 0x0D	; 13
    17c2:	90 93 a2 0d 	sts	0x0DA2, r25
    17c6:	80 93 a1 0d 	sts	0x0DA1, r24
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <xTaskGenericCreate+0x172>
    17cc:	80 91 89 0d 	lds	r24, 0x0D89
    17d0:	81 11       	cpse	r24, r1
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <xTaskGenericCreate+0x172>
    17d4:	e0 91 db 0d 	lds	r30, 0x0DDB
    17d8:	f0 91 dc 0d 	lds	r31, 0x0DDC
    17dc:	86 89       	ldd	r24, Z+22	; 0x16
    17de:	08 17       	cp	r16, r24
    17e0:	20 f0       	brcs	.+8      	; 0x17ea <xTaskGenericCreate+0x172>
    17e2:	d0 93 dc 0d 	sts	0x0DDC, r29
    17e6:	c0 93 db 0d 	sts	0x0DDB, r28
    17ea:	80 91 85 0d 	lds	r24, 0x0D85
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 85 0d 	sts	0x0D85, r24
    17f4:	8e 89       	ldd	r24, Y+22	; 0x16
    17f6:	90 91 8a 0d 	lds	r25, 0x0D8A
    17fa:	98 17       	cp	r25, r24
    17fc:	10 f4       	brcc	.+4      	; 0x1802 <xTaskGenericCreate+0x18a>
    17fe:	80 93 8a 0d 	sts	0x0D8A, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 01       	movw	r18, r24
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	b5 01       	movw	r22, r10
    1818:	89 54       	subi	r24, 0x49	; 73
    181a:	92 4f       	sbci	r25, 0xF2	; 242
    181c:	95 da       	rcall	.-2774   	; 0xd48 <vListInsertEnd>
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	80 91 89 0d 	lds	r24, 0x0D89
    1826:	88 23       	and	r24, r24
    1828:	51 f0       	breq	.+20     	; 0x183e <xTaskGenericCreate+0x1c6>
    182a:	e0 91 db 0d 	lds	r30, 0x0DDB
    182e:	f0 91 dc 0d 	lds	r31, 0x0DDC
    1832:	86 89       	ldd	r24, Z+22	; 0x16
    1834:	80 17       	cp	r24, r16
    1836:	28 f4       	brcc	.+10     	; 0x1842 <xTaskGenericCreate+0x1ca>
    1838:	b7 db       	rcall	.-2194   	; 0xfa8 <vPortYield>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <xTaskGenericCreate+0x1d0>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <xTaskGenericCreate+0x1d0>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <xTaskGenericCreate+0x1d0>
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	4f 90       	pop	r4
    1868:	08 95       	ret

0000186a <vTaskStartScheduler>:
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	a1 2c       	mov	r10, r1
    187a:	b1 2c       	mov	r11, r1
    187c:	c1 2c       	mov	r12, r1
    187e:	d1 2c       	mov	r13, r1
    1880:	e1 2c       	mov	r14, r1
    1882:	f1 2c       	mov	r15, r1
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	49 eb       	ldi	r20, 0xB9	; 185
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	66 e8       	ldi	r22, 0x86	; 134
    1890:	72 e0       	ldi	r23, 0x02	; 2
    1892:	8c e8       	ldi	r24, 0x8C	; 140
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	f0 de       	rcall	.-544    	; 0x1678 <xTaskGenericCreate>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	41 f4       	brne	.+16     	; 0x18ac <vTaskStartScheduler+0x42>
    189c:	f8 94       	cli
    189e:	80 93 89 0d 	sts	0x0D89, r24
    18a2:	10 92 8c 0d 	sts	0x0D8C, r1
    18a6:	10 92 8b 0d 	sts	0x0D8B, r1
    18aa:	38 db       	rcall	.-2448   	; 0xf1c <xPortStartScheduler>
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	08 95       	ret

000018bc <vTaskSuspendAll>:
    18bc:	80 91 84 0d 	lds	r24, 0x0D84
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 84 0d 	sts	0x0D84, r24
    18c6:	08 95       	ret

000018c8 <xTaskIncrementTick>:
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	80 91 84 0d 	lds	r24, 0x0D84
    18dc:	81 11       	cpse	r24, r1
    18de:	96 c0       	rjmp	.+300    	; 0x1a0c <xTaskIncrementTick+0x144>
    18e0:	80 91 8b 0d 	lds	r24, 0x0D8B
    18e4:	90 91 8c 0d 	lds	r25, 0x0D8C
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	90 93 8c 0d 	sts	0x0D8C, r25
    18ee:	80 93 8b 0d 	sts	0x0D8B, r24
    18f2:	e0 90 8b 0d 	lds	r14, 0x0D8B
    18f6:	f0 90 8c 0d 	lds	r15, 0x0D8C
    18fa:	e1 14       	cp	r14, r1
    18fc:	f1 04       	cpc	r15, r1
    18fe:	b1 f4       	brne	.+44     	; 0x192c <xTaskIncrementTick+0x64>
    1900:	80 91 a3 0d 	lds	r24, 0x0DA3
    1904:	90 91 a4 0d 	lds	r25, 0x0DA4
    1908:	20 91 a1 0d 	lds	r18, 0x0DA1
    190c:	30 91 a2 0d 	lds	r19, 0x0DA2
    1910:	30 93 a4 0d 	sts	0x0DA4, r19
    1914:	20 93 a3 0d 	sts	0x0DA3, r18
    1918:	90 93 a2 0d 	sts	0x0DA2, r25
    191c:	80 93 a1 0d 	sts	0x0DA1, r24
    1920:	80 91 86 0d 	lds	r24, 0x0D86
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	80 93 86 0d 	sts	0x0D86, r24
    192a:	52 de       	rcall	.-860    	; 0x15d0 <prvResetNextTaskUnblockTime>
    192c:	80 91 49 02 	lds	r24, 0x0249
    1930:	90 91 4a 02 	lds	r25, 0x024A
    1934:	e8 16       	cp	r14, r24
    1936:	f9 06       	cpc	r15, r25
    1938:	08 f4       	brcc	.+2      	; 0x193c <xTaskIncrementTick+0x74>
    193a:	51 c0       	rjmp	.+162    	; 0x19de <xTaskIncrementTick+0x116>
    193c:	d1 2c       	mov	r13, r1
    193e:	cc 24       	eor	r12, r12
    1940:	c3 94       	inc	r12
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <xTaskIncrementTick+0x7e>
    1944:	dc 2c       	mov	r13, r12
    1946:	e0 91 a3 0d 	lds	r30, 0x0DA3
    194a:	f0 91 a4 0d 	lds	r31, 0x0DA4
    194e:	80 81       	ld	r24, Z
    1950:	81 11       	cpse	r24, r1
    1952:	07 c0       	rjmp	.+14     	; 0x1962 <xTaskIncrementTick+0x9a>
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	9f ef       	ldi	r25, 0xFF	; 255
    1958:	90 93 4a 02 	sts	0x024A, r25
    195c:	80 93 49 02 	sts	0x0249, r24
    1960:	3f c0       	rjmp	.+126    	; 0x19e0 <xTaskIncrementTick+0x118>
    1962:	e0 91 a3 0d 	lds	r30, 0x0DA3
    1966:	f0 91 a4 0d 	lds	r31, 0x0DA4
    196a:	05 80       	ldd	r0, Z+5	; 0x05
    196c:	f6 81       	ldd	r31, Z+6	; 0x06
    196e:	e0 2d       	mov	r30, r0
    1970:	c6 81       	ldd	r28, Z+6	; 0x06
    1972:	d7 81       	ldd	r29, Z+7	; 0x07
    1974:	2a 81       	ldd	r18, Y+2	; 0x02
    1976:	3b 81       	ldd	r19, Y+3	; 0x03
    1978:	e2 16       	cp	r14, r18
    197a:	f3 06       	cpc	r15, r19
    197c:	28 f4       	brcc	.+10     	; 0x1988 <xTaskIncrementTick+0xc0>
    197e:	30 93 4a 02 	sts	0x024A, r19
    1982:	20 93 49 02 	sts	0x0249, r18
    1986:	2c c0       	rjmp	.+88     	; 0x19e0 <xTaskIncrementTick+0x118>
    1988:	8e 01       	movw	r16, r28
    198a:	0e 5f       	subi	r16, 0xFE	; 254
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	c8 01       	movw	r24, r16
    1990:	2d da       	rcall	.-2982   	; 0xdec <uxListRemove>
    1992:	8c 89       	ldd	r24, Y+20	; 0x14
    1994:	9d 89       	ldd	r25, Y+21	; 0x15
    1996:	89 2b       	or	r24, r25
    1998:	19 f0       	breq	.+6      	; 0x19a0 <xTaskIncrementTick+0xd8>
    199a:	ce 01       	movw	r24, r28
    199c:	0c 96       	adiw	r24, 0x0c	; 12
    199e:	26 da       	rcall	.-2996   	; 0xdec <uxListRemove>
    19a0:	2e 89       	ldd	r18, Y+22	; 0x16
    19a2:	80 91 8a 0d 	lds	r24, 0x0D8A
    19a6:	82 17       	cp	r24, r18
    19a8:	10 f4       	brcc	.+4      	; 0x19ae <xTaskIncrementTick+0xe6>
    19aa:	20 93 8a 0d 	sts	0x0D8A, r18
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	c9 01       	movw	r24, r18
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	82 0f       	add	r24, r18
    19c0:	93 1f       	adc	r25, r19
    19c2:	b8 01       	movw	r22, r16
    19c4:	89 54       	subi	r24, 0x49	; 73
    19c6:	92 4f       	sbci	r25, 0xF2	; 242
    19c8:	bf d9       	rcall	.-3202   	; 0xd48 <vListInsertEnd>
    19ca:	e0 91 db 0d 	lds	r30, 0x0DDB
    19ce:	f0 91 dc 0d 	lds	r31, 0x0DDC
    19d2:	9e 89       	ldd	r25, Y+22	; 0x16
    19d4:	86 89       	ldd	r24, Z+22	; 0x16
    19d6:	98 17       	cp	r25, r24
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <xTaskIncrementTick+0x114>
    19da:	b4 cf       	rjmp	.-152    	; 0x1944 <xTaskIncrementTick+0x7c>
    19dc:	b4 cf       	rjmp	.-152    	; 0x1946 <xTaskIncrementTick+0x7e>
    19de:	d1 2c       	mov	r13, r1
    19e0:	e0 91 db 0d 	lds	r30, 0x0DDB
    19e4:	f0 91 dc 0d 	lds	r31, 0x0DDC
    19e8:	86 89       	ldd	r24, Z+22	; 0x16
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	fc 01       	movw	r30, r24
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	ee 0f       	add	r30, r30
    19f8:	ff 1f       	adc	r31, r31
    19fa:	8e 0f       	add	r24, r30
    19fc:	9f 1f       	adc	r25, r31
    19fe:	fc 01       	movw	r30, r24
    1a00:	e9 54       	subi	r30, 0x49	; 73
    1a02:	f2 4f       	sbci	r31, 0xF2	; 242
    1a04:	80 81       	ld	r24, Z
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <xTaskIncrementTick+0x152>
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <xTaskIncrementTick+0x156>
    1a0c:	80 91 88 0d 	lds	r24, 0x0D88
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 88 0d 	sts	0x0D88, r24
    1a16:	d1 2c       	mov	r13, r1
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <xTaskIncrementTick+0x156>
    1a1a:	dd 24       	eor	r13, r13
    1a1c:	d3 94       	inc	r13
    1a1e:	80 91 87 0d 	lds	r24, 0x0D87
    1a22:	88 23       	and	r24, r24
    1a24:	11 f0       	breq	.+4      	; 0x1a2a <xTaskIncrementTick+0x162>
    1a26:	dd 24       	eor	r13, r13
    1a28:	d3 94       	inc	r13
    1a2a:	8d 2d       	mov	r24, r13
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	ff 90       	pop	r15
    1a36:	ef 90       	pop	r14
    1a38:	df 90       	pop	r13
    1a3a:	cf 90       	pop	r12
    1a3c:	08 95       	ret

00001a3e <xTaskResumeAll>:
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	0f 92       	push	r0
    1a52:	80 91 84 0d 	lds	r24, 0x0D84
    1a56:	81 50       	subi	r24, 0x01	; 1
    1a58:	80 93 84 0d 	sts	0x0D84, r24
    1a5c:	80 91 84 0d 	lds	r24, 0x0D84
    1a60:	81 11       	cpse	r24, r1
    1a62:	5c c0       	rjmp	.+184    	; 0x1b1c <xTaskResumeAll+0xde>
    1a64:	80 91 8d 0d 	lds	r24, 0x0D8D
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <xTaskResumeAll+0x30>
    1a6c:	59 c0       	rjmp	.+178    	; 0x1b20 <xTaskResumeAll+0xe2>
    1a6e:	0f 2e       	mov	r0, r31
    1a70:	f8 e9       	ldi	r31, 0x98	; 152
    1a72:	ef 2e       	mov	r14, r31
    1a74:	fd e0       	ldi	r31, 0x0D	; 13
    1a76:	ff 2e       	mov	r15, r31
    1a78:	f0 2d       	mov	r31, r0
    1a7a:	dd 24       	eor	r13, r13
    1a7c:	d3 94       	inc	r13
    1a7e:	2d c0       	rjmp	.+90     	; 0x1ada <xTaskResumeAll+0x9c>
    1a80:	e0 91 9d 0d 	lds	r30, 0x0D9D
    1a84:	f0 91 9e 0d 	lds	r31, 0x0D9E
    1a88:	c6 81       	ldd	r28, Z+6	; 0x06
    1a8a:	d7 81       	ldd	r29, Z+7	; 0x07
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	0c 96       	adiw	r24, 0x0c	; 12
    1a90:	ad d9       	rcall	.-3238   	; 0xdec <uxListRemove>
    1a92:	8e 01       	movw	r16, r28
    1a94:	0e 5f       	subi	r16, 0xFE	; 254
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	c8 01       	movw	r24, r16
    1a9a:	a8 d9       	rcall	.-3248   	; 0xdec <uxListRemove>
    1a9c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a9e:	90 91 8a 0d 	lds	r25, 0x0D8A
    1aa2:	98 17       	cp	r25, r24
    1aa4:	10 f4       	brcc	.+4      	; 0x1aaa <xTaskResumeAll+0x6c>
    1aa6:	80 93 8a 0d 	sts	0x0D8A, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 01       	movw	r18, r24
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	22 0f       	add	r18, r18
    1ab4:	33 1f       	adc	r19, r19
    1ab6:	22 0f       	add	r18, r18
    1ab8:	33 1f       	adc	r19, r19
    1aba:	82 0f       	add	r24, r18
    1abc:	93 1f       	adc	r25, r19
    1abe:	b8 01       	movw	r22, r16
    1ac0:	89 54       	subi	r24, 0x49	; 73
    1ac2:	92 4f       	sbci	r25, 0xF2	; 242
    1ac4:	41 d9       	rcall	.-3454   	; 0xd48 <vListInsertEnd>
    1ac6:	e0 91 db 0d 	lds	r30, 0x0DDB
    1aca:	f0 91 dc 0d 	lds	r31, 0x0DDC
    1ace:	9e 89       	ldd	r25, Y+22	; 0x16
    1ad0:	86 89       	ldd	r24, Z+22	; 0x16
    1ad2:	98 17       	cp	r25, r24
    1ad4:	10 f0       	brcs	.+4      	; 0x1ada <xTaskResumeAll+0x9c>
    1ad6:	d0 92 87 0d 	sts	0x0D87, r13
    1ada:	f7 01       	movw	r30, r14
    1adc:	80 81       	ld	r24, Z
    1ade:	81 11       	cpse	r24, r1
    1ae0:	cf cf       	rjmp	.-98     	; 0x1a80 <xTaskResumeAll+0x42>
    1ae2:	80 91 88 0d 	lds	r24, 0x0D88
    1ae6:	88 23       	and	r24, r24
    1ae8:	91 f0       	breq	.+36     	; 0x1b0e <xTaskResumeAll+0xd0>
    1aea:	80 91 88 0d 	lds	r24, 0x0D88
    1aee:	88 23       	and	r24, r24
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <xTaskResumeAll+0xd0>
    1af2:	c1 e0       	ldi	r28, 0x01	; 1
    1af4:	e9 de       	rcall	.-558    	; 0x18c8 <xTaskIncrementTick>
    1af6:	81 11       	cpse	r24, r1
    1af8:	c0 93 87 0d 	sts	0x0D87, r28
    1afc:	80 91 88 0d 	lds	r24, 0x0D88
    1b00:	81 50       	subi	r24, 0x01	; 1
    1b02:	80 93 88 0d 	sts	0x0D88, r24
    1b06:	80 91 88 0d 	lds	r24, 0x0D88
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	f3 cf       	rjmp	.-26     	; 0x1af4 <xTaskResumeAll+0xb6>
    1b0e:	80 91 87 0d 	lds	r24, 0x0D87
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	39 f4       	brne	.+14     	; 0x1b24 <xTaskResumeAll+0xe6>
    1b16:	48 da       	rcall	.-2928   	; 0xfa8 <vPortYield>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <xTaskResumeAll+0xe8>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <xTaskResumeAll+0xe8>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <xTaskResumeAll+0xe8>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	08 95       	ret

00001b3a <vTaskDelay>:
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	91 f0       	breq	.+36     	; 0x1b68 <vTaskDelay+0x2e>
    1b44:	bb de       	rcall	.-650    	; 0x18bc <vTaskSuspendAll>
    1b46:	80 91 8b 0d 	lds	r24, 0x0D8B
    1b4a:	90 91 8c 0d 	lds	r25, 0x0D8C
    1b4e:	c8 0f       	add	r28, r24
    1b50:	d9 1f       	adc	r29, r25
    1b52:	80 91 db 0d 	lds	r24, 0x0DDB
    1b56:	90 91 dc 0d 	lds	r25, 0x0DDC
    1b5a:	02 96       	adiw	r24, 0x02	; 2
    1b5c:	47 d9       	rcall	.-3442   	; 0xdec <uxListRemove>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	56 dd       	rcall	.-1364   	; 0x160e <prvAddCurrentTaskToDelayedList>
    1b62:	6d df       	rcall	.-294    	; 0x1a3e <xTaskResumeAll>
    1b64:	81 11       	cpse	r24, r1
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <vTaskDelay+0x30>
    1b68:	1f da       	rcall	.-3010   	; 0xfa8 <vPortYield>
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <vTaskSwitchContext>:
    1b70:	80 91 84 0d 	lds	r24, 0x0D84
    1b74:	88 23       	and	r24, r24
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <vTaskSwitchContext+0x10>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 87 0d 	sts	0x0D87, r24
    1b7e:	08 95       	ret
    1b80:	10 92 87 0d 	sts	0x0D87, r1
    1b84:	a0 91 db 0d 	lds	r26, 0x0DDB
    1b88:	b0 91 dc 0d 	lds	r27, 0x0DDC
    1b8c:	e0 91 db 0d 	lds	r30, 0x0DDB
    1b90:	f0 91 dc 0d 	lds	r31, 0x0DDC
    1b94:	2d 91       	ld	r18, X+
    1b96:	3c 91       	ld	r19, X
    1b98:	87 89       	ldd	r24, Z+23	; 0x17
    1b9a:	90 8d       	ldd	r25, Z+24	; 0x18
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	58 f0       	brcs	.+22     	; 0x1bb8 <vTaskSwitchContext+0x48>
    1ba2:	60 91 db 0d 	lds	r22, 0x0DDB
    1ba6:	70 91 dc 0d 	lds	r23, 0x0DDC
    1baa:	80 91 db 0d 	lds	r24, 0x0DDB
    1bae:	90 91 dc 0d 	lds	r25, 0x0DDC
    1bb2:	67 5e       	subi	r22, 0xE7	; 231
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	9f d2       	rcall	.+1342   	; 0x20f6 <vApplicationStackOverflowHook>
    1bb8:	80 91 8a 0d 	lds	r24, 0x0D8A
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	8e 0f       	add	r24, r30
    1bce:	9f 1f       	adc	r25, r31
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e9 54       	subi	r30, 0x49	; 73
    1bd4:	f2 4f       	sbci	r31, 0xF2	; 242
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 11       	cpse	r24, r1
    1bda:	17 c0       	rjmp	.+46     	; 0x1c0a <vTaskSwitchContext+0x9a>
    1bdc:	80 91 8a 0d 	lds	r24, 0x0D8A
    1be0:	81 50       	subi	r24, 0x01	; 1
    1be2:	80 93 8a 0d 	sts	0x0D8A, r24
    1be6:	80 91 8a 0d 	lds	r24, 0x0D8A
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	fc 01       	movw	r30, r24
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	8e 0f       	add	r24, r30
    1bfc:	9f 1f       	adc	r25, r31
    1bfe:	fc 01       	movw	r30, r24
    1c00:	e9 54       	subi	r30, 0x49	; 73
    1c02:	f2 4f       	sbci	r31, 0xF2	; 242
    1c04:	80 81       	ld	r24, Z
    1c06:	88 23       	and	r24, r24
    1c08:	49 f3       	breq	.-46     	; 0x1bdc <vTaskSwitchContext+0x6c>
    1c0a:	e0 91 8a 0d 	lds	r30, 0x0D8A
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	cf 01       	movw	r24, r30
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	e9 54       	subi	r30, 0x49	; 73
    1c24:	f2 4f       	sbci	r31, 0xF2	; 242
    1c26:	a1 81       	ldd	r26, Z+1	; 0x01
    1c28:	b2 81       	ldd	r27, Z+2	; 0x02
    1c2a:	12 96       	adiw	r26, 0x02	; 2
    1c2c:	0d 90       	ld	r0, X+
    1c2e:	bc 91       	ld	r27, X
    1c30:	a0 2d       	mov	r26, r0
    1c32:	b2 83       	std	Z+2, r27	; 0x02
    1c34:	a1 83       	std	Z+1, r26	; 0x01
    1c36:	cf 01       	movw	r24, r30
    1c38:	03 96       	adiw	r24, 0x03	; 3
    1c3a:	a8 17       	cp	r26, r24
    1c3c:	b9 07       	cpc	r27, r25
    1c3e:	31 f4       	brne	.+12     	; 0x1c4c <vTaskSwitchContext+0xdc>
    1c40:	12 96       	adiw	r26, 0x02	; 2
    1c42:	8d 91       	ld	r24, X+
    1c44:	9c 91       	ld	r25, X
    1c46:	13 97       	sbiw	r26, 0x03	; 3
    1c48:	92 83       	std	Z+2, r25	; 0x02
    1c4a:	81 83       	std	Z+1, r24	; 0x01
    1c4c:	01 80       	ldd	r0, Z+1	; 0x01
    1c4e:	f2 81       	ldd	r31, Z+2	; 0x02
    1c50:	e0 2d       	mov	r30, r0
    1c52:	86 81       	ldd	r24, Z+6	; 0x06
    1c54:	97 81       	ldd	r25, Z+7	; 0x07
    1c56:	90 93 dc 0d 	sts	0x0DDC, r25
    1c5a:	80 93 db 0d 	sts	0x0DDB, r24
    1c5e:	08 95       	ret

00001c60 <vTaskPlaceOnEventList>:
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	eb 01       	movw	r28, r22
    1c66:	60 91 db 0d 	lds	r22, 0x0DDB
    1c6a:	70 91 dc 0d 	lds	r23, 0x0DDC
    1c6e:	64 5f       	subi	r22, 0xF4	; 244
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8b d8       	rcall	.-3818   	; 0xd8a <vListInsert>
    1c74:	80 91 db 0d 	lds	r24, 0x0DDB
    1c78:	90 91 dc 0d 	lds	r25, 0x0DDC
    1c7c:	02 96       	adiw	r24, 0x02	; 2
    1c7e:	b6 d8       	rcall	.-3732   	; 0xdec <uxListRemove>
    1c80:	80 91 8b 0d 	lds	r24, 0x0D8B
    1c84:	90 91 8c 0d 	lds	r25, 0x0D8C
    1c88:	8c 0f       	add	r24, r28
    1c8a:	9d 1f       	adc	r25, r29
    1c8c:	c0 dc       	rcall	.-1664   	; 0x160e <prvAddCurrentTaskToDelayedList>
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <xTaskRemoveFromEventList>:
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	15 96       	adiw	r26, 0x05	; 5
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	16 97       	sbiw	r26, 0x06	; 6
    1ca6:	c6 81       	ldd	r28, Z+6	; 0x06
    1ca8:	d7 81       	ldd	r29, Z+7	; 0x07
    1caa:	8e 01       	movw	r16, r28
    1cac:	04 5f       	subi	r16, 0xF4	; 244
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	9c d8       	rcall	.-3784   	; 0xdec <uxListRemove>
    1cb4:	80 91 84 0d 	lds	r24, 0x0D84
    1cb8:	81 11       	cpse	r24, r1
    1cba:	1a c0       	rjmp	.+52     	; 0x1cf0 <xTaskRemoveFromEventList+0x5c>
    1cbc:	0a 50       	subi	r16, 0x0A	; 10
    1cbe:	11 09       	sbc	r17, r1
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	94 d8       	rcall	.-3800   	; 0xdec <uxListRemove>
    1cc4:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc6:	90 91 8a 0d 	lds	r25, 0x0D8A
    1cca:	98 17       	cp	r25, r24
    1ccc:	10 f4       	brcc	.+4      	; 0x1cd2 <xTaskRemoveFromEventList+0x3e>
    1cce:	80 93 8a 0d 	sts	0x0D8A, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	b8 01       	movw	r22, r16
    1ce8:	89 54       	subi	r24, 0x49	; 73
    1cea:	92 4f       	sbci	r25, 0xF2	; 242
    1cec:	2d d8       	rcall	.-4006   	; 0xd48 <vListInsertEnd>
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <xTaskRemoveFromEventList+0x64>
    1cf0:	b8 01       	movw	r22, r16
    1cf2:	88 e9       	ldi	r24, 0x98	; 152
    1cf4:	9d e0       	ldi	r25, 0x0D	; 13
    1cf6:	28 d8       	rcall	.-4016   	; 0xd48 <vListInsertEnd>
    1cf8:	e0 91 db 0d 	lds	r30, 0x0DDB
    1cfc:	f0 91 dc 0d 	lds	r31, 0x0DDC
    1d00:	9e 89       	ldd	r25, Y+22	; 0x16
    1d02:	86 89       	ldd	r24, Z+22	; 0x16
    1d04:	89 17       	cp	r24, r25
    1d06:	20 f4       	brcc	.+8      	; 0x1d10 <xTaskRemoveFromEventList+0x7c>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 87 0d 	sts	0x0D87, r24
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <xTaskRemoveFromEventList+0x7e>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1d1c:	20 91 86 0d 	lds	r18, 0x0D86
    1d20:	fc 01       	movw	r30, r24
    1d22:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1d24:	20 91 8b 0d 	lds	r18, 0x0D8B
    1d28:	30 91 8c 0d 	lds	r19, 0x0D8C
    1d2c:	32 83       	std	Z+2, r19	; 0x02
    1d2e:	21 83       	std	Z+1, r18	; 0x01
    1d30:	08 95       	ret

00001d32 <xTaskCheckForTimeOut>:
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1d38:	20 91 8b 0d 	lds	r18, 0x0D8B
    1d3c:	30 91 8c 0d 	lds	r19, 0x0D8C
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1d40:	40 91 86 0d 	lds	r20, 0x0D86
    1d44:	dc 01       	movw	r26, r24
    1d46:	5c 91       	ld	r21, X
    1d48:	54 17       	cp	r21, r20
    1d4a:	39 f0       	breq	.+14     	; 0x1d5a <xTaskCheckForTimeOut+0x28>
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	4d 91       	ld	r20, X+
    1d50:	5c 91       	ld	r21, X
    1d52:	12 97       	sbiw	r26, 0x02	; 2
    1d54:	24 17       	cp	r18, r20
    1d56:	35 07       	cpc	r19, r21
    1d58:	c0 f4       	brcc	.+48     	; 0x1d8a <xTaskCheckForTimeOut+0x58>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	ed 91       	ld	r30, X+
    1d60:	fc 91       	ld	r31, X
    1d62:	12 97       	sbiw	r26, 0x02	; 2
    1d64:	db 01       	movw	r26, r22
    1d66:	4d 91       	ld	r20, X+
    1d68:	5c 91       	ld	r21, X
    1d6a:	d9 01       	movw	r26, r18
    1d6c:	ae 1b       	sub	r26, r30
    1d6e:	bf 0b       	sbc	r27, r31
    1d70:	a4 17       	cp	r26, r20
    1d72:	b5 07       	cpc	r27, r21
    1d74:	60 f4       	brcc	.+24     	; 0x1d8e <xTaskCheckForTimeOut+0x5c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1d76:	e2 1b       	sub	r30, r18
    1d78:	f3 0b       	sbc	r31, r19
    1d7a:	4e 0f       	add	r20, r30
    1d7c:	5f 1f       	adc	r21, r31
    1d7e:	fb 01       	movw	r30, r22
    1d80:	51 83       	std	Z+1, r21	; 0x01
    1d82:	40 83       	st	Z, r20
			vTaskSetTimeOutState( pxTimeOut );
    1d84:	cb df       	rcall	.-106    	; 0x1d1c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <xTaskCheckForTimeOut+0x5e>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1d94:	08 95       	ret

00001d96 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 87 0d 	sts	0x0D87, r24
    1d9c:	08 95       	ret

00001d9e <bt_status_call_back>:


uint8_t bt_initialised = 0;

void bt_status_call_back(uint8_t status) {
	if (status == DIALOG_OK_STOP) {
    1d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <bt_status_call_back+0xa>
		bt_initialised = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	80 93 dd 0d 	sts	0x0DDD, r24
    1da8:	08 95       	ret

00001daa <vjustATask>:

	/* Cycle for ever, one cycle each time the goal line is passed. */
	for( ;; )
	{
		// Wait for goal line is passed
		xSemaphoreTake(goal_line_semaphore, portMAX_DELAY);
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	4f ef       	ldi	r20, 0xFF	; 255
    1dae:	5f ef       	ldi	r21, 0xFF	; 255
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	80 91 e0 0d 	lds	r24, 0x0DE0
    1db8:	90 91 e1 0d 	lds	r25, 0x0DE1
    1dbc:	6d db       	rcall	.-2342   	; 0x1498 <xQueueGenericReceive>
    1dbe:	f5 cf       	rjmp	.-22     	; 0x1daa <vjustATask>

00001dc0 <learn>:
			default:;
		}
	}
}

void learn() {
    1dc0:	8f 92       	push	r8
    1dc2:	9f 92       	push	r9
    1dc4:	af 92       	push	r10
    1dc6:	bf 92       	push	r11
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	64 97       	sbiw	r28, 0x14	; 20
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	0f 2e       	mov	r0, r31
    1dea:	f4 e6       	ldi	r31, 0x64	; 100
    1dec:	ef 2e       	mov	r14, r31
    1dee:	f1 2c       	mov	r15, r1
    1df0:	f0 2d       	mov	r31, r0
			uint16_t raw_x = get_raw_x_accel();
			uint16_t raw_y = get_raw_y_accel();
			uint16_t raw_z = get_raw_z_accel();
			//uint16_t raw_rx = get_raw_x_rotation();
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
    1df2:	0f 2e       	mov	r0, r31
    1df4:	fb e8       	ldi	r31, 0x8B	; 139
    1df6:	cf 2e       	mov	r12, r31
    1df8:	f2 e0       	ldi	r31, 0x02	; 2
    1dfa:	df 2e       	mov	r13, r31
    1dfc:	f0 2d       	mov	r31, r0
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0f 5f       	subi	r16, 0xFF	; 255
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
void learn() {
	int i;
	char buf[20];
	for (i= 0; i<100; i++)
	{
			uint16_t raw_x = get_raw_x_accel();
    1e04:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
    1e08:	b8 2e       	mov	r11, r24
    1e0a:	a9 2e       	mov	r10, r25
			uint16_t raw_y = get_raw_y_accel();
    1e0c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <get_raw_y_accel>
    1e10:	98 2e       	mov	r9, r24
    1e12:	89 2e       	mov	r8, r25
			uint16_t raw_z = get_raw_z_accel();
    1e14:	0e 94 87 03 	call	0x70e	; 0x70e <get_raw_z_accel>
			//uint16_t raw_rx = get_raw_x_rotation();
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
    1e18:	9f 93       	push	r25
    1e1a:	8f 93       	push	r24
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	df 92       	push	r13
    1e26:	cf 92       	push	r12
    1e28:	1f 93       	push	r17
    1e2a:	0f 93       	push	r16
    1e2c:	a8 d6       	rcall	.+3408   	; 0x2b7e <sprintf>
			bt_send_bytes((uint8_t *)buf, strlen(buf));
    1e2e:	f8 01       	movw	r30, r16
    1e30:	01 90       	ld	r0, Z+
    1e32:	00 20       	and	r0, r0
    1e34:	e9 f7       	brne	.-6      	; 0x1e30 <learn+0x70>
    1e36:	31 97       	sbiw	r30, 0x01	; 1
    1e38:	bf 01       	movw	r22, r30
    1e3a:	60 1b       	sub	r22, r16
    1e3c:	71 0b       	sbc	r23, r17
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
			vTaskDelay( 100/ portTICK_PERIOD_MS);
    1e44:	84 e6       	ldi	r24, 0x64	; 100
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	78 de       	rcall	.-784    	; 0x1b3a <vTaskDelay>
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	e8 1a       	sub	r14, r24
    1e4e:	f1 08       	sbc	r15, r1
}

void learn() {
	int i;
	char buf[20];
	for (i= 0; i<100; i++)
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	e1 14       	cp	r14, r1
    1e5c:	f1 04       	cpc	r15, r1
    1e5e:	91 f6       	brne	.-92     	; 0x1e04 <learn+0x44>
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
			bt_send_bytes((uint8_t *)buf, strlen(buf));
			vTaskDelay( 100/ portTICK_PERIOD_MS);
	}
}
    1e60:	64 96       	adiw	r28, 0x14	; 20
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	08 95       	ret

00001e86 <bt_com_call_back>:
		} else if (status == DIALOG_ERROR_STOP) {
		// What to do??
	}
}

void bt_com_call_back(uint8_t byte) {
    1e86:	8f 92       	push	r8
    1e88:	9f 92       	push	r9
    1e8a:	af 92       	push	r10
    1e8c:	bf 92       	push	r11
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	a8 97       	sbiw	r28, 0x28	; 40
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
	char buf[40];
	
	if (bt_initialised) {
    1eae:	90 91 dd 0d 	lds	r25, 0x0DDD
    1eb2:	99 23       	and	r25, r25
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <bt_com_call_back+0x32>
    1eb6:	9c c0       	rjmp	.+312    	; 0x1ff0 <bt_com_call_back+0x16a>
		switch (byte) {
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e1 54       	subi	r30, 0x41	; 65
    1ebe:	f1 09       	sbc	r31, r1
    1ec0:	e6 32       	cpi	r30, 0x26	; 38
    1ec2:	f1 05       	cpc	r31, r1
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <bt_com_call_back+0x42>
    1ec6:	94 c0       	rjmp	.+296    	; 0x1ff0 <bt_com_call_back+0x16a>
    1ec8:	ea 59       	subi	r30, 0x9A	; 154
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	ff c4       	rjmp	.+2558   	; 0x28cc <__tablejump2__>
			case 'a': {
				set_head_light(0);
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	0e 94 76 02 	call	0x4ec	; 0x4ec <set_head_light>
				break;
    1ed4:	8d c0       	rjmp	.+282    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'A': {
				set_head_light(1);
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	0e 94 76 02 	call	0x4ec	; 0x4ec <set_head_light>
				break;
    1edc:	89 c0       	rjmp	.+274    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'b': {
				set_brake_light(0);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				break;
    1ee4:	85 c0       	rjmp	.+266    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'B': {
				set_brake_light(1);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				break;
    1eec:	81 c0       	rjmp	.+258    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'c': {
				set_horn(0);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <set_horn>
				break;
    1ef4:	7d c0       	rjmp	.+250    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'C': {
				set_horn(1);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <set_horn>
				break;
    1efc:	79 c0       	rjmp	.+242    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'd': {
				set_motor_speed(0);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				break;
    1f04:	75 c0       	rjmp	.+234    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'D': {
				set_motor_speed(65);
    1f06:	81 e4       	ldi	r24, 0x41	; 65
    1f08:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				break;
    1f0c:	71 c0       	rjmp	.+226    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			
			case 'e': {
				set_brake(0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				break;
    1f14:	6d c0       	rjmp	.+218    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'E': {
				set_brake(100);
    1f16:	84 e6       	ldi	r24, 0x64	; 100
    1f18:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				break;
    1f1c:	69 c0       	rjmp	.+210    	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'F': {
				uint16_t raw_x = get_raw_x_accel();
    1f1e:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
    1f22:	18 2f       	mov	r17, r24
    1f24:	09 2f       	mov	r16, r25
				uint16_t raw_y = get_raw_y_accel();
    1f26:	0e 94 7f 03 	call	0x6fe	; 0x6fe <get_raw_y_accel>
    1f2a:	f8 2e       	mov	r15, r24
    1f2c:	e9 2e       	mov	r14, r25
				uint16_t raw_z = get_raw_z_accel();
    1f2e:	0e 94 87 03 	call	0x70e	; 0x70e <get_raw_z_accel>
    1f32:	d8 2e       	mov	r13, r24
    1f34:	c9 2e       	mov	r12, r25
				uint16_t raw_rx = get_raw_x_rotation();
    1f36:	0e 94 8f 03 	call	0x71e	; 0x71e <get_raw_x_rotation>
    1f3a:	b8 2e       	mov	r11, r24
    1f3c:	a9 2e       	mov	r10, r25
				uint16_t raw_ry = get_raw_y_rotation();
    1f3e:	0e 94 97 03 	call	0x72e	; 0x72e <get_raw_y_rotation>
    1f42:	98 2e       	mov	r9, r24
    1f44:	89 2e       	mov	r8, r25
				uint16_t tacho = get_tacho_count();
    1f46:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
				sprintf(buf, "x%4dy%4dz%4dr%4dq%4dt%4d", raw_x, raw_y, raw_z, raw_rx, raw_ry, tacho);
    1f4a:	9f 93       	push	r25
    1f4c:	8f 93       	push	r24
    1f4e:	8f 92       	push	r8
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	87 e9       	ldi	r24, 0x97	; 151
    1f64:	92 e0       	ldi	r25, 0x02	; 2
    1f66:	9f 93       	push	r25
    1f68:	8f 93       	push	r24
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	0f 5f       	subi	r16, 0xFF	; 255
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	1f 93       	push	r17
    1f72:	0f 93       	push	r16
    1f74:	04 d6       	rcall	.+3080   	; 0x2b7e <sprintf>

				//sprintf(buf2, "r%4d q%4d",raw_rx, raw_ry);
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    1f76:	f8 01       	movw	r30, r16
    1f78:	01 90       	ld	r0, Z+
    1f7a:	00 20       	and	r0, r0
    1f7c:	e9 f7       	brne	.-6      	; 0x1f78 <bt_com_call_back+0xf2>
    1f7e:	31 97       	sbiw	r30, 0x01	; 1
    1f80:	bf 01       	movw	r22, r30
    1f82:	60 1b       	sub	r22, r16
    1f84:	71 0b       	sbc	r23, r17
    1f86:	c8 01       	movw	r24, r16
    1f88:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				//bt_send_bytes((uint8_t *)buf2, strlen(buf));
				break;
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	2c c0       	rjmp	.+88     	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'f': {
				learn();
    1f98:	13 df       	rcall	.-474    	; 0x1dc0 <learn>
				break;
    1f9a:	2a c0       	rjmp	.+84     	; 0x1ff0 <bt_com_call_back+0x16a>
			}
			
			case 'G': {
				uint16_t raw_x = get_raw_x_rotation();
    1f9c:	0e 94 8f 03 	call	0x71e	; 0x71e <get_raw_x_rotation>
    1fa0:	18 2f       	mov	r17, r24
    1fa2:	09 2f       	mov	r16, r25
				uint16_t raw_y = get_raw_y_rotation();
    1fa4:	0e 94 97 03 	call	0x72e	; 0x72e <get_raw_y_rotation>
    1fa8:	f8 2e       	mov	r15, r24
    1faa:	e9 2e       	mov	r14, r25
				uint16_t raw_xa = get_raw_x_accel();
    1fac:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
				sprintf(buf, "x%4d y%4d x%4d", raw_x, raw_y, raw_xa);
    1fb0:	9f 93       	push	r25
    1fb2:	8f 93       	push	r24
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	80 eb       	ldi	r24, 0xB0	; 176
    1fbe:	92 e0       	ldi	r25, 0x02	; 2
    1fc0:	9f 93       	push	r25
    1fc2:	8f 93       	push	r24
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	0f 5f       	subi	r16, 0xFF	; 255
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	1f 93       	push	r17
    1fcc:	0f 93       	push	r16
    1fce:	d7 d5       	rcall	.+2990   	; 0x2b7e <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	00 20       	and	r0, r0
    1fd6:	e9 f7       	brne	.-6      	; 0x1fd2 <bt_com_call_back+0x14c>
    1fd8:	31 97       	sbiw	r30, 0x01	; 1
    1fda:	bf 01       	movw	r22, r30
    1fdc:	60 1b       	sub	r22, r16
    1fde:	71 0b       	sbc	r23, r17
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
			
			
			default:;
		}
	}
}
    1ff0:	a8 96       	adiw	r28, 0x28	; 40
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	cf 90       	pop	r12
    200c:	bf 90       	pop	r11
    200e:	af 90       	pop	r10
    2010:	9f 90       	pop	r9
    2012:	8f 90       	pop	r8
    2014:	08 95       	ret

00002016 <vstartupTask>:
		// Wait for goal line is passed
		xSemaphoreTake(goal_line_semaphore, portMAX_DELAY);
	}
}

static void vstartupTask( void *pvParameters ) {
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	1f 92       	push	r1
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	/* The parameters are not used. */
	( void ) pvParameters;
	
	goal_line_semaphore = xSemaphoreCreateBinary();
    2020:	43 e0       	ldi	r20, 0x03	; 3
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	b1 d9       	rcall	.-3230   	; 0x138a <xQueueGenericCreate>
    2028:	90 93 e1 0d 	sts	0x0DE1, r25
    202c:	80 93 e0 0d 	sts	0x0DE0, r24
	_xBT_received_chars_queue = xQueueCreate( _BT_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	8e e1       	ldi	r24, 0x1E	; 30
    2036:	a9 d9       	rcall	.-3246   	; 0x138a <xQueueGenericCreate>
    2038:	90 93 df 0d 	sts	0x0DDF, r25
    203c:	80 93 de 0d 	sts	0x0DDE, r24
	
	if( goal_line_semaphore == NULL ) {
    2040:	80 91 e0 0d 	lds	r24, 0x0DE0
    2044:	90 91 e1 0d 	lds	r25, 0x0DE1
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	11 f0       	breq	.+4      	; 0x2050 <vstartupTask+0x3a>
		/* There was insufficient OpenRTOS heap available for the semaphore to
		be created successfully. */
		// What to do here ?????????????????????????????????
		} else {
		set_goal_line_semaphore(goal_line_semaphore);
    204c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <set_goal_line_semaphore>
	}
	
	// Initialize Bluetooth Module
	vTaskDelay( 1000/ portTICK_PERIOD_MS);
    2050:	88 ee       	ldi	r24, 0xE8	; 232
    2052:	93 e0       	ldi	r25, 0x03	; 3
    2054:	72 dd       	rcall	.-1308   	; 0x1b3a <vTaskDelay>
	set_bt_reset(0);  // Disable reset line of Blue tooth module
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0e 94 b9 03 	call	0x772	; 0x772 <set_bt_reset>
	vTaskDelay( 1000/ portTICK_PERIOD_MS);
    205c:	88 ee       	ldi	r24, 0xE8	; 232
    205e:	93 e0       	ldi	r25, 0x03	; 3
    2060:	6c dd       	rcall	.-1320   	; 0x1b3a <vTaskDelay>
	init_bt_module(bt_status_call_back, _xBT_received_chars_queue);
    2062:	60 91 de 0d 	lds	r22, 0x0DDE
    2066:	70 91 df 0d 	lds	r23, 0x0DDF
    206a:	8f ec       	ldi	r24, 0xCF	; 207
    206c:	9e e0       	ldi	r25, 0x0E	; 14
    206e:	0e 94 c8 03 	call	0x790	; 0x790 <init_bt_module>
	
	xTaskCreate( vjustATask, "JustATask", configMINIMAL_STACK_SIZE, NULL, just_a_task_TASK_PRIORITY, NULL );
    2072:	a1 2c       	mov	r10, r1
    2074:	b1 2c       	mov	r11, r1
    2076:	c1 2c       	mov	r12, r1
    2078:	d1 2c       	mov	r13, r1
    207a:	e1 2c       	mov	r14, r1
    207c:	f1 2c       	mov	r15, r1
    207e:	01 e0       	ldi	r16, 0x01	; 1
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	49 eb       	ldi	r20, 0xB9	; 185
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	6f eb       	ldi	r22, 0xBF	; 191
    208a:	72 e0       	ldi	r23, 0x02	; 2
    208c:	85 ed       	ldi	r24, 0xD5	; 213
    208e:	9e e0       	ldi	r25, 0x0E	; 14
    2090:	f3 da       	rcall	.-2586   	; 0x1678 <xTaskGenericCreate>
	uint8_t _byte;
	
	for( ;; ) {
		xQueueReceive( _xBT_received_chars_queue, &_byte, portMAX_DELAY );
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	4f ef       	ldi	r20, 0xFF	; 255
    2096:	5f ef       	ldi	r21, 0xFF	; 255
    2098:	be 01       	movw	r22, r28
    209a:	6f 5f       	subi	r22, 0xFF	; 255
    209c:	7f 4f       	sbci	r23, 0xFF	; 255
    209e:	80 91 de 0d 	lds	r24, 0x0DDE
    20a2:	90 91 df 0d 	lds	r25, 0x0DDF
    20a6:	f8 d9       	rcall	.-3088   	; 0x1498 <xQueueGenericReceive>
		bt_com_call_back(_byte);
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	ed de       	rcall	.-550    	; 0x1e86 <bt_com_call_back>
    20ac:	f2 cf       	rjmp	.-28     	; 0x2092 <vstartupTask+0x7c>

000020ae <main>:
	}
}

int main(void)
{
    20ae:	af 92       	push	r10
    20b0:	bf 92       	push	r11
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
	init_main_board();
    20bc:	0e 94 a5 02 	call	0x54a	; 0x54a <init_main_board>
	xTaskCreate( vstartupTask, "StartupTask", configMINIMAL_STACK_SIZE, NULL, startup_TASK_PRIORITY, NULL );
    20c0:	a1 2c       	mov	r10, r1
    20c2:	b1 2c       	mov	r11, r1
    20c4:	c1 2c       	mov	r12, r1
    20c6:	d1 2c       	mov	r13, r1
    20c8:	e1 2c       	mov	r14, r1
    20ca:	f1 2c       	mov	r15, r1
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	49 eb       	ldi	r20, 0xB9	; 185
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	69 ec       	ldi	r22, 0xC9	; 201
    20d8:	72 e0       	ldi	r23, 0x02	; 2
    20da:	8b e0       	ldi	r24, 0x0B	; 11
    20dc:	90 e1       	ldi	r25, 0x10	; 16
    20de:	cc da       	rcall	.-2664   	; 0x1678 <xTaskGenericCreate>
	vTaskStartScheduler();
    20e0:	c4 db       	rcall	.-2168   	; 0x186a <vTaskStartScheduler>
}
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	bf 90       	pop	r11
    20f2:	af 90       	pop	r10
    20f4:	08 95       	ret

000020f6 <vApplicationStackOverflowHook>:


// Called is TASK Stack overflows
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ) {
    20f6:	08 95       	ret

000020f8 <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    20f8:	4f 92       	push	r4
    20fa:	5f 92       	push	r5
    20fc:	6f 92       	push	r6
    20fe:	7f 92       	push	r7
    2100:	8f 92       	push	r8
    2102:	9f 92       	push	r9
    2104:	af 92       	push	r10
    2106:	bf 92       	push	r11
    2108:	cf 92       	push	r12
    210a:	df 92       	push	r13
    210c:	ff 92       	push	r15
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	f8 2e       	mov	r15, r24
    211c:	2a 01       	movw	r4, r20
    211e:	3b 01       	movw	r6, r22
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	fc d3       	rcall	.+2040   	; 0x291e <malloc>
    2126:	8c 01       	movw	r16, r24
    2128:	8f 2d       	mov	r24, r15
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	fc 01       	movw	r30, r24
    2132:	ee 51       	subi	r30, 0x1E	; 30
    2134:	f2 4f       	sbci	r31, 0xF2	; 242
    2136:	11 83       	std	Z+1, r17	; 0x01
    2138:	00 83       	st	Z, r16
    213a:	fc 01       	movw	r30, r24
    213c:	e5 5b       	subi	r30, 0xB5	; 181
    213e:	fd 4f       	sbci	r31, 0xFD	; 253
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	d8 01       	movw	r26, r16
    2146:	11 96       	adiw	r26, 0x01	; 1
    2148:	9c 93       	st	X, r25
    214a:	8e 93       	st	-X, r24
    214c:	13 96       	adiw	r26, 0x03	; 3
    214e:	bc 92       	st	X, r11
    2150:	ae 92       	st	-X, r10
    2152:	12 97       	sbiw	r26, 0x02	; 2
    2154:	15 96       	adiw	r26, 0x05	; 5
    2156:	dc 92       	st	X, r13
    2158:	ce 92       	st	-X, r12
    215a:	14 97       	sbiw	r26, 0x04	; 4
    215c:	17 96       	adiw	r26, 0x07	; 7
    215e:	9c 92       	st	X, r9
    2160:	8e 92       	st	-X, r8
    2162:	16 97       	sbiw	r26, 0x06	; 6
    2164:	ff b6       	in	r15, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	d8 01       	movw	r26, r16
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	11 97       	sbiw	r26, 0x01	; 1
    2170:	36 97       	sbiw	r30, 0x06	; 6
    2172:	80 81       	ld	r24, Z
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	80 83       	st	Z, r24
    2178:	cd 90       	ld	r12, X+
    217a:	dc 90       	ld	r13, X
    217c:	44 0c       	add	r4, r4
    217e:	55 1c       	adc	r5, r5
    2180:	66 1c       	adc	r6, r6
    2182:	77 1c       	adc	r7, r7
    2184:	44 0c       	add	r4, r4
    2186:	55 1c       	adc	r5, r5
    2188:	66 1c       	adc	r6, r6
    218a:	77 1c       	adc	r7, r7
    218c:	a3 01       	movw	r20, r6
    218e:	92 01       	movw	r18, r4
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	44 1f       	adc	r20, r20
    2196:	55 1f       	adc	r21, r21
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	74 e2       	ldi	r23, 0x24	; 36
    219c:	84 ef       	ldi	r24, 0xF4	; 244
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	57 d3       	rcall	.+1710   	; 0x2850 <__udivmodsi4>
    21a2:	21 50       	subi	r18, 0x01	; 1
    21a4:	f6 01       	movw	r30, r12
    21a6:	32 97       	sbiw	r30, 0x02	; 2
    21a8:	20 83       	st	Z, r18
    21aa:	d8 01       	movw	r26, r16
    21ac:	ed 91       	ld	r30, X+
    21ae:	fc 91       	ld	r31, X
    21b0:	11 97       	sbiw	r26, 0x01	; 1
    21b2:	35 97       	sbiw	r30, 0x05	; 5
    21b4:	88 e9       	ldi	r24, 0x98	; 152
    21b6:	80 83       	st	Z, r24
    21b8:	ed 91       	ld	r30, X+
    21ba:	fc 91       	ld	r31, X
    21bc:	34 97       	sbiw	r30, 0x04	; 4
    21be:	86 e0       	ldi	r24, 0x06	; 6
    21c0:	80 83       	st	Z, r24
    21c2:	ff be       	out	0x3f, r15	; 63
    21c4:	c8 01       	movw	r24, r16
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	ff 90       	pop	r15
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	bf 90       	pop	r11
    21d6:	af 90       	pop	r10
    21d8:	9f 90       	pop	r9
    21da:	8f 90       	pop	r8
    21dc:	7f 90       	pop	r7
    21de:	6f 90       	pop	r6
    21e0:	5f 90       	pop	r5
    21e2:	4f 90       	pop	r4
    21e4:	08 95       	ret

000021e6 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	8c 01       	movw	r16, r24
    21f4:	e4 2e       	mov	r14, r20
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    21f6:	dc 01       	movw	r26, r24
    21f8:	12 96       	adiw	r26, 0x02	; 2
    21fa:	ed 91       	ld	r30, X+
    21fc:	fc 91       	ld	r31, X
    21fe:	13 97       	sbiw	r26, 0x03	; 3
    2200:	30 97       	sbiw	r30, 0x00	; 0
    2202:	69 f0       	breq	.+26     	; 0x221e <__stack+0x1f>
    2204:	24 2f       	mov	r18, r20
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	42 a5       	ldd	r20, Z+42	; 0x2a
    220a:	88 e2       	ldi	r24, 0x28	; 40
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	84 1b       	sub	r24, r20
    2210:	91 09       	sbc	r25, r1
    2212:	82 17       	cp	r24, r18
    2214:	93 07       	cpc	r25, r19
    2216:	e4 f0       	brlt	.+56     	; 0x2250 <__stack+0x51>
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2218:	e1 10       	cpse	r14, r1
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <__stack+0x27>
    221c:	10 c0       	rjmp	.+32     	; 0x223e <__stack+0x3f>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    221e:	b1 e0       	ldi	r27, 0x01	; 1
    2220:	b4 17       	cp	r27, r20
    2222:	c0 f0       	brcs	.+48     	; 0x2254 <__stack+0x55>
    2224:	f9 cf       	rjmp	.-14     	; 0x2218 <__stack+0x19>
    2226:	c6 2f       	mov	r28, r22
    2228:	d7 2f       	mov	r29, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    222a:	f1 2c       	mov	r15, r1
		buffer_put_item(handle->_tx_buf, buf[i]);
    222c:	69 91       	ld	r22, Y+
    222e:	f8 01       	movw	r30, r16
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2238:	f3 94       	inc	r15
    223a:	fe 10       	cpse	r15, r14
    223c:	f7 cf       	rjmp	.-18     	; 0x222c <__stack+0x2d>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    223e:	d8 01       	movw	r26, r16
    2240:	ed 91       	ld	r30, X+
    2242:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
    2244:	35 97       	sbiw	r30, 0x05	; 5
    2246:	80 81       	ld	r24, Z
    2248:	80 62       	ori	r24, 0x20	; 32
    224a:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <__stack+0x57>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	01 c0       	rjmp	.+2      	; 0x2256 <__stack+0x57>
    2254:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	08 95       	ret

00002264 <__vector_25>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    2264:	1f 92       	push	r1
    2266:	0f 92       	push	r0
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	0f 92       	push	r0
    226c:	11 24       	eor	r1, r1
    226e:	0b b6       	in	r0, 0x3b	; 59
    2270:	0f 92       	push	r0
    2272:	2f 93       	push	r18
    2274:	3f 93       	push	r19
    2276:	4f 93       	push	r20
    2278:	5f 93       	push	r21
    227a:	6f 93       	push	r22
    227c:	7f 93       	push	r23
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	cf 93       	push	r28
    2288:	ef 93       	push	r30
    228a:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    228c:	e0 91 e2 0d 	lds	r30, 0x0DE2
    2290:	f0 91 e3 0d 	lds	r31, 0x0DE3
    2294:	30 97       	sbiw	r30, 0x00	; 0
    2296:	a1 f0       	breq	.+40     	; 0x22c0 <__vector_25+0x5c>
		item = UDR0;
    2298:	c0 91 c6 00 	lds	r28, 0x00C6
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    229c:	6c 2f       	mov	r22, r28
    229e:	84 81       	ldd	r24, Z+4	; 0x04
    22a0:	95 81       	ldd	r25, Z+5	; 0x05
    22a2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    22a6:	80 91 e2 0d 	lds	r24, 0x0DE2
    22aa:	90 91 e3 0d 	lds	r25, 0x0DE3
    22ae:	dc 01       	movw	r26, r24
    22b0:	16 96       	adiw	r26, 0x06	; 6
    22b2:	ed 91       	ld	r30, X+
    22b4:	fc 91       	ld	r31, X
    22b6:	17 97       	sbiw	r26, 0x07	; 7
    22b8:	30 97       	sbiw	r30, 0x00	; 0
    22ba:	11 f0       	breq	.+4      	; 0x22c0 <__vector_25+0x5c>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    22bc:	6c 2f       	mov	r22, r28
    22be:	19 95       	eicall
		}
	}
}
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	cf 91       	pop	r28
    22c6:	bf 91       	pop	r27
    22c8:	af 91       	pop	r26
    22ca:	9f 91       	pop	r25
    22cc:	8f 91       	pop	r24
    22ce:	7f 91       	pop	r23
    22d0:	6f 91       	pop	r22
    22d2:	5f 91       	pop	r21
    22d4:	4f 91       	pop	r20
    22d6:	3f 91       	pop	r19
    22d8:	2f 91       	pop	r18
    22da:	0f 90       	pop	r0
    22dc:	0b be       	out	0x3b, r0	; 59
    22de:	0f 90       	pop	r0
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	0f 90       	pop	r0
    22e4:	1f 90       	pop	r1
    22e6:	18 95       	reti

000022e8 <__vector_26>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    22e8:	1f 92       	push	r1
    22ea:	0f 92       	push	r0
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	0f 92       	push	r0
    22f0:	11 24       	eor	r1, r1
    22f2:	0b b6       	in	r0, 0x3b	; 59
    22f4:	0f 92       	push	r0
    22f6:	2f 93       	push	r18
    22f8:	3f 93       	push	r19
    22fa:	4f 93       	push	r20
    22fc:	5f 93       	push	r21
    22fe:	6f 93       	push	r22
    2300:	7f 93       	push	r23
    2302:	8f 93       	push	r24
    2304:	9f 93       	push	r25
    2306:	af 93       	push	r26
    2308:	bf 93       	push	r27
    230a:	ef 93       	push	r30
    230c:	ff 93       	push	r31
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	1f 92       	push	r1
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2318:	e0 91 e2 0d 	lds	r30, 0x0DE2
    231c:	f0 91 e3 0d 	lds	r31, 0x0DE3
    2320:	30 97       	sbiw	r30, 0x00	; 0
    2322:	99 f0       	breq	.+38     	; 0x234a <__vector_26+0x62>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2324:	be 01       	movw	r22, r28
    2326:	6f 5f       	subi	r22, 0xFF	; 255
    2328:	7f 4f       	sbci	r23, 0xFF	; 255
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    2332:	81 11       	cpse	r24, r1
    2334:	04 c0       	rjmp	.+8      	; 0x233e <__vector_26+0x56>
			UDR0 = item;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	80 93 c6 00 	sts	0x00C6, r24
    233c:	0b c0       	rjmp	.+22     	; 0x2354 <__vector_26+0x6c>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    233e:	e1 ec       	ldi	r30, 0xC1	; 193
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8f 7d       	andi	r24, 0xDF	; 223
    2346:	80 83       	st	Z, r24
    2348:	05 c0       	rjmp	.+10     	; 0x2354 <__vector_26+0x6c>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    234a:	e1 ec       	ldi	r30, 0xC1	; 193
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7d       	andi	r24, 0xDF	; 223
    2352:	80 83       	st	Z, r24
	}
}
    2354:	0f 90       	pop	r0
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	ff 91       	pop	r31
    235c:	ef 91       	pop	r30
    235e:	bf 91       	pop	r27
    2360:	af 91       	pop	r26
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	7f 91       	pop	r23
    2368:	6f 91       	pop	r22
    236a:	5f 91       	pop	r21
    236c:	4f 91       	pop	r20
    236e:	3f 91       	pop	r19
    2370:	2f 91       	pop	r18
    2372:	0f 90       	pop	r0
    2374:	0b be       	out	0x3b, r0	; 59
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_36>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	0b b6       	in	r0, 0x3b	; 59
    238c:	0f 92       	push	r0
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	cf 93       	push	r28
    23a4:	ef 93       	push	r30
    23a6:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    23a8:	e0 91 e4 0d 	lds	r30, 0x0DE4
    23ac:	f0 91 e5 0d 	lds	r31, 0x0DE5
    23b0:	30 97       	sbiw	r30, 0x00	; 0
    23b2:	a1 f0       	breq	.+40     	; 0x23dc <__vector_36+0x5c>
		item = UDR1;
    23b4:	c0 91 ce 00 	lds	r28, 0x00CE
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    23b8:	6c 2f       	mov	r22, r28
    23ba:	84 81       	ldd	r24, Z+4	; 0x04
    23bc:	95 81       	ldd	r25, Z+5	; 0x05
    23be:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    23c2:	80 91 e4 0d 	lds	r24, 0x0DE4
    23c6:	90 91 e5 0d 	lds	r25, 0x0DE5
    23ca:	dc 01       	movw	r26, r24
    23cc:	16 96       	adiw	r26, 0x06	; 6
    23ce:	ed 91       	ld	r30, X+
    23d0:	fc 91       	ld	r31, X
    23d2:	17 97       	sbiw	r26, 0x07	; 7
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	11 f0       	breq	.+4      	; 0x23dc <__vector_36+0x5c>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    23d8:	6c 2f       	mov	r22, r28
    23da:	19 95       	eicall
		}
	}
}
    23dc:	ff 91       	pop	r31
    23de:	ef 91       	pop	r30
    23e0:	cf 91       	pop	r28
    23e2:	bf 91       	pop	r27
    23e4:	af 91       	pop	r26
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	7f 91       	pop	r23
    23ec:	6f 91       	pop	r22
    23ee:	5f 91       	pop	r21
    23f0:	4f 91       	pop	r20
    23f2:	3f 91       	pop	r19
    23f4:	2f 91       	pop	r18
    23f6:	0f 90       	pop	r0
    23f8:	0b be       	out	0x3b, r0	; 59
    23fa:	0f 90       	pop	r0
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	0f 90       	pop	r0
    2400:	1f 90       	pop	r1
    2402:	18 95       	reti

00002404 <__vector_37>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    2404:	1f 92       	push	r1
    2406:	0f 92       	push	r0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	0f 92       	push	r0
    240c:	11 24       	eor	r1, r1
    240e:	0b b6       	in	r0, 0x3b	; 59
    2410:	0f 92       	push	r0
    2412:	2f 93       	push	r18
    2414:	3f 93       	push	r19
    2416:	4f 93       	push	r20
    2418:	5f 93       	push	r21
    241a:	6f 93       	push	r22
    241c:	7f 93       	push	r23
    241e:	8f 93       	push	r24
    2420:	9f 93       	push	r25
    2422:	af 93       	push	r26
    2424:	bf 93       	push	r27
    2426:	ef 93       	push	r30
    2428:	ff 93       	push	r31
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	1f 92       	push	r1
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2434:	e0 91 e4 0d 	lds	r30, 0x0DE4
    2438:	f0 91 e5 0d 	lds	r31, 0x0DE5
    243c:	30 97       	sbiw	r30, 0x00	; 0
    243e:	99 f0       	breq	.+38     	; 0x2466 <__vector_37+0x62>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    2440:	be 01       	movw	r22, r28
    2442:	6f 5f       	subi	r22, 0xFF	; 255
    2444:	7f 4f       	sbci	r23, 0xFF	; 255
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    244e:	81 11       	cpse	r24, r1
    2450:	04 c0       	rjmp	.+8      	; 0x245a <__vector_37+0x56>
			UDR1 = item;
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	80 93 ce 00 	sts	0x00CE, r24
    2458:	0b c0       	rjmp	.+22     	; 0x2470 <__vector_37+0x6c>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    245a:	e9 ec       	ldi	r30, 0xC9	; 201
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8f 7d       	andi	r24, 0xDF	; 223
    2462:	80 83       	st	Z, r24
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <__vector_37+0x6c>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    2466:	e9 ec       	ldi	r30, 0xC9	; 201
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	8f 7d       	andi	r24, 0xDF	; 223
    246e:	80 83       	st	Z, r24
	}
}
    2470:	0f 90       	pop	r0
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	ff 91       	pop	r31
    2478:	ef 91       	pop	r30
    247a:	bf 91       	pop	r27
    247c:	af 91       	pop	r26
    247e:	9f 91       	pop	r25
    2480:	8f 91       	pop	r24
    2482:	7f 91       	pop	r23
    2484:	6f 91       	pop	r22
    2486:	5f 91       	pop	r21
    2488:	4f 91       	pop	r20
    248a:	3f 91       	pop	r19
    248c:	2f 91       	pop	r18
    248e:	0f 90       	pop	r0
    2490:	0b be       	out	0x3b, r0	; 59
    2492:	0f 90       	pop	r0
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	0f 90       	pop	r0
    2498:	1f 90       	pop	r1
    249a:	18 95       	reti

0000249c <_select_instance>:
		// restore interrupt state
		SREG = c_sreg;
	}

	return result;
}
    249c:	e0 91 e7 0d 	lds	r30, 0x0DE7
    24a0:	f0 91 e8 0d 	lds	r31, 0x0DE8
    24a4:	30 97       	sbiw	r30, 0x00	; 0
    24a6:	01 f1       	breq	.+64     	; 0x24e8 <_select_instance+0x4c>
    24a8:	23 81       	ldd	r18, Z+3	; 0x03
    24aa:	21 30       	cpi	r18, 0x01	; 1
    24ac:	79 f4       	brne	.+30     	; 0x24cc <_select_instance+0x30>
    24ae:	a0 81       	ld	r26, Z
    24b0:	b1 81       	ldd	r27, Z+1	; 0x01
    24b2:	4c 91       	ld	r20, X
    24b4:	21 e0       	ldi	r18, 0x01	; 1
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	02 80       	ldd	r0, Z+2	; 0x02
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <_select_instance+0x24>
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <_select_instance+0x20>
    24c4:	20 95       	com	r18
    24c6:	24 23       	and	r18, r20
    24c8:	2c 93       	st	X, r18
    24ca:	0e c0       	rjmp	.+28     	; 0x24e8 <_select_instance+0x4c>
    24cc:	a0 81       	ld	r26, Z
    24ce:	b1 81       	ldd	r27, Z+1	; 0x01
    24d0:	6c 91       	ld	r22, X
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	9a 01       	movw	r18, r20
    24d8:	02 80       	ldd	r0, Z+2	; 0x02
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <_select_instance+0x44>
    24dc:	22 0f       	add	r18, r18
    24de:	33 1f       	adc	r19, r19
    24e0:	0a 94       	dec	r0
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <_select_instance+0x40>
    24e4:	26 2b       	or	r18, r22
    24e6:	2c 93       	st	X, r18
    24e8:	90 93 e8 0d 	sts	0x0DE8, r25
    24ec:	80 93 e7 0d 	sts	0x0DE7, r24
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f0       	breq	.+26     	; 0x250e <_select_instance+0x72>
    24f4:	10 92 e9 0d 	sts	0x0DE9, r1
    24f8:	2c b5       	in	r18, 0x2c	; 44
    24fa:	2f 73       	andi	r18, 0x3F	; 63
    24fc:	2c bd       	out	0x2c, r18	; 44
    24fe:	fc 01       	movw	r30, r24
    2500:	24 81       	ldd	r18, Z+4	; 0x04
    2502:	2c bd       	out	0x2c, r18	; 44
    2504:	85 81       	ldd	r24, Z+5	; 0x05
    2506:	8d bd       	out	0x2d, r24	; 45
    2508:	8c b5       	in	r24, 0x2c	; 44
    250a:	80 64       	ori	r24, 0x40	; 64
    250c:	8c bd       	out	0x2c, r24	; 44
    250e:	08 95       	ret

00002510 <spi_new_instance>:
    2510:	6f 92       	push	r6
    2512:	7f 92       	push	r7
    2514:	8f 92       	push	r8
    2516:	9f 92       	push	r9
    2518:	af 92       	push	r10
    251a:	bf 92       	push	r11
    251c:	cf 92       	push	r12
    251e:	df 92       	push	r13
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	d8 2e       	mov	r13, r24
    2532:	f6 2e       	mov	r15, r22
    2534:	64 2e       	mov	r6, r20
    2536:	72 2e       	mov	r7, r18
    2538:	80 91 e6 0d 	lds	r24, 0x0DE6
    253c:	81 11       	cpse	r24, r1
    253e:	06 c0       	rjmp	.+12     	; 0x254c <spi_new_instance+0x3c>
    2540:	84 b1       	in	r24, 0x04	; 4
    2542:	87 60       	ori	r24, 0x07	; 7
    2544:	84 b9       	out	0x04, r24	; 4
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	80 93 e6 0d 	sts	0x0DE6, r24
    254c:	8c e0       	ldi	r24, 0x0C	; 12
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	e6 d1       	rcall	.+972    	; 0x291e <malloc>
    2552:	fc 01       	movw	r30, r24
    2554:	00 83       	st	Z, r16
    2556:	11 83       	std	Z+1, r17	; 0x01
    2558:	e2 82       	std	Z+2, r14	; 0x02
    255a:	a0 2f       	mov	r26, r16
    255c:	b1 2f       	mov	r27, r17
    255e:	4e 91       	ld	r20, -X
    2560:	21 e0       	ldi	r18, 0x01	; 1
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	c9 01       	movw	r24, r18
    2566:	02 c0       	rjmp	.+4      	; 0x256c <spi_new_instance+0x5c>
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	ea 94       	dec	r14
    256e:	e2 f7       	brpl	.-8      	; 0x2568 <spi_new_instance+0x58>
    2570:	84 2b       	or	r24, r20
    2572:	8c 93       	st	X, r24
    2574:	c3 82       	std	Z+3, r12	; 0x03
    2576:	66 0c       	add	r6, r6
    2578:	66 0c       	add	r6, r6
    257a:	76 28       	or	r7, r6
    257c:	af 2d       	mov	r26, r15
    257e:	bb 27       	eor	r27, r27
    2580:	a7 fd       	sbrc	r26, 7
    2582:	b0 95       	com	r27
    2584:	ab 52       	subi	r26, 0x2B	; 43
    2586:	bd 4f       	sbci	r27, 0xFD	; 253
    2588:	6c 90       	ld	r6, X
    258a:	d6 28       	or	r13, r6
    258c:	d7 28       	or	r13, r7
    258e:	d4 82       	std	Z+4, r13	; 0x04
    2590:	83 e0       	ldi	r24, 0x03	; 3
    2592:	8f 15       	cp	r24, r15
    2594:	14 f4       	brge	.+4      	; 0x259a <spi_new_instance+0x8a>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	85 83       	std	Z+5, r24	; 0x05
    259a:	97 82       	std	Z+7, r9	; 0x07
    259c:	86 82       	std	Z+6, r8	; 0x06
    259e:	b1 86       	std	Z+9, r11	; 0x09
    25a0:	a0 86       	std	Z+8, r10	; 0x08
    25a2:	8a 89       	ldd	r24, Y+18	; 0x12
    25a4:	9b 89       	ldd	r25, Y+19	; 0x13
    25a6:	93 87       	std	Z+11, r25	; 0x0b
    25a8:	82 87       	std	Z+10, r24	; 0x0a
    25aa:	6f b7       	in	r22, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	80 91 e7 0d 	lds	r24, 0x0DE7
    25b2:	90 91 e8 0d 	lds	r25, 0x0DE8
    25b6:	f0 93 e8 0d 	sts	0x0DE8, r31
    25ba:	e0 93 e7 0d 	sts	0x0DE7, r30
    25be:	23 81       	ldd	r18, Z+3	; 0x03
    25c0:	21 30       	cpi	r18, 0x01	; 1
    25c2:	81 f4       	brne	.+32     	; 0x25e4 <spi_new_instance+0xd4>
    25c4:	a0 81       	ld	r26, Z
    25c6:	b1 81       	ldd	r27, Z+1	; 0x01
    25c8:	7c 91       	ld	r23, X
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	9a 01       	movw	r18, r20
    25d0:	02 80       	ldd	r0, Z+2	; 0x02
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <spi_new_instance+0xc8>
    25d4:	22 0f       	add	r18, r18
    25d6:	33 1f       	adc	r19, r19
    25d8:	0a 94       	dec	r0
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <spi_new_instance+0xc4>
    25dc:	20 95       	com	r18
    25de:	27 23       	and	r18, r23
    25e0:	2c 93       	st	X, r18
    25e2:	0e c0       	rjmp	.+28     	; 0x2600 <spi_new_instance+0xf0>
    25e4:	a0 81       	ld	r26, Z
    25e6:	b1 81       	ldd	r27, Z+1	; 0x01
    25e8:	7c 91       	ld	r23, X
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	9a 01       	movw	r18, r20
    25f0:	02 80       	ldd	r0, Z+2	; 0x02
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <spi_new_instance+0xe8>
    25f4:	22 0f       	add	r18, r18
    25f6:	33 1f       	adc	r19, r19
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <spi_new_instance+0xe4>
    25fc:	27 2b       	or	r18, r23
    25fe:	2c 93       	st	X, r18
    2600:	90 93 e8 0d 	sts	0x0DE8, r25
    2604:	80 93 e7 0d 	sts	0x0DE7, r24
    2608:	6f bf       	out	0x3f, r22	; 63
    260a:	cf 01       	movw	r24, r30
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	7f 90       	pop	r7
    2626:	6f 90       	pop	r6
    2628:	08 95       	ret

0000262a <spi_send_string>:
SPI_ILLEGAL_INSTANCE: instance is null.
@param spi to send to.
@param *buf pointer to buffer to be send.
@param len no of bytes to send.
*/
uint8_t spi_send_string(spi_p spi, uint8_t *buf, uint8_t len) {
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	ec 01       	movw	r28, r24
    263a:	8b 01       	movw	r16, r22
    263c:	f4 2e       	mov	r15, r20
	if (spi == 0) {
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	09 f4       	brne	.+2      	; 0x2644 <spi_send_string+0x1a>
    2642:	6b c0       	rjmp	.+214    	; 0x271a <spi_send_string+0xf0>
		return SPI_ILLEGAL_INSTANCE;
	}

	// Select correct instance
	if (_this != spi ) {
    2644:	80 91 e7 0d 	lds	r24, 0x0DE7
    2648:	90 91 e8 0d 	lds	r25, 0x0DE8
    264c:	8c 17       	cp	r24, r28
    264e:	9d 07       	cpc	r25, r29
    2650:	11 f0       	breq	.+4      	; 0x2656 <spi_send_string+0x2c>
		_select_instance(spi);
    2652:	ce 01       	movw	r24, r28
    2654:	23 df       	rcall	.-442    	; 0x249c <_select_instance>
	uint8_t tmp = 0;

	// Critical section
	{
		// disable interrupt
		uint8_t c_sreg = SREG;
    2656:	ef b6       	in	r14, 0x3f	; 63
		cli();
    2658:	f8 94       	cli

		// Check if buffer is free
		if ( ((spi->_tx_buf != 0) && (len > (BUFFER_SIZE - spi->_tx_buf->no_in_buffer))) || ((spi->_tx_buf == 0) && (len > 1)) ) {
    265a:	ee 81       	ldd	r30, Y+6	; 0x06
    265c:	ff 81       	ldd	r31, Y+7	; 0x07
    265e:	30 97       	sbiw	r30, 0x00	; 0
    2660:	61 f0       	breq	.+24     	; 0x267a <spi_send_string+0x50>
    2662:	2f 2d       	mov	r18, r15
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	42 a5       	ldd	r20, Z+42	; 0x2a
    2668:	88 e2       	ldi	r24, 0x28	; 40
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	84 1b       	sub	r24, r20
    266e:	91 09       	sbc	r25, r1
    2670:	82 17       	cp	r24, r18
    2672:	93 07       	cpc	r25, r19
    2674:	0c f4       	brge	.+2      	; 0x2678 <spi_send_string+0x4e>
    2676:	48 c0       	rjmp	.+144    	; 0x2708 <spi_send_string+0xde>
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <spi_send_string+0x58>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	8f 15       	cp	r24, r15
    267e:	08 f4       	brcc	.+2      	; 0x2682 <spi_send_string+0x58>
    2680:	45 c0       	rjmp	.+138    	; 0x270c <spi_send_string+0xe2>
			result = SPI_NO_ROOM_IN_TX_BUFFER;
			} else {
			// If SPI in idle send the first byte
			if (!_spi_active) {
    2682:	80 91 e9 0d 	lds	r24, 0x0DE9
    2686:	81 11       	cpse	r24, r1
    2688:	30 c0       	rjmp	.+96     	; 0x26ea <spi_send_string+0xc0>
				_spi_active = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	80 93 e9 0d 	sts	0x0DE9, r24
	SPDR = byte;
}

// Set the CS according to the instance
static inline void _set_cs(uint8_t state) {
	if (_this->_cs_active_level == 1) {
    2690:	e0 91 e7 0d 	lds	r30, 0x0DE7
    2694:	f0 91 e8 0d 	lds	r31, 0x0DE8
    2698:	83 81       	ldd	r24, Z+3	; 0x03
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	79 f4       	brne	.+30     	; 0x26bc <spi_send_string+0x92>
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
    269e:	a0 81       	ld	r26, Z
    26a0:	b1 81       	ldd	r27, Z+1	; 0x01
    26a2:	4c 91       	ld	r20, X
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	c9 01       	movw	r24, r18
    26aa:	02 80       	ldd	r0, Z+2	; 0x02
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <spi_send_string+0x88>
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	0a 94       	dec	r0
    26b4:	e2 f7       	brpl	.-8      	; 0x26ae <spi_send_string+0x84>
    26b6:	84 2b       	or	r24, r20
    26b8:	8c 93       	st	X, r24
    26ba:	0e c0       	rjmp	.+28     	; 0x26d8 <spi_send_string+0xae>
			} else {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
		}
		} else {
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
    26bc:	a0 81       	ld	r26, Z
    26be:	b1 81       	ldd	r27, Z+1	; 0x01
    26c0:	2c 91       	ld	r18, X
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	02 80       	ldd	r0, Z+2	; 0x02
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <spi_send_string+0xa4>
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	0a 94       	dec	r0
    26d0:	e2 f7       	brpl	.-8      	; 0x26ca <spi_send_string+0xa0>
    26d2:	80 95       	com	r24
    26d4:	82 23       	and	r24, r18
    26d6:	8c 93       	st	X, r24
			// If SPI in idle send the first byte
			if (!_spi_active) {
				_spi_active = 1;
				_set_cs(CS_ACTIVE);
				// Enable SPI interrupt
				SPCR |= _BV(SPIE);
    26d8:	8c b5       	in	r24, 0x2c	; 44
    26da:	80 68       	ori	r24, 0x80	; 128
    26dc:	8c bd       	out	0x2c, r24	; 44
				// Send first byte
				SPDR =buf[0];
    26de:	f8 01       	movw	r30, r16
    26e0:	80 81       	ld	r24, Z
    26e2:	8e bd       	out	0x2e, r24	; 46

				tmp = 1;
    26e4:	dd 24       	eor	r13, r13
    26e6:	d3 94       	inc	r13
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <spi_send_string+0xc2>
	if (_this != spi ) {
		_select_instance(spi);
	}

	uint8_t result = SPI_OK;
	uint8_t tmp = 0;
    26ea:	d1 2c       	mov	r13, r1
				SPDR =buf[0];

				tmp = 1;
			}
			// Put in the tx buffer
			for (uint8_t i = tmp; i < len; i++) {
    26ec:	df 14       	cp	r13, r15
    26ee:	80 f4       	brcc	.+32     	; 0x2710 <spi_send_string+0xe6>
				buffer_put_item(spi->_tx_buf, buf[i]);
    26f0:	f8 01       	movw	r30, r16
    26f2:	ed 0d       	add	r30, r13
    26f4:	f1 1d       	adc	r31, r1
    26f6:	60 81       	ld	r22, Z
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	9f 81       	ldd	r25, Y+7	; 0x07
    26fc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
				SPDR =buf[0];

				tmp = 1;
			}
			// Put in the tx buffer
			for (uint8_t i = tmp; i < len; i++) {
    2700:	d3 94       	inc	r13
    2702:	df 14       	cp	r13, r15
    2704:	a8 f3       	brcs	.-22     	; 0x26f0 <spi_send_string+0xc6>
    2706:	06 c0       	rjmp	.+12     	; 0x2714 <spi_send_string+0xea>
		uint8_t c_sreg = SREG;
		cli();

		// Check if buffer is free
		if ( ((spi->_tx_buf != 0) && (len > (BUFFER_SIZE - spi->_tx_buf->no_in_buffer))) || ((spi->_tx_buf == 0) && (len > 1)) ) {
			result = SPI_NO_ROOM_IN_TX_BUFFER;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	05 c0       	rjmp	.+10     	; 0x2716 <spi_send_string+0xec>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <spi_send_string+0xec>
	// Select correct instance
	if (_this != spi ) {
		_select_instance(spi);
	}

	uint8_t result = SPI_OK;
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <spi_send_string+0xec>
    2714:	80 e0       	ldi	r24, 0x00	; 0
				buffer_put_item(spi->_tx_buf, buf[i]);
			}
		}

		// restore interrupt state
		SREG = c_sreg;
    2716:	ef be       	out	0x3f, r14	; 63
	}

	return result;
    2718:	01 c0       	rjmp	.+2      	; 0x271c <spi_send_string+0xf2>
@param *buf pointer to buffer to be send.
@param len no of bytes to send.
*/
uint8_t spi_send_string(spi_p spi, uint8_t *buf, uint8_t len) {
	if (spi == 0) {
		return SPI_ILLEGAL_INSTANCE;
    271a:	83 e0       	ldi	r24, 0x03	; 3
		// restore interrupt state
		SREG = c_sreg;
	}

	return result;
}
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	df 90       	pop	r13
    272a:	08 95       	ret

0000272c <__vector_24>:

/* ======================================================================================================================= */
/**
@todo Documentation
*/
ISR(SPI_STC_vect) {
    272c:	1f 92       	push	r1
    272e:	0f 92       	push	r0
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	0f 92       	push	r0
    2734:	11 24       	eor	r1, r1
    2736:	0b b6       	in	r0, 0x3b	; 59
    2738:	0f 92       	push	r0
    273a:	2f 93       	push	r18
    273c:	3f 93       	push	r19
    273e:	4f 93       	push	r20
    2740:	5f 93       	push	r21
    2742:	6f 93       	push	r22
    2744:	7f 93       	push	r23
    2746:	8f 93       	push	r24
    2748:	9f 93       	push	r25
    274a:	af 93       	push	r26
    274c:	bf 93       	push	r27
    274e:	ef 93       	push	r30
    2750:	ff 93       	push	r31
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	1f 92       	push	r1
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	#if SPI_USE_BUFFER == 1
	// store received byte if receive buffer available

	if (_this->_rx_buf != 0){
    275c:	e0 91 e7 0d 	lds	r30, 0x0DE7
    2760:	f0 91 e8 0d 	lds	r31, 0x0DE8
    2764:	80 85       	ldd	r24, Z+8	; 0x08
    2766:	91 85       	ldd	r25, Z+9	; 0x09
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	19 f0       	breq	.+6      	; 0x2772 <__vector_24+0x46>
		buffer_put_item(_this->_rx_buf, SPDR);
    276c:	6e b5       	in	r22, 0x2e	; 46
    276e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
	}
	// more bytes to send?
	if ( buffer_get_item(_this->_tx_buf, &item) == BUFFER_OK) {
    2772:	e0 91 e7 0d 	lds	r30, 0x0DE7
    2776:	f0 91 e8 0d 	lds	r31, 0x0DE8
    277a:	be 01       	movw	r22, r28
    277c:	6f 5f       	subi	r22, 0xFF	; 255
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	86 81       	ldd	r24, Z+6	; 0x06
    2782:	97 81       	ldd	r25, Z+7	; 0x07
    2784:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    2788:	81 11       	cpse	r24, r1
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <__vector_24+0x66>
		_spi_send_byte(item);
    278c:	89 81       	ldd	r24, Y+1	; 0x01
// Indexed by SPI_CLOCK_DIVIDER_xx defines
static const uint8_t _prescaler_mask [] = {0b00,0b01,0b10,0b11,0b00,0b01,0b10};

// Send a byte to the SPI-bus
static inline void _spi_send_byte(uint8_t byte) {
	SPDR = byte;
    278e:	8e bd       	out	0x2e, r24	; 46
    2790:	29 c0       	rjmp	.+82     	; 0x27e4 <__vector_24+0xb8>
	if ( buffer_get_item(_this->_tx_buf, &item) == BUFFER_OK) {
		_spi_send_byte(item);
		} else {
		// No
		// Disable SPI interrupt
		SPCR &= ~_BV(SPIE);
    2792:	8c b5       	in	r24, 0x2c	; 44
    2794:	8f 77       	andi	r24, 0x7F	; 127
    2796:	8c bd       	out	0x2c, r24	; 44
		_spi_active = 0;
    2798:	10 92 e9 0d 	sts	0x0DE9, r1
	SPDR = byte;
}

// Set the CS according to the instance
static inline void _set_cs(uint8_t state) {
	if (_this->_cs_active_level == 1) {
    279c:	e0 91 e7 0d 	lds	r30, 0x0DE7
    27a0:	f0 91 e8 0d 	lds	r31, 0x0DE8
    27a4:	83 81       	ldd	r24, Z+3	; 0x03
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	79 f4       	brne	.+30     	; 0x27c8 <__vector_24+0x9c>
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
			} else {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
    27aa:	a0 81       	ld	r26, Z
    27ac:	b1 81       	ldd	r27, Z+1	; 0x01
    27ae:	2c 91       	ld	r18, X
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	02 80       	ldd	r0, Z+2	; 0x02
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <__vector_24+0x90>
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <__vector_24+0x8c>
    27c0:	80 95       	com	r24
    27c2:	82 23       	and	r24, r18
    27c4:	8c 93       	st	X, r24
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <__vector_24+0xb8>
		} else {
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);

			} else {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
    27c8:	a0 81       	ld	r26, Z
    27ca:	b1 81       	ldd	r27, Z+1	; 0x01
    27cc:	4c 91       	ld	r20, X
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	c9 01       	movw	r24, r18
    27d4:	02 80       	ldd	r0, Z+2	; 0x02
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <__vector_24+0xb0>
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	0a 94       	dec	r0
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <__vector_24+0xac>
    27e0:	84 2b       	or	r24, r20
    27e2:	8c 93       	st	X, r24
	_spi_active = 0;
	_set_cs(CS_INACTIVE);
	#endif

	// If handler defined - call it with instance and received byte.
	if (_this->_call_back)
    27e4:	80 91 e7 0d 	lds	r24, 0x0DE7
    27e8:	90 91 e8 0d 	lds	r25, 0x0DE8
    27ec:	dc 01       	movw	r26, r24
    27ee:	1a 96       	adiw	r26, 0x0a	; 10
    27f0:	ed 91       	ld	r30, X+
    27f2:	fc 91       	ld	r31, X
    27f4:	1b 97       	sbiw	r26, 0x0b	; 11
    27f6:	30 97       	sbiw	r30, 0x00	; 0
    27f8:	11 f0       	breq	.+4      	; 0x27fe <__vector_24+0xd2>
	{
		_this->_call_back(_this, item);
    27fa:	69 81       	ldd	r22, Y+1	; 0x01
    27fc:	19 95       	eicall
	}
    27fe:	0f 90       	pop	r0
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	ff 91       	pop	r31
    2806:	ef 91       	pop	r30
    2808:	bf 91       	pop	r27
    280a:	af 91       	pop	r26
    280c:	9f 91       	pop	r25
    280e:	8f 91       	pop	r24
    2810:	7f 91       	pop	r23
    2812:	6f 91       	pop	r22
    2814:	5f 91       	pop	r21
    2816:	4f 91       	pop	r20
    2818:	3f 91       	pop	r19
    281a:	2f 91       	pop	r18
    281c:	0f 90       	pop	r0
    281e:	0b be       	out	0x3b, r0	; 59
    2820:	0f 90       	pop	r0
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	0f 90       	pop	r0
    2826:	1f 90       	pop	r1
    2828:	18 95       	reti

0000282a <__divmodhi4>:
    282a:	97 fb       	bst	r25, 7
    282c:	07 2e       	mov	r0, r23
    282e:	16 f4       	brtc	.+4      	; 0x2834 <__divmodhi4+0xa>
    2830:	00 94       	com	r0
    2832:	06 d0       	rcall	.+12     	; 0x2840 <__divmodhi4_neg1>
    2834:	77 fd       	sbrc	r23, 7
    2836:	08 d0       	rcall	.+16     	; 0x2848 <__divmodhi4_neg2>
    2838:	5e d0       	rcall	.+188    	; 0x28f6 <__udivmodhi4>
    283a:	07 fc       	sbrc	r0, 7
    283c:	05 d0       	rcall	.+10     	; 0x2848 <__divmodhi4_neg2>
    283e:	3e f4       	brtc	.+14     	; 0x284e <__divmodhi4_exit>

00002840 <__divmodhi4_neg1>:
    2840:	90 95       	com	r25
    2842:	81 95       	neg	r24
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	08 95       	ret

00002848 <__divmodhi4_neg2>:
    2848:	70 95       	com	r23
    284a:	61 95       	neg	r22
    284c:	7f 4f       	sbci	r23, 0xFF	; 255

0000284e <__divmodhi4_exit>:
    284e:	08 95       	ret

00002850 <__udivmodsi4>:
    2850:	a1 e2       	ldi	r26, 0x21	; 33
    2852:	1a 2e       	mov	r1, r26
    2854:	aa 1b       	sub	r26, r26
    2856:	bb 1b       	sub	r27, r27
    2858:	fd 01       	movw	r30, r26
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <__udivmodsi4_ep>

0000285c <__udivmodsi4_loop>:
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	ee 1f       	adc	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	a2 17       	cp	r26, r18
    2866:	b3 07       	cpc	r27, r19
    2868:	e4 07       	cpc	r30, r20
    286a:	f5 07       	cpc	r31, r21
    286c:	20 f0       	brcs	.+8      	; 0x2876 <__udivmodsi4_ep>
    286e:	a2 1b       	sub	r26, r18
    2870:	b3 0b       	sbc	r27, r19
    2872:	e4 0b       	sbc	r30, r20
    2874:	f5 0b       	sbc	r31, r21

00002876 <__udivmodsi4_ep>:
    2876:	66 1f       	adc	r22, r22
    2878:	77 1f       	adc	r23, r23
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	1a 94       	dec	r1
    2880:	69 f7       	brne	.-38     	; 0x285c <__udivmodsi4_loop>
    2882:	60 95       	com	r22
    2884:	70 95       	com	r23
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	bd 01       	movw	r22, r26
    2890:	cf 01       	movw	r24, r30
    2892:	08 95       	ret

00002894 <__divmodsi4>:
    2894:	05 2e       	mov	r0, r21
    2896:	97 fb       	bst	r25, 7
    2898:	16 f4       	brtc	.+4      	; 0x289e <__divmodsi4+0xa>
    289a:	00 94       	com	r0
    289c:	0f d0       	rcall	.+30     	; 0x28bc <__negsi2>
    289e:	57 fd       	sbrc	r21, 7
    28a0:	05 d0       	rcall	.+10     	; 0x28ac <__divmodsi4_neg2>
    28a2:	d6 df       	rcall	.-84     	; 0x2850 <__udivmodsi4>
    28a4:	07 fc       	sbrc	r0, 7
    28a6:	02 d0       	rcall	.+4      	; 0x28ac <__divmodsi4_neg2>
    28a8:	46 f4       	brtc	.+16     	; 0x28ba <__divmodsi4_exit>
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <__negsi2>

000028ac <__divmodsi4_neg2>:
    28ac:	50 95       	com	r21
    28ae:	40 95       	com	r20
    28b0:	30 95       	com	r19
    28b2:	21 95       	neg	r18
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	4f 4f       	sbci	r20, 0xFF	; 255
    28b8:	5f 4f       	sbci	r21, 0xFF	; 255

000028ba <__divmodsi4_exit>:
    28ba:	08 95       	ret

000028bc <__negsi2>:
    28bc:	90 95       	com	r25
    28be:	80 95       	com	r24
    28c0:	70 95       	com	r23
    28c2:	61 95       	neg	r22
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255
    28c6:	8f 4f       	sbci	r24, 0xFF	; 255
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	08 95       	ret

000028cc <__tablejump2__>:
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31

000028d0 <__tablejump__>:
    28d0:	05 90       	lpm	r0, Z+
    28d2:	f4 91       	lpm	r31, Z
    28d4:	e0 2d       	mov	r30, r0
    28d6:	19 94       	eijmp

000028d8 <__umulhisi3>:
    28d8:	a2 9f       	mul	r26, r18
    28da:	b0 01       	movw	r22, r0
    28dc:	b3 9f       	mul	r27, r19
    28de:	c0 01       	movw	r24, r0
    28e0:	a3 9f       	mul	r26, r19
    28e2:	70 0d       	add	r23, r0
    28e4:	81 1d       	adc	r24, r1
    28e6:	11 24       	eor	r1, r1
    28e8:	91 1d       	adc	r25, r1
    28ea:	b2 9f       	mul	r27, r18
    28ec:	70 0d       	add	r23, r0
    28ee:	81 1d       	adc	r24, r1
    28f0:	11 24       	eor	r1, r1
    28f2:	91 1d       	adc	r25, r1
    28f4:	08 95       	ret

000028f6 <__udivmodhi4>:
    28f6:	aa 1b       	sub	r26, r26
    28f8:	bb 1b       	sub	r27, r27
    28fa:	51 e1       	ldi	r21, 0x11	; 17
    28fc:	07 c0       	rjmp	.+14     	; 0x290c <__udivmodhi4_ep>

000028fe <__udivmodhi4_loop>:
    28fe:	aa 1f       	adc	r26, r26
    2900:	bb 1f       	adc	r27, r27
    2902:	a6 17       	cp	r26, r22
    2904:	b7 07       	cpc	r27, r23
    2906:	10 f0       	brcs	.+4      	; 0x290c <__udivmodhi4_ep>
    2908:	a6 1b       	sub	r26, r22
    290a:	b7 0b       	sbc	r27, r23

0000290c <__udivmodhi4_ep>:
    290c:	88 1f       	adc	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	5a 95       	dec	r21
    2912:	a9 f7       	brne	.-22     	; 0x28fe <__udivmodhi4_loop>
    2914:	80 95       	com	r24
    2916:	90 95       	com	r25
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	08 95       	ret

0000291e <malloc>:
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	91 05       	cpc	r25, r1
    2926:	10 f4       	brcc	.+4      	; 0x292c <malloc+0xe>
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	e0 91 ec 0d 	lds	r30, 0x0DEC
    2930:	f0 91 ed 0d 	lds	r31, 0x0DED
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	30 97       	sbiw	r30, 0x00	; 0
    293e:	39 f1       	breq	.+78     	; 0x298e <malloc+0x70>
    2940:	40 81       	ld	r20, Z
    2942:	51 81       	ldd	r21, Z+1	; 0x01
    2944:	48 17       	cp	r20, r24
    2946:	59 07       	cpc	r21, r25
    2948:	b8 f0       	brcs	.+46     	; 0x2978 <malloc+0x5a>
    294a:	48 17       	cp	r20, r24
    294c:	59 07       	cpc	r21, r25
    294e:	71 f4       	brne	.+28     	; 0x296c <malloc+0x4e>
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	10 97       	sbiw	r26, 0x00	; 0
    2956:	29 f0       	breq	.+10     	; 0x2962 <malloc+0x44>
    2958:	13 96       	adiw	r26, 0x03	; 3
    295a:	9c 93       	st	X, r25
    295c:	8e 93       	st	-X, r24
    295e:	12 97       	sbiw	r26, 0x02	; 2
    2960:	2c c0       	rjmp	.+88     	; 0x29ba <malloc+0x9c>
    2962:	90 93 ed 0d 	sts	0x0DED, r25
    2966:	80 93 ec 0d 	sts	0x0DEC, r24
    296a:	27 c0       	rjmp	.+78     	; 0x29ba <malloc+0x9c>
    296c:	21 15       	cp	r18, r1
    296e:	31 05       	cpc	r19, r1
    2970:	31 f0       	breq	.+12     	; 0x297e <malloc+0x60>
    2972:	42 17       	cp	r20, r18
    2974:	53 07       	cpc	r21, r19
    2976:	18 f0       	brcs	.+6      	; 0x297e <malloc+0x60>
    2978:	a9 01       	movw	r20, r18
    297a:	db 01       	movw	r26, r22
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <malloc+0x62>
    297e:	ef 01       	movw	r28, r30
    2980:	9a 01       	movw	r18, r20
    2982:	bd 01       	movw	r22, r26
    2984:	df 01       	movw	r26, r30
    2986:	02 80       	ldd	r0, Z+2	; 0x02
    2988:	f3 81       	ldd	r31, Z+3	; 0x03
    298a:	e0 2d       	mov	r30, r0
    298c:	d7 cf       	rjmp	.-82     	; 0x293c <malloc+0x1e>
    298e:	21 15       	cp	r18, r1
    2990:	31 05       	cpc	r19, r1
    2992:	f9 f0       	breq	.+62     	; 0x29d2 <malloc+0xb4>
    2994:	28 1b       	sub	r18, r24
    2996:	39 0b       	sbc	r19, r25
    2998:	24 30       	cpi	r18, 0x04	; 4
    299a:	31 05       	cpc	r19, r1
    299c:	80 f4       	brcc	.+32     	; 0x29be <malloc+0xa0>
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	61 15       	cp	r22, r1
    29a4:	71 05       	cpc	r23, r1
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <malloc+0x92>
    29a8:	fb 01       	movw	r30, r22
    29aa:	93 83       	std	Z+3, r25	; 0x03
    29ac:	82 83       	std	Z+2, r24	; 0x02
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <malloc+0x9a>
    29b0:	90 93 ed 0d 	sts	0x0DED, r25
    29b4:	80 93 ec 0d 	sts	0x0DEC, r24
    29b8:	fe 01       	movw	r30, r28
    29ba:	32 96       	adiw	r30, 0x02	; 2
    29bc:	44 c0       	rjmp	.+136    	; 0x2a46 <malloc+0x128>
    29be:	fe 01       	movw	r30, r28
    29c0:	e2 0f       	add	r30, r18
    29c2:	f3 1f       	adc	r31, r19
    29c4:	81 93       	st	Z+, r24
    29c6:	91 93       	st	Z+, r25
    29c8:	22 50       	subi	r18, 0x02	; 2
    29ca:	31 09       	sbc	r19, r1
    29cc:	39 83       	std	Y+1, r19	; 0x01
    29ce:	28 83       	st	Y, r18
    29d0:	3a c0       	rjmp	.+116    	; 0x2a46 <malloc+0x128>
    29d2:	20 91 ea 0d 	lds	r18, 0x0DEA
    29d6:	30 91 eb 0d 	lds	r19, 0x0DEB
    29da:	23 2b       	or	r18, r19
    29dc:	41 f4       	brne	.+16     	; 0x29ee <malloc+0xd0>
    29de:	20 91 02 02 	lds	r18, 0x0202
    29e2:	30 91 03 02 	lds	r19, 0x0203
    29e6:	30 93 eb 0d 	sts	0x0DEB, r19
    29ea:	20 93 ea 0d 	sts	0x0DEA, r18
    29ee:	20 91 00 02 	lds	r18, 0x0200
    29f2:	30 91 01 02 	lds	r19, 0x0201
    29f6:	21 15       	cp	r18, r1
    29f8:	31 05       	cpc	r19, r1
    29fa:	41 f4       	brne	.+16     	; 0x2a0c <malloc+0xee>
    29fc:	2d b7       	in	r18, 0x3d	; 61
    29fe:	3e b7       	in	r19, 0x3e	; 62
    2a00:	40 91 04 02 	lds	r20, 0x0204
    2a04:	50 91 05 02 	lds	r21, 0x0205
    2a08:	24 1b       	sub	r18, r20
    2a0a:	35 0b       	sbc	r19, r21
    2a0c:	e0 91 ea 0d 	lds	r30, 0x0DEA
    2a10:	f0 91 eb 0d 	lds	r31, 0x0DEB
    2a14:	e2 17       	cp	r30, r18
    2a16:	f3 07       	cpc	r31, r19
    2a18:	a0 f4       	brcc	.+40     	; 0x2a42 <malloc+0x124>
    2a1a:	2e 1b       	sub	r18, r30
    2a1c:	3f 0b       	sbc	r19, r31
    2a1e:	28 17       	cp	r18, r24
    2a20:	39 07       	cpc	r19, r25
    2a22:	78 f0       	brcs	.+30     	; 0x2a42 <malloc+0x124>
    2a24:	ac 01       	movw	r20, r24
    2a26:	4e 5f       	subi	r20, 0xFE	; 254
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	24 17       	cp	r18, r20
    2a2c:	35 07       	cpc	r19, r21
    2a2e:	48 f0       	brcs	.+18     	; 0x2a42 <malloc+0x124>
    2a30:	4e 0f       	add	r20, r30
    2a32:	5f 1f       	adc	r21, r31
    2a34:	50 93 eb 0d 	sts	0x0DEB, r21
    2a38:	40 93 ea 0d 	sts	0x0DEA, r20
    2a3c:	81 93       	st	Z+, r24
    2a3e:	91 93       	st	Z+, r25
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <malloc+0x128>
    2a42:	e0 e0       	ldi	r30, 0x00	; 0
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	cf 01       	movw	r24, r30
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	08 95       	ret

00002a4e <free>:
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <free+0xa>
    2a56:	87 c0       	rjmp	.+270    	; 0x2b66 <free+0x118>
    2a58:	fc 01       	movw	r30, r24
    2a5a:	32 97       	sbiw	r30, 0x02	; 2
    2a5c:	13 82       	std	Z+3, r1	; 0x03
    2a5e:	12 82       	std	Z+2, r1	; 0x02
    2a60:	c0 91 ec 0d 	lds	r28, 0x0DEC
    2a64:	d0 91 ed 0d 	lds	r29, 0x0DED
    2a68:	20 97       	sbiw	r28, 0x00	; 0
    2a6a:	81 f4       	brne	.+32     	; 0x2a8c <free+0x3e>
    2a6c:	20 81       	ld	r18, Z
    2a6e:	31 81       	ldd	r19, Z+1	; 0x01
    2a70:	28 0f       	add	r18, r24
    2a72:	39 1f       	adc	r19, r25
    2a74:	80 91 ea 0d 	lds	r24, 0x0DEA
    2a78:	90 91 eb 0d 	lds	r25, 0x0DEB
    2a7c:	82 17       	cp	r24, r18
    2a7e:	93 07       	cpc	r25, r19
    2a80:	79 f5       	brne	.+94     	; 0x2ae0 <free+0x92>
    2a82:	f0 93 eb 0d 	sts	0x0DEB, r31
    2a86:	e0 93 ea 0d 	sts	0x0DEA, r30
    2a8a:	6d c0       	rjmp	.+218    	; 0x2b66 <free+0x118>
    2a8c:	de 01       	movw	r26, r28
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	ae 17       	cp	r26, r30
    2a94:	bf 07       	cpc	r27, r31
    2a96:	50 f4       	brcc	.+20     	; 0x2aac <free+0x5e>
    2a98:	12 96       	adiw	r26, 0x02	; 2
    2a9a:	4d 91       	ld	r20, X+
    2a9c:	5c 91       	ld	r21, X
    2a9e:	13 97       	sbiw	r26, 0x03	; 3
    2aa0:	9d 01       	movw	r18, r26
    2aa2:	41 15       	cp	r20, r1
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	09 f1       	breq	.+66     	; 0x2aea <free+0x9c>
    2aa8:	da 01       	movw	r26, r20
    2aaa:	f3 cf       	rjmp	.-26     	; 0x2a92 <free+0x44>
    2aac:	b3 83       	std	Z+3, r27	; 0x03
    2aae:	a2 83       	std	Z+2, r26	; 0x02
    2ab0:	40 81       	ld	r20, Z
    2ab2:	51 81       	ldd	r21, Z+1	; 0x01
    2ab4:	84 0f       	add	r24, r20
    2ab6:	95 1f       	adc	r25, r21
    2ab8:	8a 17       	cp	r24, r26
    2aba:	9b 07       	cpc	r25, r27
    2abc:	71 f4       	brne	.+28     	; 0x2ada <free+0x8c>
    2abe:	8d 91       	ld	r24, X+
    2ac0:	9c 91       	ld	r25, X
    2ac2:	11 97       	sbiw	r26, 0x01	; 1
    2ac4:	84 0f       	add	r24, r20
    2ac6:	95 1f       	adc	r25, r21
    2ac8:	02 96       	adiw	r24, 0x02	; 2
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	80 83       	st	Z, r24
    2ace:	12 96       	adiw	r26, 0x02	; 2
    2ad0:	8d 91       	ld	r24, X+
    2ad2:	9c 91       	ld	r25, X
    2ad4:	13 97       	sbiw	r26, 0x03	; 3
    2ad6:	93 83       	std	Z+3, r25	; 0x03
    2ad8:	82 83       	std	Z+2, r24	; 0x02
    2ada:	21 15       	cp	r18, r1
    2adc:	31 05       	cpc	r19, r1
    2ade:	29 f4       	brne	.+10     	; 0x2aea <free+0x9c>
    2ae0:	f0 93 ed 0d 	sts	0x0DED, r31
    2ae4:	e0 93 ec 0d 	sts	0x0DEC, r30
    2ae8:	3e c0       	rjmp	.+124    	; 0x2b66 <free+0x118>
    2aea:	d9 01       	movw	r26, r18
    2aec:	13 96       	adiw	r26, 0x03	; 3
    2aee:	fc 93       	st	X, r31
    2af0:	ee 93       	st	-X, r30
    2af2:	12 97       	sbiw	r26, 0x02	; 2
    2af4:	4d 91       	ld	r20, X+
    2af6:	5d 91       	ld	r21, X+
    2af8:	a4 0f       	add	r26, r20
    2afa:	b5 1f       	adc	r27, r21
    2afc:	ea 17       	cp	r30, r26
    2afe:	fb 07       	cpc	r31, r27
    2b00:	79 f4       	brne	.+30     	; 0x2b20 <free+0xd2>
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	84 0f       	add	r24, r20
    2b08:	95 1f       	adc	r25, r21
    2b0a:	02 96       	adiw	r24, 0x02	; 2
    2b0c:	d9 01       	movw	r26, r18
    2b0e:	11 96       	adiw	r26, 0x01	; 1
    2b10:	9c 93       	st	X, r25
    2b12:	8e 93       	st	-X, r24
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	13 96       	adiw	r26, 0x03	; 3
    2b1a:	9c 93       	st	X, r25
    2b1c:	8e 93       	st	-X, r24
    2b1e:	12 97       	sbiw	r26, 0x02	; 2
    2b20:	e0 e0       	ldi	r30, 0x00	; 0
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	19 f0       	breq	.+6      	; 0x2b32 <free+0xe4>
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ec 01       	movw	r28, r24
    2b30:	f9 cf       	rjmp	.-14     	; 0x2b24 <free+0xd6>
    2b32:	ce 01       	movw	r24, r28
    2b34:	02 96       	adiw	r24, 0x02	; 2
    2b36:	28 81       	ld	r18, Y
    2b38:	39 81       	ldd	r19, Y+1	; 0x01
    2b3a:	82 0f       	add	r24, r18
    2b3c:	93 1f       	adc	r25, r19
    2b3e:	20 91 ea 0d 	lds	r18, 0x0DEA
    2b42:	30 91 eb 0d 	lds	r19, 0x0DEB
    2b46:	28 17       	cp	r18, r24
    2b48:	39 07       	cpc	r19, r25
    2b4a:	69 f4       	brne	.+26     	; 0x2b66 <free+0x118>
    2b4c:	30 97       	sbiw	r30, 0x00	; 0
    2b4e:	29 f4       	brne	.+10     	; 0x2b5a <free+0x10c>
    2b50:	10 92 ed 0d 	sts	0x0DED, r1
    2b54:	10 92 ec 0d 	sts	0x0DEC, r1
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <free+0x110>
    2b5a:	13 82       	std	Z+3, r1	; 0x03
    2b5c:	12 82       	std	Z+2, r1	; 0x02
    2b5e:	d0 93 eb 0d 	sts	0x0DEB, r29
    2b62:	c0 93 ea 0d 	sts	0x0DEA, r28
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <memcpy>:
    2b6c:	fb 01       	movw	r30, r22
    2b6e:	dc 01       	movw	r26, r24
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <memcpy+0xa>
    2b72:	01 90       	ld	r0, Z+
    2b74:	0d 92       	st	X+, r0
    2b76:	41 50       	subi	r20, 0x01	; 1
    2b78:	50 40       	sbci	r21, 0x00	; 0
    2b7a:	d8 f7       	brcc	.-10     	; 0x2b72 <memcpy+0x6>
    2b7c:	08 95       	ret

00002b7e <sprintf>:
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	2e 97       	sbiw	r28, 0x0e	; 14
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	0e 89       	ldd	r16, Y+22	; 0x16
    2b98:	1f 89       	ldd	r17, Y+23	; 0x17
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	8c 83       	std	Y+4, r24	; 0x04
    2b9e:	1a 83       	std	Y+2, r17	; 0x02
    2ba0:	09 83       	std	Y+1, r16	; 0x01
    2ba2:	8f ef       	ldi	r24, 0xFF	; 255
    2ba4:	9f e7       	ldi	r25, 0x7F	; 127
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	ae 01       	movw	r20, r28
    2bac:	46 5e       	subi	r20, 0xE6	; 230
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	68 8d       	ldd	r22, Y+24	; 0x18
    2bb2:	79 8d       	ldd	r23, Y+25	; 0x19
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	10 d0       	rcall	.+32     	; 0x2bda <vfprintf>
    2bba:	ef 81       	ldd	r30, Y+7	; 0x07
    2bbc:	f8 85       	ldd	r31, Y+8	; 0x08
    2bbe:	e0 0f       	add	r30, r16
    2bc0:	f1 1f       	adc	r31, r17
    2bc2:	10 82       	st	Z, r1
    2bc4:	2e 96       	adiw	r28, 0x0e	; 14
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	08 95       	ret

00002bda <vfprintf>:
    2bda:	2f 92       	push	r2
    2bdc:	3f 92       	push	r3
    2bde:	4f 92       	push	r4
    2be0:	5f 92       	push	r5
    2be2:	6f 92       	push	r6
    2be4:	7f 92       	push	r7
    2be6:	8f 92       	push	r8
    2be8:	9f 92       	push	r9
    2bea:	af 92       	push	r10
    2bec:	bf 92       	push	r11
    2bee:	cf 92       	push	r12
    2bf0:	df 92       	push	r13
    2bf2:	ef 92       	push	r14
    2bf4:	ff 92       	push	r15
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	2c 97       	sbiw	r28, 0x0c	; 12
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	7c 01       	movw	r14, r24
    2c10:	6b 01       	movw	r12, r22
    2c12:	8a 01       	movw	r16, r20
    2c14:	fc 01       	movw	r30, r24
    2c16:	17 82       	std	Z+7, r1	; 0x07
    2c18:	16 82       	std	Z+6, r1	; 0x06
    2c1a:	83 81       	ldd	r24, Z+3	; 0x03
    2c1c:	81 ff       	sbrs	r24, 1
    2c1e:	b0 c1       	rjmp	.+864    	; 0x2f80 <vfprintf+0x3a6>
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	4c 01       	movw	r8, r24
    2c26:	f7 01       	movw	r30, r14
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	f6 01       	movw	r30, r12
    2c2c:	93 fd       	sbrc	r25, 3
    2c2e:	85 91       	lpm	r24, Z+
    2c30:	93 ff       	sbrs	r25, 3
    2c32:	81 91       	ld	r24, Z+
    2c34:	6f 01       	movw	r12, r30
    2c36:	88 23       	and	r24, r24
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <vfprintf+0x62>
    2c3a:	9e c1       	rjmp	.+828    	; 0x2f78 <vfprintf+0x39e>
    2c3c:	85 32       	cpi	r24, 0x25	; 37
    2c3e:	39 f4       	brne	.+14     	; 0x2c4e <vfprintf+0x74>
    2c40:	93 fd       	sbrc	r25, 3
    2c42:	85 91       	lpm	r24, Z+
    2c44:	93 ff       	sbrs	r25, 3
    2c46:	81 91       	ld	r24, Z+
    2c48:	6f 01       	movw	r12, r30
    2c4a:	85 32       	cpi	r24, 0x25	; 37
    2c4c:	21 f4       	brne	.+8      	; 0x2c56 <vfprintf+0x7c>
    2c4e:	b7 01       	movw	r22, r14
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	c7 d1       	rcall	.+910    	; 0x2fe2 <fputc>
    2c54:	e8 cf       	rjmp	.-48     	; 0x2c26 <vfprintf+0x4c>
    2c56:	51 2c       	mov	r5, r1
    2c58:	31 2c       	mov	r3, r1
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	20 32       	cpi	r18, 0x20	; 32
    2c5e:	a0 f4       	brcc	.+40     	; 0x2c88 <vfprintf+0xae>
    2c60:	8b 32       	cpi	r24, 0x2B	; 43
    2c62:	69 f0       	breq	.+26     	; 0x2c7e <vfprintf+0xa4>
    2c64:	30 f4       	brcc	.+12     	; 0x2c72 <vfprintf+0x98>
    2c66:	80 32       	cpi	r24, 0x20	; 32
    2c68:	59 f0       	breq	.+22     	; 0x2c80 <vfprintf+0xa6>
    2c6a:	83 32       	cpi	r24, 0x23	; 35
    2c6c:	69 f4       	brne	.+26     	; 0x2c88 <vfprintf+0xae>
    2c6e:	20 61       	ori	r18, 0x10	; 16
    2c70:	2c c0       	rjmp	.+88     	; 0x2cca <vfprintf+0xf0>
    2c72:	8d 32       	cpi	r24, 0x2D	; 45
    2c74:	39 f0       	breq	.+14     	; 0x2c84 <vfprintf+0xaa>
    2c76:	80 33       	cpi	r24, 0x30	; 48
    2c78:	39 f4       	brne	.+14     	; 0x2c88 <vfprintf+0xae>
    2c7a:	21 60       	ori	r18, 0x01	; 1
    2c7c:	26 c0       	rjmp	.+76     	; 0x2cca <vfprintf+0xf0>
    2c7e:	22 60       	ori	r18, 0x02	; 2
    2c80:	24 60       	ori	r18, 0x04	; 4
    2c82:	23 c0       	rjmp	.+70     	; 0x2cca <vfprintf+0xf0>
    2c84:	28 60       	ori	r18, 0x08	; 8
    2c86:	21 c0       	rjmp	.+66     	; 0x2cca <vfprintf+0xf0>
    2c88:	27 fd       	sbrc	r18, 7
    2c8a:	27 c0       	rjmp	.+78     	; 0x2cda <vfprintf+0x100>
    2c8c:	30 ed       	ldi	r19, 0xD0	; 208
    2c8e:	38 0f       	add	r19, r24
    2c90:	3a 30       	cpi	r19, 0x0A	; 10
    2c92:	78 f4       	brcc	.+30     	; 0x2cb2 <vfprintf+0xd8>
    2c94:	26 ff       	sbrs	r18, 6
    2c96:	06 c0       	rjmp	.+12     	; 0x2ca4 <vfprintf+0xca>
    2c98:	fa e0       	ldi	r31, 0x0A	; 10
    2c9a:	5f 9e       	mul	r5, r31
    2c9c:	30 0d       	add	r19, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	53 2e       	mov	r5, r19
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <vfprintf+0xf0>
    2ca4:	8a e0       	ldi	r24, 0x0A	; 10
    2ca6:	38 9e       	mul	r3, r24
    2ca8:	30 0d       	add	r19, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	33 2e       	mov	r3, r19
    2cae:	20 62       	ori	r18, 0x20	; 32
    2cb0:	0c c0       	rjmp	.+24     	; 0x2cca <vfprintf+0xf0>
    2cb2:	8e 32       	cpi	r24, 0x2E	; 46
    2cb4:	21 f4       	brne	.+8      	; 0x2cbe <vfprintf+0xe4>
    2cb6:	26 fd       	sbrc	r18, 6
    2cb8:	5f c1       	rjmp	.+702    	; 0x2f78 <vfprintf+0x39e>
    2cba:	20 64       	ori	r18, 0x40	; 64
    2cbc:	06 c0       	rjmp	.+12     	; 0x2cca <vfprintf+0xf0>
    2cbe:	8c 36       	cpi	r24, 0x6C	; 108
    2cc0:	11 f4       	brne	.+4      	; 0x2cc6 <vfprintf+0xec>
    2cc2:	20 68       	ori	r18, 0x80	; 128
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <vfprintf+0xf0>
    2cc6:	88 36       	cpi	r24, 0x68	; 104
    2cc8:	41 f4       	brne	.+16     	; 0x2cda <vfprintf+0x100>
    2cca:	f6 01       	movw	r30, r12
    2ccc:	93 fd       	sbrc	r25, 3
    2cce:	85 91       	lpm	r24, Z+
    2cd0:	93 ff       	sbrs	r25, 3
    2cd2:	81 91       	ld	r24, Z+
    2cd4:	6f 01       	movw	r12, r30
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	c1 cf       	rjmp	.-126    	; 0x2c5c <vfprintf+0x82>
    2cda:	98 2f       	mov	r25, r24
    2cdc:	9f 7d       	andi	r25, 0xDF	; 223
    2cde:	95 54       	subi	r25, 0x45	; 69
    2ce0:	93 30       	cpi	r25, 0x03	; 3
    2ce2:	28 f4       	brcc	.+10     	; 0x2cee <vfprintf+0x114>
    2ce4:	0c 5f       	subi	r16, 0xFC	; 252
    2ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce8:	ff e3       	ldi	r31, 0x3F	; 63
    2cea:	f9 83       	std	Y+1, r31	; 0x01
    2cec:	0d c0       	rjmp	.+26     	; 0x2d08 <vfprintf+0x12e>
    2cee:	83 36       	cpi	r24, 0x63	; 99
    2cf0:	31 f0       	breq	.+12     	; 0x2cfe <vfprintf+0x124>
    2cf2:	83 37       	cpi	r24, 0x73	; 115
    2cf4:	71 f0       	breq	.+28     	; 0x2d12 <vfprintf+0x138>
    2cf6:	83 35       	cpi	r24, 0x53	; 83
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <vfprintf+0x122>
    2cfa:	57 c0       	rjmp	.+174    	; 0x2daa <vfprintf+0x1d0>
    2cfc:	21 c0       	rjmp	.+66     	; 0x2d40 <vfprintf+0x166>
    2cfe:	f8 01       	movw	r30, r16
    2d00:	80 81       	ld	r24, Z
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	0e 5f       	subi	r16, 0xFE	; 254
    2d06:	1f 4f       	sbci	r17, 0xFF	; 255
    2d08:	44 24       	eor	r4, r4
    2d0a:	43 94       	inc	r4
    2d0c:	51 2c       	mov	r5, r1
    2d0e:	54 01       	movw	r10, r8
    2d10:	14 c0       	rjmp	.+40     	; 0x2d3a <vfprintf+0x160>
    2d12:	38 01       	movw	r6, r16
    2d14:	f2 e0       	ldi	r31, 0x02	; 2
    2d16:	6f 0e       	add	r6, r31
    2d18:	71 1c       	adc	r7, r1
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	a0 80       	ld	r10, Z
    2d1e:	b1 80       	ldd	r11, Z+1	; 0x01
    2d20:	26 ff       	sbrs	r18, 6
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <vfprintf+0x150>
    2d24:	65 2d       	mov	r22, r5
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <vfprintf+0x154>
    2d2a:	6f ef       	ldi	r22, 0xFF	; 255
    2d2c:	7f ef       	ldi	r23, 0xFF	; 255
    2d2e:	c5 01       	movw	r24, r10
    2d30:	2c 87       	std	Y+12, r18	; 0x0c
    2d32:	4c d1       	rcall	.+664    	; 0x2fcc <strnlen>
    2d34:	2c 01       	movw	r4, r24
    2d36:	83 01       	movw	r16, r6
    2d38:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d3a:	2f 77       	andi	r18, 0x7F	; 127
    2d3c:	22 2e       	mov	r2, r18
    2d3e:	16 c0       	rjmp	.+44     	; 0x2d6c <vfprintf+0x192>
    2d40:	38 01       	movw	r6, r16
    2d42:	f2 e0       	ldi	r31, 0x02	; 2
    2d44:	6f 0e       	add	r6, r31
    2d46:	71 1c       	adc	r7, r1
    2d48:	f8 01       	movw	r30, r16
    2d4a:	a0 80       	ld	r10, Z
    2d4c:	b1 80       	ldd	r11, Z+1	; 0x01
    2d4e:	26 ff       	sbrs	r18, 6
    2d50:	03 c0       	rjmp	.+6      	; 0x2d58 <vfprintf+0x17e>
    2d52:	65 2d       	mov	r22, r5
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <vfprintf+0x182>
    2d58:	6f ef       	ldi	r22, 0xFF	; 255
    2d5a:	7f ef       	ldi	r23, 0xFF	; 255
    2d5c:	c5 01       	movw	r24, r10
    2d5e:	2c 87       	std	Y+12, r18	; 0x0c
    2d60:	2a d1       	rcall	.+596    	; 0x2fb6 <strnlen_P>
    2d62:	2c 01       	movw	r4, r24
    2d64:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d66:	20 68       	ori	r18, 0x80	; 128
    2d68:	22 2e       	mov	r2, r18
    2d6a:	83 01       	movw	r16, r6
    2d6c:	23 fc       	sbrc	r2, 3
    2d6e:	19 c0       	rjmp	.+50     	; 0x2da2 <vfprintf+0x1c8>
    2d70:	83 2d       	mov	r24, r3
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	48 16       	cp	r4, r24
    2d76:	59 06       	cpc	r5, r25
    2d78:	a0 f4       	brcc	.+40     	; 0x2da2 <vfprintf+0x1c8>
    2d7a:	b7 01       	movw	r22, r14
    2d7c:	80 e2       	ldi	r24, 0x20	; 32
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	30 d1       	rcall	.+608    	; 0x2fe2 <fputc>
    2d82:	3a 94       	dec	r3
    2d84:	f5 cf       	rjmp	.-22     	; 0x2d70 <vfprintf+0x196>
    2d86:	f5 01       	movw	r30, r10
    2d88:	27 fc       	sbrc	r2, 7
    2d8a:	85 91       	lpm	r24, Z+
    2d8c:	27 fe       	sbrs	r2, 7
    2d8e:	81 91       	ld	r24, Z+
    2d90:	5f 01       	movw	r10, r30
    2d92:	b7 01       	movw	r22, r14
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	25 d1       	rcall	.+586    	; 0x2fe2 <fputc>
    2d98:	31 10       	cpse	r3, r1
    2d9a:	3a 94       	dec	r3
    2d9c:	f1 e0       	ldi	r31, 0x01	; 1
    2d9e:	4f 1a       	sub	r4, r31
    2da0:	51 08       	sbc	r5, r1
    2da2:	41 14       	cp	r4, r1
    2da4:	51 04       	cpc	r5, r1
    2da6:	79 f7       	brne	.-34     	; 0x2d86 <vfprintf+0x1ac>
    2da8:	de c0       	rjmp	.+444    	; 0x2f66 <vfprintf+0x38c>
    2daa:	84 36       	cpi	r24, 0x64	; 100
    2dac:	11 f0       	breq	.+4      	; 0x2db2 <vfprintf+0x1d8>
    2dae:	89 36       	cpi	r24, 0x69	; 105
    2db0:	31 f5       	brne	.+76     	; 0x2dfe <vfprintf+0x224>
    2db2:	f8 01       	movw	r30, r16
    2db4:	27 ff       	sbrs	r18, 7
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <vfprintf+0x1ec>
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	0c 5f       	subi	r16, 0xFC	; 252
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	08 c0       	rjmp	.+16     	; 0x2dd6 <vfprintf+0x1fc>
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	88 27       	eor	r24, r24
    2dcc:	77 fd       	sbrc	r23, 7
    2dce:	80 95       	com	r24
    2dd0:	98 2f       	mov	r25, r24
    2dd2:	0e 5f       	subi	r16, 0xFE	; 254
    2dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd6:	2f 76       	andi	r18, 0x6F	; 111
    2dd8:	b2 2e       	mov	r11, r18
    2dda:	97 ff       	sbrs	r25, 7
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <vfprintf+0x216>
    2dde:	90 95       	com	r25
    2de0:	80 95       	com	r24
    2de2:	70 95       	com	r23
    2de4:	61 95       	neg	r22
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	20 68       	ori	r18, 0x80	; 128
    2dee:	b2 2e       	mov	r11, r18
    2df0:	2a e0       	ldi	r18, 0x0A	; 10
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	a4 01       	movw	r20, r8
    2df6:	27 d1       	rcall	.+590    	; 0x3046 <__ultoa_invert>
    2df8:	a8 2e       	mov	r10, r24
    2dfa:	a8 18       	sub	r10, r8
    2dfc:	43 c0       	rjmp	.+134    	; 0x2e84 <vfprintf+0x2aa>
    2dfe:	85 37       	cpi	r24, 0x75	; 117
    2e00:	29 f4       	brne	.+10     	; 0x2e0c <vfprintf+0x232>
    2e02:	2f 7e       	andi	r18, 0xEF	; 239
    2e04:	b2 2e       	mov	r11, r18
    2e06:	2a e0       	ldi	r18, 0x0A	; 10
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	25 c0       	rjmp	.+74     	; 0x2e56 <vfprintf+0x27c>
    2e0c:	f2 2f       	mov	r31, r18
    2e0e:	f9 7f       	andi	r31, 0xF9	; 249
    2e10:	bf 2e       	mov	r11, r31
    2e12:	8f 36       	cpi	r24, 0x6F	; 111
    2e14:	c1 f0       	breq	.+48     	; 0x2e46 <vfprintf+0x26c>
    2e16:	18 f4       	brcc	.+6      	; 0x2e1e <vfprintf+0x244>
    2e18:	88 35       	cpi	r24, 0x58	; 88
    2e1a:	79 f0       	breq	.+30     	; 0x2e3a <vfprintf+0x260>
    2e1c:	ad c0       	rjmp	.+346    	; 0x2f78 <vfprintf+0x39e>
    2e1e:	80 37       	cpi	r24, 0x70	; 112
    2e20:	19 f0       	breq	.+6      	; 0x2e28 <vfprintf+0x24e>
    2e22:	88 37       	cpi	r24, 0x78	; 120
    2e24:	21 f0       	breq	.+8      	; 0x2e2e <vfprintf+0x254>
    2e26:	a8 c0       	rjmp	.+336    	; 0x2f78 <vfprintf+0x39e>
    2e28:	2f 2f       	mov	r18, r31
    2e2a:	20 61       	ori	r18, 0x10	; 16
    2e2c:	b2 2e       	mov	r11, r18
    2e2e:	b4 fe       	sbrs	r11, 4
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <vfprintf+0x272>
    2e32:	8b 2d       	mov	r24, r11
    2e34:	84 60       	ori	r24, 0x04	; 4
    2e36:	b8 2e       	mov	r11, r24
    2e38:	09 c0       	rjmp	.+18     	; 0x2e4c <vfprintf+0x272>
    2e3a:	24 ff       	sbrs	r18, 4
    2e3c:	0a c0       	rjmp	.+20     	; 0x2e52 <vfprintf+0x278>
    2e3e:	9f 2f       	mov	r25, r31
    2e40:	96 60       	ori	r25, 0x06	; 6
    2e42:	b9 2e       	mov	r11, r25
    2e44:	06 c0       	rjmp	.+12     	; 0x2e52 <vfprintf+0x278>
    2e46:	28 e0       	ldi	r18, 0x08	; 8
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	05 c0       	rjmp	.+10     	; 0x2e56 <vfprintf+0x27c>
    2e4c:	20 e1       	ldi	r18, 0x10	; 16
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <vfprintf+0x27c>
    2e52:	20 e1       	ldi	r18, 0x10	; 16
    2e54:	32 e0       	ldi	r19, 0x02	; 2
    2e56:	f8 01       	movw	r30, r16
    2e58:	b7 fe       	sbrs	r11, 7
    2e5a:	07 c0       	rjmp	.+14     	; 0x2e6a <vfprintf+0x290>
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	0c 5f       	subi	r16, 0xFC	; 252
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	06 c0       	rjmp	.+12     	; 0x2e76 <vfprintf+0x29c>
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 5f       	subi	r16, 0xFE	; 254
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	a4 01       	movw	r20, r8
    2e78:	e6 d0       	rcall	.+460    	; 0x3046 <__ultoa_invert>
    2e7a:	a8 2e       	mov	r10, r24
    2e7c:	a8 18       	sub	r10, r8
    2e7e:	fb 2d       	mov	r31, r11
    2e80:	ff 77       	andi	r31, 0x7F	; 127
    2e82:	bf 2e       	mov	r11, r31
    2e84:	b6 fe       	sbrs	r11, 6
    2e86:	0b c0       	rjmp	.+22     	; 0x2e9e <vfprintf+0x2c4>
    2e88:	2b 2d       	mov	r18, r11
    2e8a:	2e 7f       	andi	r18, 0xFE	; 254
    2e8c:	a5 14       	cp	r10, r5
    2e8e:	50 f4       	brcc	.+20     	; 0x2ea4 <vfprintf+0x2ca>
    2e90:	b4 fe       	sbrs	r11, 4
    2e92:	0a c0       	rjmp	.+20     	; 0x2ea8 <vfprintf+0x2ce>
    2e94:	b2 fc       	sbrc	r11, 2
    2e96:	08 c0       	rjmp	.+16     	; 0x2ea8 <vfprintf+0x2ce>
    2e98:	2b 2d       	mov	r18, r11
    2e9a:	2e 7e       	andi	r18, 0xEE	; 238
    2e9c:	05 c0       	rjmp	.+10     	; 0x2ea8 <vfprintf+0x2ce>
    2e9e:	7a 2c       	mov	r7, r10
    2ea0:	2b 2d       	mov	r18, r11
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <vfprintf+0x2d0>
    2ea4:	7a 2c       	mov	r7, r10
    2ea6:	01 c0       	rjmp	.+2      	; 0x2eaa <vfprintf+0x2d0>
    2ea8:	75 2c       	mov	r7, r5
    2eaa:	24 ff       	sbrs	r18, 4
    2eac:	0d c0       	rjmp	.+26     	; 0x2ec8 <vfprintf+0x2ee>
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ea 0d       	add	r30, r10
    2eb2:	f1 1d       	adc	r31, r1
    2eb4:	80 81       	ld	r24, Z
    2eb6:	80 33       	cpi	r24, 0x30	; 48
    2eb8:	11 f4       	brne	.+4      	; 0x2ebe <vfprintf+0x2e4>
    2eba:	29 7e       	andi	r18, 0xE9	; 233
    2ebc:	09 c0       	rjmp	.+18     	; 0x2ed0 <vfprintf+0x2f6>
    2ebe:	22 ff       	sbrs	r18, 2
    2ec0:	06 c0       	rjmp	.+12     	; 0x2ece <vfprintf+0x2f4>
    2ec2:	73 94       	inc	r7
    2ec4:	73 94       	inc	r7
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <vfprintf+0x2f6>
    2ec8:	82 2f       	mov	r24, r18
    2eca:	86 78       	andi	r24, 0x86	; 134
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <vfprintf+0x2f6>
    2ece:	73 94       	inc	r7
    2ed0:	23 fd       	sbrc	r18, 3
    2ed2:	12 c0       	rjmp	.+36     	; 0x2ef8 <vfprintf+0x31e>
    2ed4:	20 ff       	sbrs	r18, 0
    2ed6:	06 c0       	rjmp	.+12     	; 0x2ee4 <vfprintf+0x30a>
    2ed8:	5a 2c       	mov	r5, r10
    2eda:	73 14       	cp	r7, r3
    2edc:	18 f4       	brcc	.+6      	; 0x2ee4 <vfprintf+0x30a>
    2ede:	53 0c       	add	r5, r3
    2ee0:	57 18       	sub	r5, r7
    2ee2:	73 2c       	mov	r7, r3
    2ee4:	73 14       	cp	r7, r3
    2ee6:	60 f4       	brcc	.+24     	; 0x2f00 <vfprintf+0x326>
    2ee8:	b7 01       	movw	r22, r14
    2eea:	80 e2       	ldi	r24, 0x20	; 32
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	2c 87       	std	Y+12, r18	; 0x0c
    2ef0:	78 d0       	rcall	.+240    	; 0x2fe2 <fputc>
    2ef2:	73 94       	inc	r7
    2ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ef6:	f6 cf       	rjmp	.-20     	; 0x2ee4 <vfprintf+0x30a>
    2ef8:	73 14       	cp	r7, r3
    2efa:	10 f4       	brcc	.+4      	; 0x2f00 <vfprintf+0x326>
    2efc:	37 18       	sub	r3, r7
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <vfprintf+0x328>
    2f00:	31 2c       	mov	r3, r1
    2f02:	24 ff       	sbrs	r18, 4
    2f04:	11 c0       	rjmp	.+34     	; 0x2f28 <vfprintf+0x34e>
    2f06:	b7 01       	movw	r22, r14
    2f08:	80 e3       	ldi	r24, 0x30	; 48
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	2c 87       	std	Y+12, r18	; 0x0c
    2f0e:	69 d0       	rcall	.+210    	; 0x2fe2 <fputc>
    2f10:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f12:	22 ff       	sbrs	r18, 2
    2f14:	16 c0       	rjmp	.+44     	; 0x2f42 <vfprintf+0x368>
    2f16:	21 ff       	sbrs	r18, 1
    2f18:	03 c0       	rjmp	.+6      	; 0x2f20 <vfprintf+0x346>
    2f1a:	88 e5       	ldi	r24, 0x58	; 88
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <vfprintf+0x34a>
    2f20:	88 e7       	ldi	r24, 0x78	; 120
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	b7 01       	movw	r22, r14
    2f26:	0c c0       	rjmp	.+24     	; 0x2f40 <vfprintf+0x366>
    2f28:	82 2f       	mov	r24, r18
    2f2a:	86 78       	andi	r24, 0x86	; 134
    2f2c:	51 f0       	breq	.+20     	; 0x2f42 <vfprintf+0x368>
    2f2e:	21 fd       	sbrc	r18, 1
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <vfprintf+0x35c>
    2f32:	80 e2       	ldi	r24, 0x20	; 32
    2f34:	01 c0       	rjmp	.+2      	; 0x2f38 <vfprintf+0x35e>
    2f36:	8b e2       	ldi	r24, 0x2B	; 43
    2f38:	27 fd       	sbrc	r18, 7
    2f3a:	8d e2       	ldi	r24, 0x2D	; 45
    2f3c:	b7 01       	movw	r22, r14
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	50 d0       	rcall	.+160    	; 0x2fe2 <fputc>
    2f42:	a5 14       	cp	r10, r5
    2f44:	30 f4       	brcc	.+12     	; 0x2f52 <vfprintf+0x378>
    2f46:	b7 01       	movw	r22, r14
    2f48:	80 e3       	ldi	r24, 0x30	; 48
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	4a d0       	rcall	.+148    	; 0x2fe2 <fputc>
    2f4e:	5a 94       	dec	r5
    2f50:	f8 cf       	rjmp	.-16     	; 0x2f42 <vfprintf+0x368>
    2f52:	aa 94       	dec	r10
    2f54:	f4 01       	movw	r30, r8
    2f56:	ea 0d       	add	r30, r10
    2f58:	f1 1d       	adc	r31, r1
    2f5a:	80 81       	ld	r24, Z
    2f5c:	b7 01       	movw	r22, r14
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	40 d0       	rcall	.+128    	; 0x2fe2 <fputc>
    2f62:	a1 10       	cpse	r10, r1
    2f64:	f6 cf       	rjmp	.-20     	; 0x2f52 <vfprintf+0x378>
    2f66:	33 20       	and	r3, r3
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <vfprintf+0x392>
    2f6a:	5d ce       	rjmp	.-838    	; 0x2c26 <vfprintf+0x4c>
    2f6c:	b7 01       	movw	r22, r14
    2f6e:	80 e2       	ldi	r24, 0x20	; 32
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	37 d0       	rcall	.+110    	; 0x2fe2 <fputc>
    2f74:	3a 94       	dec	r3
    2f76:	f7 cf       	rjmp	.-18     	; 0x2f66 <vfprintf+0x38c>
    2f78:	f7 01       	movw	r30, r14
    2f7a:	86 81       	ldd	r24, Z+6	; 0x06
    2f7c:	97 81       	ldd	r25, Z+7	; 0x07
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <vfprintf+0x3aa>
    2f80:	8f ef       	ldi	r24, 0xFF	; 255
    2f82:	9f ef       	ldi	r25, 0xFF	; 255
    2f84:	2c 96       	adiw	r28, 0x0c	; 12
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	df 90       	pop	r13
    2f9e:	cf 90       	pop	r12
    2fa0:	bf 90       	pop	r11
    2fa2:	af 90       	pop	r10
    2fa4:	9f 90       	pop	r9
    2fa6:	8f 90       	pop	r8
    2fa8:	7f 90       	pop	r7
    2faa:	6f 90       	pop	r6
    2fac:	5f 90       	pop	r5
    2fae:	4f 90       	pop	r4
    2fb0:	3f 90       	pop	r3
    2fb2:	2f 90       	pop	r2
    2fb4:	08 95       	ret

00002fb6 <strnlen_P>:
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	05 90       	lpm	r0, Z+
    2fba:	61 50       	subi	r22, 0x01	; 1
    2fbc:	70 40       	sbci	r23, 0x00	; 0
    2fbe:	01 10       	cpse	r0, r1
    2fc0:	d8 f7       	brcc	.-10     	; 0x2fb8 <strnlen_P+0x2>
    2fc2:	80 95       	com	r24
    2fc4:	90 95       	com	r25
    2fc6:	8e 0f       	add	r24, r30
    2fc8:	9f 1f       	adc	r25, r31
    2fca:	08 95       	ret

00002fcc <strnlen>:
    2fcc:	fc 01       	movw	r30, r24
    2fce:	61 50       	subi	r22, 0x01	; 1
    2fd0:	70 40       	sbci	r23, 0x00	; 0
    2fd2:	01 90       	ld	r0, Z+
    2fd4:	01 10       	cpse	r0, r1
    2fd6:	d8 f7       	brcc	.-10     	; 0x2fce <strnlen+0x2>
    2fd8:	80 95       	com	r24
    2fda:	90 95       	com	r25
    2fdc:	8e 0f       	add	r24, r30
    2fde:	9f 1f       	adc	r25, r31
    2fe0:	08 95       	ret

00002fe2 <fputc>:
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	18 2f       	mov	r17, r24
    2fec:	09 2f       	mov	r16, r25
    2fee:	eb 01       	movw	r28, r22
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	81 fd       	sbrc	r24, 1
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <fputc+0x1a>
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	9f ef       	ldi	r25, 0xFF	; 255
    2ffa:	20 c0       	rjmp	.+64     	; 0x303c <fputc+0x5a>
    2ffc:	82 ff       	sbrs	r24, 2
    2ffe:	10 c0       	rjmp	.+32     	; 0x3020 <fputc+0x3e>
    3000:	4e 81       	ldd	r20, Y+6	; 0x06
    3002:	5f 81       	ldd	r21, Y+7	; 0x07
    3004:	2c 81       	ldd	r18, Y+4	; 0x04
    3006:	3d 81       	ldd	r19, Y+5	; 0x05
    3008:	42 17       	cp	r20, r18
    300a:	53 07       	cpc	r21, r19
    300c:	7c f4       	brge	.+30     	; 0x302c <fputc+0x4a>
    300e:	e8 81       	ld	r30, Y
    3010:	f9 81       	ldd	r31, Y+1	; 0x01
    3012:	9f 01       	movw	r18, r30
    3014:	2f 5f       	subi	r18, 0xFF	; 255
    3016:	3f 4f       	sbci	r19, 0xFF	; 255
    3018:	39 83       	std	Y+1, r19	; 0x01
    301a:	28 83       	st	Y, r18
    301c:	10 83       	st	Z, r17
    301e:	06 c0       	rjmp	.+12     	; 0x302c <fputc+0x4a>
    3020:	e8 85       	ldd	r30, Y+8	; 0x08
    3022:	f9 85       	ldd	r31, Y+9	; 0x09
    3024:	81 2f       	mov	r24, r17
    3026:	19 95       	eicall
    3028:	89 2b       	or	r24, r25
    302a:	29 f7       	brne	.-54     	; 0x2ff6 <fputc+0x14>
    302c:	2e 81       	ldd	r18, Y+6	; 0x06
    302e:	3f 81       	ldd	r19, Y+7	; 0x07
    3030:	2f 5f       	subi	r18, 0xFF	; 255
    3032:	3f 4f       	sbci	r19, 0xFF	; 255
    3034:	3f 83       	std	Y+7, r19	; 0x07
    3036:	2e 83       	std	Y+6, r18	; 0x06
    3038:	81 2f       	mov	r24, r17
    303a:	90 2f       	mov	r25, r16
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	08 95       	ret

00003046 <__ultoa_invert>:
    3046:	fa 01       	movw	r30, r20
    3048:	aa 27       	eor	r26, r26
    304a:	28 30       	cpi	r18, 0x08	; 8
    304c:	51 f1       	breq	.+84     	; 0x30a2 <__ultoa_invert+0x5c>
    304e:	20 31       	cpi	r18, 0x10	; 16
    3050:	81 f1       	breq	.+96     	; 0x30b2 <__ultoa_invert+0x6c>
    3052:	e8 94       	clt
    3054:	6f 93       	push	r22
    3056:	6e 7f       	andi	r22, 0xFE	; 254
    3058:	6e 5f       	subi	r22, 0xFE	; 254
    305a:	7f 4f       	sbci	r23, 0xFF	; 255
    305c:	8f 4f       	sbci	r24, 0xFF	; 255
    305e:	9f 4f       	sbci	r25, 0xFF	; 255
    3060:	af 4f       	sbci	r26, 0xFF	; 255
    3062:	b1 e0       	ldi	r27, 0x01	; 1
    3064:	3e d0       	rcall	.+124    	; 0x30e2 <__ultoa_invert+0x9c>
    3066:	b4 e0       	ldi	r27, 0x04	; 4
    3068:	3c d0       	rcall	.+120    	; 0x30e2 <__ultoa_invert+0x9c>
    306a:	67 0f       	add	r22, r23
    306c:	78 1f       	adc	r23, r24
    306e:	89 1f       	adc	r24, r25
    3070:	9a 1f       	adc	r25, r26
    3072:	a1 1d       	adc	r26, r1
    3074:	68 0f       	add	r22, r24
    3076:	79 1f       	adc	r23, r25
    3078:	8a 1f       	adc	r24, r26
    307a:	91 1d       	adc	r25, r1
    307c:	a1 1d       	adc	r26, r1
    307e:	6a 0f       	add	r22, r26
    3080:	71 1d       	adc	r23, r1
    3082:	81 1d       	adc	r24, r1
    3084:	91 1d       	adc	r25, r1
    3086:	a1 1d       	adc	r26, r1
    3088:	20 d0       	rcall	.+64     	; 0x30ca <__ultoa_invert+0x84>
    308a:	09 f4       	brne	.+2      	; 0x308e <__ultoa_invert+0x48>
    308c:	68 94       	set
    308e:	3f 91       	pop	r19
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	26 9f       	mul	r18, r22
    3094:	11 24       	eor	r1, r1
    3096:	30 19       	sub	r19, r0
    3098:	30 5d       	subi	r19, 0xD0	; 208
    309a:	31 93       	st	Z+, r19
    309c:	de f6       	brtc	.-74     	; 0x3054 <__ultoa_invert+0xe>
    309e:	cf 01       	movw	r24, r30
    30a0:	08 95       	ret
    30a2:	46 2f       	mov	r20, r22
    30a4:	47 70       	andi	r20, 0x07	; 7
    30a6:	40 5d       	subi	r20, 0xD0	; 208
    30a8:	41 93       	st	Z+, r20
    30aa:	b3 e0       	ldi	r27, 0x03	; 3
    30ac:	0f d0       	rcall	.+30     	; 0x30cc <__ultoa_invert+0x86>
    30ae:	c9 f7       	brne	.-14     	; 0x30a2 <__ultoa_invert+0x5c>
    30b0:	f6 cf       	rjmp	.-20     	; 0x309e <__ultoa_invert+0x58>
    30b2:	46 2f       	mov	r20, r22
    30b4:	4f 70       	andi	r20, 0x0F	; 15
    30b6:	40 5d       	subi	r20, 0xD0	; 208
    30b8:	4a 33       	cpi	r20, 0x3A	; 58
    30ba:	18 f0       	brcs	.+6      	; 0x30c2 <__ultoa_invert+0x7c>
    30bc:	49 5d       	subi	r20, 0xD9	; 217
    30be:	31 fd       	sbrc	r19, 1
    30c0:	40 52       	subi	r20, 0x20	; 32
    30c2:	41 93       	st	Z+, r20
    30c4:	02 d0       	rcall	.+4      	; 0x30ca <__ultoa_invert+0x84>
    30c6:	a9 f7       	brne	.-22     	; 0x30b2 <__ultoa_invert+0x6c>
    30c8:	ea cf       	rjmp	.-44     	; 0x309e <__ultoa_invert+0x58>
    30ca:	b4 e0       	ldi	r27, 0x04	; 4
    30cc:	a6 95       	lsr	r26
    30ce:	97 95       	ror	r25
    30d0:	87 95       	ror	r24
    30d2:	77 95       	ror	r23
    30d4:	67 95       	ror	r22
    30d6:	ba 95       	dec	r27
    30d8:	c9 f7       	brne	.-14     	; 0x30cc <__ultoa_invert+0x86>
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	61 05       	cpc	r22, r1
    30de:	71 05       	cpc	r23, r1
    30e0:	08 95       	ret
    30e2:	9b 01       	movw	r18, r22
    30e4:	ac 01       	movw	r20, r24
    30e6:	0a 2e       	mov	r0, r26
    30e8:	06 94       	lsr	r0
    30ea:	57 95       	ror	r21
    30ec:	47 95       	ror	r20
    30ee:	37 95       	ror	r19
    30f0:	27 95       	ror	r18
    30f2:	ba 95       	dec	r27
    30f4:	c9 f7       	brne	.-14     	; 0x30e8 <__ultoa_invert+0xa2>
    30f6:	62 0f       	add	r22, r18
    30f8:	73 1f       	adc	r23, r19
    30fa:	84 1f       	adc	r24, r20
    30fc:	95 1f       	adc	r25, r21
    30fe:	a0 1d       	adc	r26, r0
    3100:	08 95       	ret

00003102 <_exit>:
    3102:	f8 94       	cli

00003104 <__stop_program>:
    3104:	ff cf       	rjmp	.-2      	; 0x3104 <__stop_program>
