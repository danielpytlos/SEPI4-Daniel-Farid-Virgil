
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000272  00800200  0000327c  00003310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000327c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b16  00800472  00800472  00003582  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003582  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004f8  00000000  00000000  000035de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000063ac  00000000  00000000  00003ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001674  00000000  00000000  00009e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003861  00000000  00000000  0000b4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001140  00000000  00000000  0000ed58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bcb  00000000  00000000  0000fe98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005589  00000000  00000000  00011a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  00016fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c5 c0       	rjmp	.+394    	; 0x18c <__ctors_end>
       2:	00 00       	nop
       4:	df c3       	rjmp	.+1982   	; 0x7c4 <__vector_1>
       6:	00 00       	nop
       8:	e2 c0       	rjmp	.+452    	; 0x1ce <__bad_interrupt>
       a:	00 00       	nop
       c:	e0 c0       	rjmp	.+448    	; 0x1ce <__bad_interrupt>
       e:	00 00       	nop
      10:	de c0       	rjmp	.+444    	; 0x1ce <__bad_interrupt>
      12:	00 00       	nop
      14:	dc c0       	rjmp	.+440    	; 0x1ce <__bad_interrupt>
      16:	00 00       	nop
      18:	da c0       	rjmp	.+436    	; 0x1ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d8 c0       	rjmp	.+432    	; 0x1ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	d6 c0       	rjmp	.+428    	; 0x1ce <__bad_interrupt>
      22:	00 00       	nop
      24:	d4 c0       	rjmp	.+424    	; 0x1ce <__bad_interrupt>
      26:	00 00       	nop
      28:	d2 c0       	rjmp	.+420    	; 0x1ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d0 c0       	rjmp	.+416    	; 0x1ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	ce c0       	rjmp	.+412    	; 0x1ce <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c3       	rjmp	.+2040   	; 0x82e <__vector_13>
      36:	00 00       	nop
      38:	ca c0       	rjmp	.+404    	; 0x1ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c8 c0       	rjmp	.+400    	; 0x1ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	c6 c0       	rjmp	.+396    	; 0x1ce <__bad_interrupt>
      42:	00 00       	nop
      44:	c4 c0       	rjmp	.+392    	; 0x1ce <__bad_interrupt>
      46:	00 00       	nop
      48:	c2 c0       	rjmp	.+388    	; 0x1ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c0 c0       	rjmp	.+384    	; 0x1ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	be c0       	rjmp	.+380    	; 0x1ce <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_21>
      58:	ba c0       	rjmp	.+372    	; 0x1ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b8 c0       	rjmp	.+368    	; 0x1ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_24>
      64:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__vector_25>
      68:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__vector_26>
      6c:	b0 c0       	rjmp	.+352    	; 0x1ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	ae c0       	rjmp	.+348    	; 0x1ce <__bad_interrupt>
      72:	00 00       	nop
      74:	ac c0       	rjmp	.+344    	; 0x1ce <__bad_interrupt>
      76:	00 00       	nop
      78:	aa c0       	rjmp	.+340    	; 0x1ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a8 c0       	rjmp	.+336    	; 0x1ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	a6 c0       	rjmp	.+332    	; 0x1ce <__bad_interrupt>
      82:	00 00       	nop
      84:	a4 c0       	rjmp	.+328    	; 0x1ce <__bad_interrupt>
      86:	00 00       	nop
      88:	a2 c0       	rjmp	.+324    	; 0x1ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a0 c0       	rjmp	.+320    	; 0x1ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__vector_36>
      94:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_37>
      98:	9a c0       	rjmp	.+308    	; 0x1ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	98 c0       	rjmp	.+304    	; 0x1ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	96 c0       	rjmp	.+300    	; 0x1ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	94 c0       	rjmp	.+296    	; 0x1ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	92 c0       	rjmp	.+292    	; 0x1ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	90 c0       	rjmp	.+288    	; 0x1ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8e c0       	rjmp	.+284    	; 0x1ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8c c0       	rjmp	.+280    	; 0x1ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8a c0       	rjmp	.+276    	; 0x1ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	88 c0       	rjmp	.+272    	; 0x1ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	86 c0       	rjmp	.+268    	; 0x1ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	84 c0       	rjmp	.+264    	; 0x1ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	82 c0       	rjmp	.+260    	; 0x1ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb 0f       	add	r27, r27
      ce:	c3 0f       	add	r28, r19
      d0:	cb 0f       	add	r28, r27
      d2:	d3 0f       	add	r29, r19
      d4:	db 0f       	add	r29, r27
      d6:	df 0f       	add	r29, r31
      d8:	1e 10       	cpse	r1, r14
      da:	6b 10       	cpse	r6, r11
      dc:	6b 10       	cpse	r6, r11
      de:	6b 10       	cpse	r6, r11
      e0:	6b 10       	cpse	r6, r11
      e2:	6b 10       	cpse	r6, r11
      e4:	6b 10       	cpse	r6, r11
      e6:	49 10       	cpse	r4, r9
      e8:	6b 10       	cpse	r6, r11
      ea:	69 10       	cpse	r6, r9
      ec:	6b 10       	cpse	r6, r11
      ee:	6b 10       	cpse	r6, r11
      f0:	6b 10       	cpse	r6, r11
      f2:	6b 10       	cpse	r6, r11
      f4:	6b 10       	cpse	r6, r11
      f6:	6b 10       	cpse	r6, r11
      f8:	6b 10       	cpse	r6, r11
      fa:	6b 10       	cpse	r6, r11
      fc:	6b 10       	cpse	r6, r11
      fe:	6b 10       	cpse	r6, r11
     100:	6b 10       	cpse	r6, r11
     102:	6b 10       	cpse	r6, r11
     104:	6b 10       	cpse	r6, r11
     106:	6b 10       	cpse	r6, r11
     108:	6b 10       	cpse	r6, r11
     10a:	6b 10       	cpse	r6, r11
     10c:	b7 0f       	add	r27, r23
     10e:	bf 0f       	add	r27, r31
     110:	c7 0f       	add	r28, r23
     112:	cf 0f       	add	r28, r31
     114:	d7 0f       	add	r29, r23
     116:	1c 10       	cpse	r1, r12

00000118 <prvIdleTask>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     118:	0f 2e       	mov	r0, r31
     11a:	fd e4       	ldi	r31, 0x4D	; 77
     11c:	ef 2e       	mov	r14, r31
     11e:	ff e0       	ldi	r31, 0x0F	; 15
     120:	ff 2e       	mov	r15, r31
     122:	f0 2d       	mov	r31, r0
     124:	c5 e2       	ldi	r28, 0x25	; 37
     126:	df e0       	ldi	r29, 0x0F	; 15
     128:	27 c0       	rjmp	.+78     	; 0x178 <prvIdleTask+0x60>
     12a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vTaskSuspendAll>
     12e:	18 81       	ld	r17, Y
     130:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
     134:	11 23       	and	r17, r17
     136:	01 f1       	breq	.+64     	; 0x178 <prvIdleTask+0x60>
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	0f 92       	push	r0
     13e:	e0 91 2a 0f 	lds	r30, 0x0F2A
     142:	f0 91 2b 0f 	lds	r31, 0x0F2B
     146:	06 81       	ldd	r16, Z+6	; 0x06
     148:	17 81       	ldd	r17, Z+7	; 0x07
     14a:	c8 01       	movw	r24, r16
     14c:	02 96       	adiw	r24, 0x02	; 2
     14e:	4e d6       	rcall	.+3228   	; 0xdec <uxListRemove>
     150:	80 91 23 0f 	lds	r24, 0x0F23
     154:	81 50       	subi	r24, 0x01	; 1
     156:	80 93 23 0f 	sts	0x0F23, r24
     15a:	80 91 24 0f 	lds	r24, 0x0F24
     15e:	81 50       	subi	r24, 0x01	; 1
     160:	80 93 24 0f 	sts	0x0F24, r24
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	f8 01       	movw	r30, r16
     16a:	87 89       	ldd	r24, Z+23	; 0x17
     16c:	90 8d       	ldd	r25, Z+24	; 0x18
     16e:	0e 94 de 08 	call	0x11bc	; 0x11bc <vPortFree>
     172:	c8 01       	movw	r24, r16
     174:	0e 94 de 08 	call	0x11bc	; 0x11bc <vPortFree>
     178:	80 91 24 0f 	lds	r24, 0x0F24
     17c:	81 11       	cpse	r24, r1
     17e:	d5 cf       	rjmp	.-86     	; 0x12a <prvIdleTask+0x12>
     180:	f7 01       	movw	r30, r14
     182:	80 81       	ld	r24, Z
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	c0 f3       	brcs	.-16     	; 0x178 <prvIdleTask+0x60>
     188:	0f d7       	rcall	.+3614   	; 0xfa8 <vPortYield>
     18a:	f6 cf       	rjmp	.-20     	; 0x178 <prvIdleTask+0x60>

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d1 e2       	ldi	r29, 0x21	; 33
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	0c bf       	out	0x3c, r16	; 60

0000019c <__do_copy_data>:
     19c:	14 e0       	ldi	r17, 0x04	; 4
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	ec e7       	ldi	r30, 0x7C	; 124
     1a4:	f2 e3       	ldi	r31, 0x32	; 50
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a2 37       	cpi	r26, 0x72	; 114
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	2f e0       	ldi	r18, 0x0F	; 15
     1b8:	a2 e7       	ldi	r26, 0x72	; 114
     1ba:	b4 e0       	ldi	r27, 0x04	; 4
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a8 38       	cpi	r26, 0x88	; 136
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 ed 10 	call	0x21da	; 0x21da <main>
     1ca:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <_exit>

000001ce <__bad_interrupt>:
     1ce:	18 cf       	rjmp	.-464    	; 0x0 <__vectors>

000001d0 <_bt_status_call_back>:
	uint8_t _sreg = SREG;
	cli();
	int16_t _tmp = _z_gyro;
	SREG = _sreg;
	return _tmp;
}
     1d0:	10 92 d2 04 	sts	0x04D2, r1
     1d4:	e0 91 d0 04 	lds	r30, 0x04D0
     1d8:	f0 91 d1 04 	lds	r31, 0x04D1
     1dc:	30 97       	sbiw	r30, 0x00	; 0
     1de:	09 f0       	breq	.+2      	; 0x1e2 <_bt_status_call_back+0x12>
     1e0:	19 95       	eicall
     1e2:	08 95       	ret

000001e4 <_bt_call_back>:
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	1f 92       	push	r1
     1ea:	1f 92       	push	r1
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	6a 83       	std	Y+2, r22	; 0x02
     1f2:	80 91 d2 04 	lds	r24, 0x04D2
     1f6:	88 23       	and	r24, r24
     1f8:	19 f0       	breq	.+6      	; 0x200 <_bt_call_back+0x1c>
     1fa:	86 2f       	mov	r24, r22
     1fc:	a0 d4       	rcall	.+2368   	; 0xb3e <dialog_byte_received>
     1fe:	13 c0       	rjmp	.+38     	; 0x226 <_bt_call_back+0x42>
     200:	80 91 ce 04 	lds	r24, 0x04CE
     204:	90 91 cf 04 	lds	r25, 0x04CF
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	69 f0       	breq	.+26     	; 0x226 <_bt_call_back+0x42>
     20c:	19 82       	std	Y+1, r1	; 0x01
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	ae 01       	movw	r20, r28
     212:	4f 5f       	subi	r20, 0xFF	; 255
     214:	5f 4f       	sbci	r21, 0xFF	; 255
     216:	be 01       	movw	r22, r28
     218:	6e 5f       	subi	r22, 0xFE	; 254
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <xQueueGenericSendFromISR>
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	81 11       	cpse	r24, r1
     224:	c1 d6       	rcall	.+3458   	; 0xfa8 <vPortYield>
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <_mpu9250_read_reg>:
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	d6 2e       	mov	r13, r22
     244:	ed b6       	in	r14, 0x3d	; 61
     246:	fe b6       	in	r15, 0x3e	; 62
     248:	26 2f       	mov	r18, r22
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	2f 5f       	subi	r18, 0xFF	; 255
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	4d b7       	in	r20, 0x3d	; 61
     252:	5e b7       	in	r21, 0x3e	; 62
     254:	42 1b       	sub	r20, r18
     256:	53 0b       	sbc	r21, r19
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	5e bf       	out	0x3e, r21	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	4d bf       	out	0x3d, r20	; 61
     262:	0d b7       	in	r16, 0x3d	; 61
     264:	1e b7       	in	r17, 0x3e	; 62
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
     26a:	98 01       	movw	r18, r16
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	ed b7       	in	r30, 0x3d	; 61
     270:	fe b7       	in	r31, 0x3e	; 62
     272:	81 83       	std	Z+1, r24	; 0x01
     274:	66 23       	and	r22, r22
     276:	41 f0       	breq	.+16     	; 0x288 <_mpu9250_read_reg+0x58>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	f9 01       	movw	r30, r18
     27c:	e8 0f       	add	r30, r24
     27e:	f1 1d       	adc	r31, r1
     280:	10 82       	st	Z, r1
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	d8 16       	cp	r13, r24
     286:	c8 f7       	brcc	.-14     	; 0x27a <_mpu9250_read_reg+0x4a>
     288:	8a e0       	ldi	r24, 0x0A	; 10
     28a:	95 e0       	ldi	r25, 0x05	; 5
     28c:	3d d3       	rcall	.+1658   	; 0x908 <buffer_clear>
     28e:	41 e0       	ldi	r20, 0x01	; 1
     290:	4d 0d       	add	r20, r13
     292:	b8 01       	movw	r22, r16
     294:	80 91 37 05 	lds	r24, 0x0537
     298:	90 91 38 05 	lds	r25, 0x0538
     29c:	0e 94 ab 13 	call	0x2756	; 0x2756 <spi_send_string>
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	fe be       	out	0x3e, r15	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	ed be       	out	0x3d, r14	; 61
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	08 95       	ret

000002ba <_send_bytes_to_bt>:
     2ba:	46 2f       	mov	r20, r22
     2bc:	bc 01       	movw	r22, r24
     2be:	80 91 35 05 	lds	r24, 0x0535
     2c2:	90 91 36 05 	lds	r25, 0x0536
     2c6:	0c 94 89 11 	jmp	0x2312	; 0x2312 <serial_send_bytes>
     2ca:	08 95       	ret

000002cc <_mpu9250_call_back>:
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <_mpu9250_call_back+0x8>
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	80 91 75 04 	lds	r24, 0x0475
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	c1 f1       	breq	.+112    	; 0x352 <_mpu9250_call_back+0x86>
     2e2:	28 f4       	brcc	.+10     	; 0x2ee <_mpu9250_call_back+0x22>
     2e4:	88 23       	and	r24, r24
     2e6:	51 f0       	breq	.+20     	; 0x2fc <_mpu9250_call_back+0x30>
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	c9 f0       	breq	.+50     	; 0x31e <_mpu9250_call_back+0x52>
     2ec:	f1 c0       	rjmp	.+482    	; 0x4d0 <_mpu9250_call_back+0x204>
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <_mpu9250_call_back+0x28>
     2f2:	3f c0       	rjmp	.+126    	; 0x372 <_mpu9250_call_back+0xa6>
     2f4:	85 30       	cpi	r24, 0x05	; 5
     2f6:	09 f4       	brne	.+2      	; 0x2fa <_mpu9250_call_back+0x2e>
     2f8:	94 c0       	rjmp	.+296    	; 0x422 <_mpu9250_call_back+0x156>
     2fa:	ea c0       	rjmp	.+468    	; 0x4d0 <_mpu9250_call_back+0x204>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 75 04 	sts	0x0475, r24
     302:	8c e1       	ldi	r24, 0x1C	; 28
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	1c 82       	std	Y+4, r1	; 0x04
     308:	42 e0       	ldi	r20, 0x02	; 2
     30a:	be 01       	movw	r22, r28
     30c:	6d 5f       	subi	r22, 0xFD	; 253
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	80 91 37 05 	lds	r24, 0x0537
     314:	90 91 38 05 	lds	r25, 0x0538
     318:	0e 94 ab 13 	call	0x2756	; 0x2756 <spi_send_string>
     31c:	d9 c0       	rjmp	.+434    	; 0x4d0 <_mpu9250_call_back+0x204>
     31e:	8a e0       	ldi	r24, 0x0A	; 10
     320:	95 e0       	ldi	r25, 0x05	; 5
     322:	ef d2       	rcall	.+1502   	; 0x902 <buffer_no_of_items>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	09 f0       	breq	.+2      	; 0x32a <_mpu9250_call_back+0x5e>
     328:	d3 c0       	rjmp	.+422    	; 0x4d0 <_mpu9250_call_back+0x204>
     32a:	80 93 75 04 	sts	0x0475, r24
     32e:	8a e0       	ldi	r24, 0x0A	; 10
     330:	95 e0       	ldi	r25, 0x05	; 5
     332:	ea d2       	rcall	.+1492   	; 0x908 <buffer_clear>
     334:	8b e1       	ldi	r24, 0x1B	; 27
     336:	8b 83       	std	Y+3, r24	; 0x03
     338:	88 e0       	ldi	r24, 0x08	; 8
     33a:	8c 83       	std	Y+4, r24	; 0x04
     33c:	42 e0       	ldi	r20, 0x02	; 2
     33e:	be 01       	movw	r22, r28
     340:	6d 5f       	subi	r22, 0xFD	; 253
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	80 91 37 05 	lds	r24, 0x0537
     348:	90 91 38 05 	lds	r25, 0x0538
     34c:	0e 94 ab 13 	call	0x2756	; 0x2756 <spi_send_string>
     350:	bf c0       	rjmp	.+382    	; 0x4d0 <_mpu9250_call_back+0x204>
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	95 e0       	ldi	r25, 0x05	; 5
     356:	d5 d2       	rcall	.+1450   	; 0x902 <buffer_no_of_items>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	09 f0       	breq	.+2      	; 0x35e <_mpu9250_call_back+0x92>
     35c:	b9 c0       	rjmp	.+370    	; 0x4d0 <_mpu9250_call_back+0x204>
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	80 93 75 04 	sts	0x0475, r24
     364:	8a e0       	ldi	r24, 0x0A	; 10
     366:	95 e0       	ldi	r25, 0x05	; 5
     368:	cf d2       	rcall	.+1438   	; 0x908 <buffer_clear>
     36a:	66 e0       	ldi	r22, 0x06	; 6
     36c:	8b e3       	ldi	r24, 0x3B	; 59
     36e:	60 df       	rcall	.-320    	; 0x230 <_mpu9250_read_reg>
     370:	af c0       	rjmp	.+350    	; 0x4d0 <_mpu9250_call_back+0x204>
     372:	8a e0       	ldi	r24, 0x0A	; 10
     374:	95 e0       	ldi	r25, 0x05	; 5
     376:	c5 d2       	rcall	.+1418   	; 0x902 <buffer_no_of_items>
     378:	87 30       	cpi	r24, 0x07	; 7
     37a:	09 f0       	breq	.+2      	; 0x37e <_mpu9250_call_back+0xb2>
     37c:	a9 c0       	rjmp	.+338    	; 0x4d0 <_mpu9250_call_back+0x204>
     37e:	1f b7       	in	r17, 0x3f	; 63
     380:	f8 94       	cli
     382:	be 01       	movw	r22, r28
     384:	6f 5f       	subi	r22, 0xFF	; 255
     386:	7f 4f       	sbci	r23, 0xFF	; 255
     388:	8a e0       	ldi	r24, 0x0A	; 10
     38a:	95 e0       	ldi	r25, 0x05	; 5
     38c:	8a d2       	rcall	.+1300   	; 0x8a2 <buffer_get_item>
     38e:	be 01       	movw	r22, r28
     390:	6e 5f       	subi	r22, 0xFE	; 254
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	95 e0       	ldi	r25, 0x05	; 5
     398:	84 d2       	rcall	.+1288   	; 0x8a2 <buffer_get_item>
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	8a e0       	ldi	r24, 0x0A	; 10
     3a2:	95 e0       	ldi	r25, 0x05	; 5
     3a4:	7e d2       	rcall	.+1276   	; 0x8a2 <buffer_get_item>
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	98 2f       	mov	r25, r24
     3ac:	88 27       	eor	r24, r24
     3ae:	29 81       	ldd	r18, Y+1	; 0x01
     3b0:	82 2b       	or	r24, r18
     3b2:	90 93 de 04 	sts	0x04DE, r25
     3b6:	80 93 dd 04 	sts	0x04DD, r24
     3ba:	be 01       	movw	r22, r28
     3bc:	6e 5f       	subi	r22, 0xFE	; 254
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	8a e0       	ldi	r24, 0x0A	; 10
     3c2:	95 e0       	ldi	r25, 0x05	; 5
     3c4:	6e d2       	rcall	.+1244   	; 0x8a2 <buffer_get_item>
     3c6:	be 01       	movw	r22, r28
     3c8:	6f 5f       	subi	r22, 0xFF	; 255
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	8a e0       	ldi	r24, 0x0A	; 10
     3ce:	95 e0       	ldi	r25, 0x05	; 5
     3d0:	68 d2       	rcall	.+1232   	; 0x8a2 <buffer_get_item>
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	29 81       	ldd	r18, Y+1	; 0x01
     3dc:	82 2b       	or	r24, r18
     3de:	90 93 dc 04 	sts	0x04DC, r25
     3e2:	80 93 db 04 	sts	0x04DB, r24
     3e6:	be 01       	movw	r22, r28
     3e8:	6e 5f       	subi	r22, 0xFE	; 254
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	95 e0       	ldi	r25, 0x05	; 5
     3f0:	58 d2       	rcall	.+1200   	; 0x8a2 <buffer_get_item>
     3f2:	be 01       	movw	r22, r28
     3f4:	6f 5f       	subi	r22, 0xFF	; 255
     3f6:	7f 4f       	sbci	r23, 0xFF	; 255
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	95 e0       	ldi	r25, 0x05	; 5
     3fc:	52 d2       	rcall	.+1188   	; 0x8a2 <buffer_get_item>
     3fe:	1f bf       	out	0x3f, r17	; 63
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	98 2f       	mov	r25, r24
     406:	88 27       	eor	r24, r24
     408:	29 81       	ldd	r18, Y+1	; 0x01
     40a:	82 2b       	or	r24, r18
     40c:	90 93 da 04 	sts	0x04DA, r25
     410:	80 93 d9 04 	sts	0x04D9, r24
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	80 93 75 04 	sts	0x0475, r24
     41a:	66 e0       	ldi	r22, 0x06	; 6
     41c:	83 e4       	ldi	r24, 0x43	; 67
     41e:	08 df       	rcall	.-496    	; 0x230 <_mpu9250_read_reg>
     420:	57 c0       	rjmp	.+174    	; 0x4d0 <_mpu9250_call_back+0x204>
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	95 e0       	ldi	r25, 0x05	; 5
     426:	6d d2       	rcall	.+1242   	; 0x902 <buffer_no_of_items>
     428:	87 30       	cpi	r24, 0x07	; 7
     42a:	09 f0       	breq	.+2      	; 0x42e <_mpu9250_call_back+0x162>
     42c:	51 c0       	rjmp	.+162    	; 0x4d0 <_mpu9250_call_back+0x204>
     42e:	1f b7       	in	r17, 0x3f	; 63
     430:	f8 94       	cli
     432:	be 01       	movw	r22, r28
     434:	6f 5f       	subi	r22, 0xFF	; 255
     436:	7f 4f       	sbci	r23, 0xFF	; 255
     438:	8a e0       	ldi	r24, 0x0A	; 10
     43a:	95 e0       	ldi	r25, 0x05	; 5
     43c:	32 d2       	rcall	.+1124   	; 0x8a2 <buffer_get_item>
     43e:	be 01       	movw	r22, r28
     440:	6e 5f       	subi	r22, 0xFE	; 254
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	95 e0       	ldi	r25, 0x05	; 5
     448:	2c d2       	rcall	.+1112   	; 0x8a2 <buffer_get_item>
     44a:	be 01       	movw	r22, r28
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	95 e0       	ldi	r25, 0x05	; 5
     454:	26 d2       	rcall	.+1100   	; 0x8a2 <buffer_get_item>
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	98 2f       	mov	r25, r24
     45c:	88 27       	eor	r24, r24
     45e:	29 81       	ldd	r18, Y+1	; 0x01
     460:	82 2b       	or	r24, r18
     462:	90 93 d8 04 	sts	0x04D8, r25
     466:	80 93 d7 04 	sts	0x04D7, r24
     46a:	be 01       	movw	r22, r28
     46c:	6e 5f       	subi	r22, 0xFE	; 254
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	8a e0       	ldi	r24, 0x0A	; 10
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	16 d2       	rcall	.+1068   	; 0x8a2 <buffer_get_item>
     476:	be 01       	movw	r22, r28
     478:	6f 5f       	subi	r22, 0xFF	; 255
     47a:	7f 4f       	sbci	r23, 0xFF	; 255
     47c:	8a e0       	ldi	r24, 0x0A	; 10
     47e:	95 e0       	ldi	r25, 0x05	; 5
     480:	10 d2       	rcall	.+1056   	; 0x8a2 <buffer_get_item>
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	98 2f       	mov	r25, r24
     488:	88 27       	eor	r24, r24
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	82 2b       	or	r24, r18
     48e:	90 93 d6 04 	sts	0x04D6, r25
     492:	80 93 d5 04 	sts	0x04D5, r24
     496:	be 01       	movw	r22, r28
     498:	6e 5f       	subi	r22, 0xFE	; 254
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	8a e0       	ldi	r24, 0x0A	; 10
     49e:	95 e0       	ldi	r25, 0x05	; 5
     4a0:	00 d2       	rcall	.+1024   	; 0x8a2 <buffer_get_item>
     4a2:	be 01       	movw	r22, r28
     4a4:	6f 5f       	subi	r22, 0xFF	; 255
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	95 e0       	ldi	r25, 0x05	; 5
     4ac:	fa d1       	rcall	.+1012   	; 0x8a2 <buffer_get_item>
     4ae:	1f bf       	out	0x3f, r17	; 63
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	98 2f       	mov	r25, r24
     4b6:	88 27       	eor	r24, r24
     4b8:	29 81       	ldd	r18, Y+1	; 0x01
     4ba:	82 2b       	or	r24, r18
     4bc:	90 93 d4 04 	sts	0x04D4, r25
     4c0:	80 93 d3 04 	sts	0x04D3, r24
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	80 93 75 04 	sts	0x0475, r24
     4ca:	66 e0       	ldi	r22, 0x06	; 6
     4cc:	8b e3       	ldi	r24, 0x3B	; 59
     4ce:	b0 de       	rcall	.-672    	; 0x230 <_mpu9250_read_reg>
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	08 95       	ret

000004e0 <set_horn>:
     4e0:	88 23       	and	r24, r24
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <set_horn+0x8>
     4e4:	43 9a       	sbi	0x08, 3	; 8
     4e6:	08 95       	ret
     4e8:	43 98       	cbi	0x08, 3	; 8
     4ea:	08 95       	ret

000004ec <set_head_light>:
     4ec:	88 23       	and	r24, r24
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <set_head_light+0x8>
     4f0:	42 9a       	sbi	0x08, 2	; 8
     4f2:	08 95       	ret
     4f4:	42 98       	cbi	0x08, 2	; 8
     4f6:	08 95       	ret

000004f8 <set_brake_light>:
     4f8:	88 23       	and	r24, r24
     4fa:	11 f0       	breq	.+4      	; 0x500 <set_brake_light+0x8>
     4fc:	41 9a       	sbi	0x08, 1	; 8
     4fe:	08 95       	ret
     500:	41 98       	cbi	0x08, 1	; 8
     502:	08 95       	ret

00000504 <set_motor_speed>:
     504:	85 36       	cpi	r24, 0x65	; 101
     506:	08 f0       	brcs	.+2      	; 0x50a <set_motor_speed+0x6>
     508:	84 e6       	ldi	r24, 0x64	; 100
     50a:	88 23       	and	r24, r24
     50c:	a9 f0       	breq	.+42     	; 0x538 <set_motor_speed+0x34>
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	af e7       	ldi	r26, 0x7F	; 127
     514:	bc e0       	ldi	r27, 0x0C	; 12
     516:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     51a:	24 e6       	ldi	r18, 0x64	; 100
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__divmodsi4>
     526:	30 93 99 00 	sts	0x0099, r19
     52a:	20 93 98 00 	sts	0x0098, r18
     52e:	30 93 9b 00 	sts	0x009B, r19
     532:	20 93 9a 00 	sts	0x009A, r18
     536:	08 95       	ret
     538:	10 92 99 00 	sts	0x0099, r1
     53c:	10 92 98 00 	sts	0x0098, r1
     540:	10 92 9b 00 	sts	0x009B, r1
     544:	10 92 9a 00 	sts	0x009A, r1
     548:	08 95       	ret

0000054a <init_main_board>:
     54a:	8f 92       	push	r8
     54c:	9f 92       	push	r9
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	3b 9a       	sbi	0x07, 3	; 7
     55e:	3a 9a       	sbi	0x07, 2	; 7
     560:	39 9a       	sbi	0x07, 1	; 7
     562:	38 9a       	sbi	0x07, 0	; 7
     564:	e0 e9       	ldi	r30, 0x90	; 144
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	82 60       	ori	r24, 0x02	; 2
     56c:	80 83       	st	Z, r24
     56e:	a1 e9       	ldi	r26, 0x91	; 145
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	8c 91       	ld	r24, X
     574:	88 61       	ori	r24, 0x18	; 24
     576:	8c 93       	st	X, r24
     578:	8f e7       	ldi	r24, 0x7F	; 127
     57a:	9c e0       	ldi	r25, 0x0C	; 12
     57c:	90 93 99 00 	sts	0x0099, r25
     580:	80 93 98 00 	sts	0x0098, r24
     584:	20 81       	ld	r18, Z
     586:	20 6c       	ori	r18, 0xC0	; 192
     588:	20 83       	st	Z, r18
     58a:	6b 9a       	sbi	0x0d, 3	; 13
     58c:	90 93 9b 00 	sts	0x009B, r25
     590:	80 93 9a 00 	sts	0x009A, r24
     594:	20 81       	ld	r18, Z
     596:	20 63       	ori	r18, 0x30	; 48
     598:	20 83       	st	Z, r18
     59a:	6c 9a       	sbi	0x0d, 4	; 13
     59c:	90 93 97 00 	sts	0x0097, r25
     5a0:	80 93 96 00 	sts	0x0096, r24
     5a4:	8c 91       	ld	r24, X
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	8c 93       	st	X, r24
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	ab df       	rcall	.-170    	; 0x504 <set_motor_speed>
     5ae:	e1 e8       	ldi	r30, 0x81	; 129
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	86 60       	ori	r24, 0x06	; 6
     5b6:	80 83       	st	Z, r24
     5b8:	6a 98       	cbi	0x0d, 2	; 13
     5ba:	6d 9a       	sbi	0x0d, 5	; 13
     5bc:	75 98       	cbi	0x0e, 5	; 14
     5be:	08 9a       	sbi	0x01, 0	; 1
     5c0:	10 98       	cbi	0x02, 0	; 2
     5c2:	09 9a       	sbi	0x01, 1	; 1
     5c4:	11 98       	cbi	0x02, 1	; 2
     5c6:	0a 9a       	sbi	0x01, 2	; 1
     5c8:	12 98       	cbi	0x02, 2	; 2
     5ca:	e9 e6       	ldi	r30, 0x69	; 105
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	80 83       	st	Z, r24
     5d4:	e8 9a       	sbi	0x1d, 0	; 29
     5d6:	81 ea       	ldi	r24, 0xA1	; 161
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	5e d1       	rcall	.+700    	; 0x898 <buffer_init>
     5dc:	86 e7       	ldi	r24, 0x76	; 118
     5de:	94 e0       	ldi	r25, 0x04	; 4
     5e0:	5b d1       	rcall	.+694    	; 0x898 <buffer_init>
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f2 ef       	ldi	r31, 0xF2	; 242
     5e6:	8f 2e       	mov	r8, r31
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	9f 2e       	mov	r9, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f6 e7       	ldi	r31, 0x76	; 118
     5f2:	af 2e       	mov	r10, r31
     5f4:	f4 e0       	ldi	r31, 0x04	; 4
     5f6:	bf 2e       	mov	r11, r31
     5f8:	f0 2d       	mov	r31, r0
     5fa:	0f 2e       	mov	r0, r31
     5fc:	f1 ea       	ldi	r31, 0xA1	; 161
     5fe:	cf 2e       	mov	r12, r31
     600:	f4 e0       	ldi	r31, 0x04	; 4
     602:	df 2e       	mov	r13, r31
     604:	f0 2d       	mov	r31, r0
     606:	e1 2c       	mov	r14, r1
     608:	00 e0       	ldi	r16, 0x00	; 0
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	40 e8       	ldi	r20, 0x80	; 128
     60e:	55 e2       	ldi	r21, 0x25	; 37
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 12 11 	call	0x2224	; 0x2224 <serial_new_instance>
     61a:	90 93 36 05 	sts	0x0536, r25
     61e:	80 93 35 05 	sts	0x0535, r24
     622:	8a e0       	ldi	r24, 0x0A	; 10
     624:	95 e0       	ldi	r25, 0x05	; 5
     626:	38 d1       	rcall	.+624    	; 0x898 <buffer_init>
     628:	8f ed       	ldi	r24, 0xDF	; 223
     62a:	94 e0       	ldi	r25, 0x04	; 4
     62c:	35 d1       	rcall	.+618    	; 0x898 <buffer_init>
     62e:	86 e6       	ldi	r24, 0x66	; 102
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0f 2e       	mov	r0, r31
     638:	ff ed       	ldi	r31, 0xDF	; 223
     63a:	8f 2e       	mov	r8, r31
     63c:	f4 e0       	ldi	r31, 0x04	; 4
     63e:	9f 2e       	mov	r9, r31
     640:	f0 2d       	mov	r31, r0
     642:	0f 2e       	mov	r0, r31
     644:	fa e0       	ldi	r31, 0x0A	; 10
     646:	af 2e       	mov	r10, r31
     648:	f5 e0       	ldi	r31, 0x05	; 5
     64a:	bf 2e       	mov	r11, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	c1 2c       	mov	r12, r1
     650:	05 e2       	ldi	r16, 0x25	; 37
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	43 e0       	ldi	r20, 0x03	; 3
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	80 e1       	ldi	r24, 0x10	; 16
     65c:	0e 94 1e 13 	call	0x263c	; 0x263c <spi_new_instance>
     660:	90 93 38 05 	sts	0x0538, r25
     664:	80 93 37 05 	sts	0x0537, r24
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	2e de       	rcall	.-932    	; 0x2cc <_mpu9250_call_back>
     670:	8b e9       	ldi	r24, 0x9B	; 155
     672:	80 93 b3 00 	sts	0x00B3, r24
     676:	e1 eb       	ldi	r30, 0xB1	; 177
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	82 60       	ori	r24, 0x02	; 2
     67e:	80 83       	st	Z, r24
     680:	a0 e7       	ldi	r26, 0x70	; 112
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	8c 91       	ld	r24, X
     686:	82 60       	ori	r24, 0x02	; 2
     688:	8c 93       	st	X, r24
     68a:	80 81       	ld	r24, Z
     68c:	85 60       	ori	r24, 0x05	; 5
     68e:	80 83       	st	Z, r24
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	08 95       	ret

000006a8 <set_brake>:
     6a8:	85 36       	cpi	r24, 0x65	; 101
     6aa:	08 f0       	brcs	.+2      	; 0x6ae <set_brake+0x6>
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	88 23       	and	r24, r24
     6b0:	a9 f0       	breq	.+42     	; 0x6dc <set_brake+0x34>
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	af e7       	ldi	r26, 0x7F	; 127
     6b8:	bc e0       	ldi	r27, 0x0C	; 12
     6ba:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     6be:	24 e6       	ldi	r18, 0x64	; 100
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__divmodsi4>
     6ca:	30 93 99 00 	sts	0x0099, r19
     6ce:	20 93 98 00 	sts	0x0098, r18
     6d2:	10 92 9b 00 	sts	0x009B, r1
     6d6:	10 92 9a 00 	sts	0x009A, r1
     6da:	08 95       	ret
     6dc:	10 92 99 00 	sts	0x0099, r1
     6e0:	10 92 98 00 	sts	0x0098, r1
     6e4:	10 92 9b 00 	sts	0x009B, r1
     6e8:	10 92 9a 00 	sts	0x009A, r1
     6ec:	08 95       	ret

000006ee <get_raw_x_accel>:
     6ee:	2f b7       	in	r18, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	80 91 dd 04 	lds	r24, 0x04DD
     6f6:	90 91 de 04 	lds	r25, 0x04DE
     6fa:	2f bf       	out	0x3f, r18	; 63
     6fc:	08 95       	ret

000006fe <get_raw_y_accel>:
     6fe:	2f b7       	in	r18, 0x3f	; 63
     700:	f8 94       	cli
     702:	80 91 db 04 	lds	r24, 0x04DB
     706:	90 91 dc 04 	lds	r25, 0x04DC
     70a:	2f bf       	out	0x3f, r18	; 63
     70c:	08 95       	ret

0000070e <get_raw_z_accel>:
     70e:	2f b7       	in	r18, 0x3f	; 63
     710:	f8 94       	cli
     712:	80 91 d9 04 	lds	r24, 0x04D9
     716:	90 91 da 04 	lds	r25, 0x04DA
     71a:	2f bf       	out	0x3f, r18	; 63
     71c:	08 95       	ret

0000071e <get_raw_x_rotation>:
     71e:	2f b7       	in	r18, 0x3f	; 63
     720:	f8 94       	cli
     722:	80 91 d7 04 	lds	r24, 0x04D7
     726:	90 91 d8 04 	lds	r25, 0x04D8
     72a:	2f bf       	out	0x3f, r18	; 63
     72c:	08 95       	ret

0000072e <get_raw_y_rotation>:
     72e:	2f b7       	in	r18, 0x3f	; 63
     730:	f8 94       	cli
     732:	80 91 d5 04 	lds	r24, 0x04D5
     736:	90 91 d6 04 	lds	r25, 0x04D6
     73a:	2f bf       	out	0x3f, r18	; 63
     73c:	08 95       	ret

0000073e <get_tacho_count>:

// ----------------------------------------------------------------------------------------------------------------------
uint16_t get_tacho_count() {
	static uint16_t _last_reading = 0;
	
	uint16_t _tmp = TACHO_TCNT_reg;
     73e:	20 91 84 00 	lds	r18, 0x0084
     742:	30 91 85 00 	lds	r19, 0x0085
	uint16_t _tmp_last = _tmp;
	
	if (_tmp < _last_reading) {
     746:	80 91 73 04 	lds	r24, 0x0473
     74a:	90 91 74 04 	lds	r25, 0x0474
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	30 f4       	brcc	.+12     	; 0x760 <get_tacho_count+0x22>
		_tmp = (UINT16_MAX - _last_reading + _tmp);
     754:	a9 01       	movw	r20, r18
     756:	48 1b       	sub	r20, r24
     758:	59 0b       	sbc	r21, r25
     75a:	ca 01       	movw	r24, r20
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	04 c0       	rjmp	.+8      	; 0x768 <get_tacho_count+0x2a>
		} else {
		_tmp = _tmp-_last_reading;
     760:	a9 01       	movw	r20, r18
     762:	48 1b       	sub	r20, r24
     764:	59 0b       	sbc	r21, r25
     766:	ca 01       	movw	r24, r20
	}
	_last_reading = _tmp_last;
     768:	30 93 74 04 	sts	0x0474, r19
     76c:	20 93 73 04 	sts	0x0473, r18
	
	return _tmp;
}
     770:	08 95       	ret

00000772 <set_bt_reset>:

// ----------------------------------------------------------------------------------------------------------------------
void set_bt_reset(uint8_t state) {
	if (state) {
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <set_bt_reset+0x8>
		BT_RESET_PORT &= ~_BV(BT_RESET_PIN); // Set RESET low/active
     776:	10 98       	cbi	0x02, 0	; 2
     778:	08 95       	ret
		} else {
		BT_RESET_PORT |= _BV(BT_RESET_PIN); // Set RESET high/in-active
     77a:	10 9a       	sbi	0x02, 0	; 2
     77c:	08 95       	ret

0000077e <bt_send_bytes>:
static void _send_bytes_to_bt(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_bt_serial_instance, bytes, len);
}

// ----------------------------------------------------------------------------------------------------------------------
uint8_t bt_send_bytes(uint8_t *bytes, uint8_t len) {
     77e:	46 2f       	mov	r20, r22
	return serial_send_bytes(_bt_serial_instance, bytes, len);
     780:	bc 01       	movw	r22, r24
     782:	80 91 35 05 	lds	r24, 0x0535
     786:	90 91 36 05 	lds	r25, 0x0536
     78a:	0c 94 89 11 	jmp	0x2312	; 0x2312 <serial_send_bytes>
}
     78e:	08 95       	ret

00000790 <init_bt_module>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_bt_module(void (*bt_status_call_back)(uint8_t result), QueueHandle_t RX_Que) {
	_xRxedCharsQ = RX_Que;
     790:	70 93 cf 04 	sts	0x04CF, r23
     794:	60 93 ce 04 	sts	0x04CE, r22
	_app_bt_status_call_back = bt_status_call_back;
     798:	90 93 d1 04 	sts	0x04D1, r25
     79c:	80 93 d0 04 	sts	0x04D0, r24
	_bt_dialog_active = 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 d2 04 	sts	0x04D2, r24
	dialog_start(_dialog_bt_init_seq, _send_bytes_to_bt, _bt_status_call_back);
     7a6:	48 ee       	ldi	r20, 0xE8	; 232
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	6d e5       	ldi	r22, 0x5D	; 93
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	87 e0       	ldi	r24, 0x07	; 7
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	9d c1       	rjmp	.+826    	; 0xaee <dialog_start>
     7b4:	08 95       	ret

000007b6 <set_goal_line_semaphore>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void set_goal_line_semaphore(SemaphoreHandle_t goal_line_semaphore) {
	if (goal_line_semaphore) {
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <set_goal_line_semaphore+0xc>
		_goal_line_semaphore = goal_line_semaphore;
     7ba:	90 93 cd 04 	sts	0x04CD, r25
     7be:	80 93 cc 04 	sts	0x04CC, r24
     7c2:	08 95       	ret

000007c4 <__vector_1>:
	}
}

ISR(INT0_vect) {
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	0b b6       	in	r0, 0x3b	; 59
     7d0:	0f 92       	push	r0
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	static signed portBASE_TYPE _higher_priority_task_woken;
	if (_goal_line_semaphore) {
     7ea:	80 91 cc 04 	lds	r24, 0x04CC
     7ee:	90 91 cd 04 	lds	r25, 0x04CD
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	49 f0       	breq	.+18     	; 0x808 <__vector_1+0x44>
		_higher_priority_task_woken = pdFALSE;
     7f6:	10 92 72 04 	sts	0x0472, r1

		xSemaphoreGiveFromISR(_goal_line_semaphore, &_higher_priority_task_woken);
     7fa:	62 e7       	ldi	r22, 0x72	; 114
     7fc:	74 e0       	ldi	r23, 0x04	; 4
     7fe:	22 d6       	rcall	.+3140   	; 0x1444 <xQueueGiveFromISR>
		
		if (_higher_priority_task_woken != pdFALSE) {
     800:	80 91 72 04 	lds	r24, 0x0472
     804:	81 11       	cpse	r24, r1
			portYIELD();
     806:	d0 d3       	rcall	.+1952   	; 0xfa8 <vPortYield>
		}
	}
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0b be       	out	0x3b, r0	; 59
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_13>:
	#elif ((DIALOG_HANDLER_PRESCALER == 1024))
	DIALOG_HANDLER_TCCRB_reg |= _BV(DIALOG_HANDLER_CS0_bit) | _BV(DIALOG_HANDLER_CS2_bit); ;    // Prescaler 1024 and Start Timer
	#endif
}

ISR(TIMER2_COMPA_vect) {
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	static uint8_t _count = 10;
	if (_bt_dialog_active) {
     854:	80 91 d2 04 	lds	r24, 0x04D2
     858:	88 23       	and	r24, r24
     85a:	59 f0       	breq	.+22     	; 0x872 <__vector_13+0x44>
		if (--_count == 0) {
     85c:	80 91 06 02 	lds	r24, 0x0206
     860:	81 50       	subi	r24, 0x01	; 1
     862:	19 f0       	breq	.+6      	; 0x86a <__vector_13+0x3c>
     864:	80 93 06 02 	sts	0x0206, r24
     868:	04 c0       	rjmp	.+8      	; 0x872 <__vector_13+0x44>
			_count = 10;
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	80 93 06 02 	sts	0x0206, r24
			dialog_tick();
     870:	4f d1       	rcall	.+670    	; 0xb10 <dialog_tick>
		}
	}
}
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0b be       	out	0x3b, r0	; 59
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <buffer_init>:
 @return true if buffer is empty.
 @param *buffer pointer to the buffer structure.
 ***********************************************/
uint8_t buffer_is_empty(buffer_struct_t *buffer) {
	return (buffer->no_in_buffer == 0);
}
     898:	fc 01       	movw	r30, r24
     89a:	10 a6       	std	Z+40, r1	; 0x28
     89c:	11 a6       	std	Z+41, r1	; 0x29
     89e:	12 a6       	std	Z+42, r1	; 0x2a
     8a0:	08 95       	ret

000008a2 <buffer_get_item>:
     8a2:	fc 01       	movw	r30, r24
     8a4:	82 a5       	ldd	r24, Z+42	; 0x2a
     8a6:	88 23       	and	r24, r24
     8a8:	a1 f0       	breq	.+40     	; 0x8d2 <buffer_get_item+0x30>
     8aa:	81 a5       	ldd	r24, Z+41	; 0x29
     8ac:	df 01       	movw	r26, r30
     8ae:	a8 0f       	add	r26, r24
     8b0:	b1 1d       	adc	r27, r1
     8b2:	8c 91       	ld	r24, X
     8b4:	db 01       	movw	r26, r22
     8b6:	8c 93       	st	X, r24
     8b8:	81 a5       	ldd	r24, Z+41	; 0x29
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	68 e2       	ldi	r22, 0x28	; 40
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     8c6:	81 a7       	std	Z+41, r24	; 0x29
     8c8:	82 a5       	ldd	r24, Z+42	; 0x2a
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	82 a7       	std	Z+42, r24	; 0x2a
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret

000008d6 <buffer_put_item>:
     8d6:	fc 01       	movw	r30, r24
     8d8:	22 a5       	ldd	r18, Z+42	; 0x2a
     8da:	28 32       	cpi	r18, 0x28	; 40
     8dc:	80 f4       	brcc	.+32     	; 0x8fe <buffer_put_item+0x28>
     8de:	80 a5       	ldd	r24, Z+40	; 0x28
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	df 01       	movw	r26, r30
     8e4:	a8 0f       	add	r26, r24
     8e6:	b9 1f       	adc	r27, r25
     8e8:	6c 93       	st	X, r22
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	68 e2       	ldi	r22, 0x28	; 40
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	0e 94 ab 14 	call	0x2956	; 0x2956 <__divmodhi4>
     8f4:	80 a7       	std	Z+40, r24	; 0x28
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	22 a7       	std	Z+42, r18	; 0x2a
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	08 95       	ret

00000902 <buffer_no_of_items>:
 @return no of items in the buffer.
 @param *buffer pointer to the buffer structure.
 ***********************************************/
uint8_t buffer_no_of_items(buffer_struct_t *buffer) {
	return buffer->no_in_buffer;
}
     902:	fc 01       	movw	r30, r24
     904:	82 a5       	ldd	r24, Z+42	; 0x2a
     906:	08 95       	ret

00000908 <buffer_clear>:
 @ingroup buffer_function
 @brief Clear the content of the buffer.

 @param *buffer pointer to the buffer structure.
 **********************************************************************/
void buffer_clear(buffer_struct_t *buffer) {
     908:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     90a:	10 a6       	std	Z+40, r1	; 0x28
	buffer->out_i = 0;
     90c:	11 a6       	std	Z+41, r1	; 0x29
	buffer->no_in_buffer = 0;
     90e:	12 a6       	std	Z+42, r1	; 0x2a
     910:	08 95       	ret

00000912 <_dialog_prepare_for_next_byte>:

 When the function returns it has setup the state variable _dialog_await_state that will be used in dialog_char_received(), and the needed argument counters etc.
 */
static void _dialog_prepare_for_next_byte() {
  // esc char?
  if (*(_dialog_format.response_p) == '%') {
     912:	e0 91 46 05 	lds	r30, 0x0546
     916:	f0 91 47 05 	lds	r31, 0x0547
     91a:	80 81       	ld	r24, Z
     91c:	85 32       	cpi	r24, 0x25	; 37
     91e:	09 f0       	breq	.+2      	; 0x922 <_dialog_prepare_for_next_byte+0x10>
     920:	85 c0       	rjmp	.+266    	; 0xa2c <_dialog_prepare_for_next_byte+0x11a>
    _dialog_format.response_p++;
     922:	cf 01       	movw	r24, r30
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	90 93 47 05 	sts	0x0547, r25
     92a:	80 93 46 05 	sts	0x0546, r24

    if (*(_dialog_format.response_p) == '%') {
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	85 32       	cpi	r24, 0x25	; 37
     932:	19 f4       	brne	.+6      	; 0x93a <_dialog_prepare_for_next_byte+0x28>
      //Byte stuffing
      _dialog_await_state = NORMAL_STATE;
     934:	10 92 3d 05 	sts	0x053D, r1
     938:	08 95       	ret
    } else if (*_dialog_format.response_p == '*') {
     93a:	8a 32       	cpi	r24, 0x2A	; 42
     93c:	e1 f5       	brne	.+120    	; 0x9b6 <_dialog_prepare_for_next_byte+0xa4>
      // Max args: %*nnB
      _dialog_format.response_p++;
     93e:	cf 01       	movw	r24, r30
     940:	02 96       	adiw	r24, 0x02	; 2
     942:	90 93 47 05 	sts	0x0547, r25
     946:	80 93 46 05 	sts	0x0546, r24
     94a:	33 96       	adiw	r30, 0x03	; 3
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	dc 01       	movw	r26, r24
     950:	01 96       	adiw	r24, 0x01	; 1
      // Find the arg. cnt
      _dialog_format.arg_cnt = 0;
      do {
        _dialog_format.arg_cnt *= 10;
     952:	22 0f       	add	r18, r18
     954:	32 2f       	mov	r19, r18
     956:	33 0f       	add	r19, r19
     958:	33 0f       	add	r19, r19
     95a:	23 0f       	add	r18, r19
        _dialog_format.arg_cnt += (*_dialog_format.response_p) - '0';
     95c:	20 53       	subi	r18, 0x30	; 48
     95e:	3c 91       	ld	r19, X
     960:	23 0f       	add	r18, r19
      } while (*(++_dialog_format.response_p) != 'B');
     962:	31 91       	ld	r19, Z+
     964:	32 34       	cpi	r19, 0x42	; 66
     966:	99 f7       	brne	.-26     	; 0x94e <_dialog_prepare_for_next_byte+0x3c>
     968:	20 93 48 05 	sts	0x0548, r18
      _dialog_format.response_p++;
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	b0 93 47 05 	sts	0x0547, r27
     972:	a0 93 46 05 	sts	0x0546, r26
      // Are argument buffers allocated?
      if (_dialog_format.arg_buffers != 0) {
     976:	80 91 4a 05 	lds	r24, 0x054A
     97a:	90 91 4b 05 	lds	r25, 0x054B
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	b1 f0       	breq	.+44     	; 0x9ae <_dialog_prepare_for_next_byte+0x9c>
        _dialog_format.arg_index++;
     982:	e9 e4       	ldi	r30, 0x49	; 73
     984:	f5 e0       	ldi	r31, 0x05	; 5
     986:	20 81       	ld	r18, Z
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	20 83       	st	Z, r18
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len = 0;
     98c:	33 27       	eor	r19, r19
     98e:	27 fd       	sbrc	r18, 7
     990:	30 95       	com	r19
     992:	f9 01       	movw	r30, r18
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e2 0f       	add	r30, r18
     99a:	f3 1f       	adc	r31, r19
     99c:	e8 0f       	add	r30, r24
     99e:	f9 1f       	adc	r31, r25
     9a0:	12 82       	std	Z+2, r1	; 0x02
        _dialog_format.arg_buf_p = _dialog_format.arg_buffers[_dialog_format.arg_index].arg_buf;
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	90 93 4d 05 	sts	0x054D, r25
     9aa:	80 93 4c 05 	sts	0x054C, r24
      }
      _dialog_await_state = ARG_MAX_STATE;
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	80 93 3d 05 	sts	0x053D, r24
     9b4:	08 95       	ret
     9b6:	80 91 46 05 	lds	r24, 0x0546
     9ba:	90 91 47 05 	lds	r25, 0x0547
     9be:	dc 01       	movw	r26, r24
     9c0:	11 96       	adiw	r26, 0x01	; 1
    _dialog_format.response_p++;

    if (*(_dialog_format.response_p) == '%') {
      //Byte stuffing
      _dialog_await_state = NORMAL_STATE;
    } else if (*_dialog_format.response_p == '*') {
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	01 96       	adiw	r24, 0x01	; 1
    } else {
      // args: %nnB
      // Find the arg. cnt
      _dialog_format.arg_cnt = 0;
      do {
        _dialog_format.arg_cnt *= 10;
     9c8:	22 0f       	add	r18, r18
     9ca:	32 2f       	mov	r19, r18
     9cc:	33 0f       	add	r19, r19
     9ce:	33 0f       	add	r19, r19
     9d0:	23 0f       	add	r18, r19
        _dialog_format.arg_cnt += (*_dialog_format.response_p) - '0';
     9d2:	20 53       	subi	r18, 0x30	; 48
     9d4:	30 81       	ld	r19, Z
     9d6:	23 0f       	add	r18, r19
      } while (*(++_dialog_format.response_p) != 'B');
     9d8:	3d 91       	ld	r19, X+
     9da:	32 34       	cpi	r19, 0x42	; 66
     9dc:	99 f7       	brne	.-26     	; 0x9c4 <_dialog_prepare_for_next_byte+0xb2>
     9de:	20 93 48 05 	sts	0x0548, r18
      _dialog_format.response_p++;
     9e2:	32 96       	adiw	r30, 0x02	; 2
     9e4:	f0 93 47 05 	sts	0x0547, r31
     9e8:	e0 93 46 05 	sts	0x0546, r30
      // Are argument buffers allocated?
      if (_dialog_format.arg_buffers != 0) {
     9ec:	80 91 4a 05 	lds	r24, 0x054A
     9f0:	90 91 4b 05 	lds	r25, 0x054B
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	b1 f0       	breq	.+44     	; 0xa24 <_dialog_prepare_for_next_byte+0x112>
        _dialog_format.arg_index++;
     9f8:	a9 e4       	ldi	r26, 0x49	; 73
     9fa:	b5 e0       	ldi	r27, 0x05	; 5
     9fc:	ec 91       	ld	r30, X
     9fe:	ef 5f       	subi	r30, 0xFF	; 255
     a00:	ec 93       	st	X, r30
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len = 0;
     a02:	ff 27       	eor	r31, r31
     a04:	e7 fd       	sbrc	r30, 7
     a06:	f0 95       	com	r31
     a08:	9f 01       	movw	r18, r30
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	e2 0f       	add	r30, r18
     a10:	f3 1f       	adc	r31, r19
     a12:	e8 0f       	add	r30, r24
     a14:	f9 1f       	adc	r31, r25
     a16:	12 82       	std	Z+2, r1	; 0x02
        _dialog_format.arg_buf_p = _dialog_format.arg_buffers[_dialog_format.arg_index].arg_buf;
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	90 93 4d 05 	sts	0x054D, r25
     a20:	80 93 4c 05 	sts	0x054C, r24
      }
      _dialog_await_state = ARG_STATE;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 3d 05 	sts	0x053D, r24
     a2a:	08 95       	ret
    }
  } else {
    _dialog_await_state = NORMAL_STATE;
     a2c:	10 92 3d 05 	sts	0x053D, r1
     a30:	08 95       	ret

00000a32 <_dialog_goto_state>:
 IF the new state is either DIALOG_OK_STOP or DIALOG_ERROR_STOP then the call_back function will be called.
 ELSE the new State will be setup.

 @param[in] new_state the new state to goto.
 */
static void _dialog_goto_state(const uint8_t new_state) {
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
  _dialog_second_counter = 0;
     a36:	10 92 41 05 	sts	0x0541, r1
  _dialog_current_state = new_state;
     a3a:	80 93 40 05 	sts	0x0540, r24
  if (new_state == DIALOG_ERROR_STOP || new_state == DIALOG_OK_STOP) {
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	98 0f       	add	r25, r24
     a42:	92 30       	cpi	r25, 0x02	; 2
     a44:	30 f4       	brcc	.+12     	; 0xa52 <_dialog_goto_state+0x20>
    (*_dialog_pf_call_back)(new_state);
     a46:	e0 91 39 05 	lds	r30, 0x0539
     a4a:	f0 91 3a 05 	lds	r31, 0x053A
     a4e:	19 95       	eicall
     a50:	4b c0       	rjmp	.+150    	; 0xae8 <_dialog_goto_state+0xb6>
  } else {
    // Send command if any
    if (_dialog_seq[new_state].command_length != 0) {
     a52:	9b e0       	ldi	r25, 0x0B	; 11
     a54:	89 9f       	mul	r24, r25
     a56:	e0 01       	movw	r28, r0
     a58:	11 24       	eor	r1, r1
     a5a:	a0 91 3e 05 	lds	r26, 0x053E
     a5e:	b0 91 3f 05 	lds	r27, 0x053F
     a62:	ac 0f       	add	r26, r28
     a64:	bd 1f       	adc	r27, r29
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	6c 91       	ld	r22, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
     a6c:	66 23       	and	r22, r22
     a6e:	39 f0       	breq	.+14     	; 0xa7e <_dialog_goto_state+0x4c>
      (*_dialog_pf_send)(_dialog_seq[new_state].command,
     a70:	e0 91 3b 05 	lds	r30, 0x053B
     a74:	f0 91 3c 05 	lds	r31, 0x053C
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	19 95       	eicall
      _dialog_seq[new_state].command_length);
    }

    // Any response to wait for?
    if (_dialog_seq[new_state].responce_format_length > 0) {
     a7e:	80 91 3e 05 	lds	r24, 0x053E
     a82:	90 91 3f 05 	lds	r25, 0x053F
     a86:	c8 0f       	add	r28, r24
     a88:	d9 1f       	adc	r29, r25
     a8a:	2d 81       	ldd	r18, Y+5	; 0x05
     a8c:	22 23       	and	r18, r18
     a8e:	51 f1       	breq	.+84     	; 0xae4 <_dialog_goto_state+0xb2>
 @param[in] len
 @param[out] *buf
 */
static void _dialog_await(uint8_t new_state) {
  _dialog_format.response_p = _dialog_format.response =
                  _dialog_seq[new_state].responce_format;
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
 @param[in] response_format to be waited for..
 @param[in] len
 @param[out] *buf
 */
static void _dialog_await(uint8_t new_state) {
  _dialog_format.response_p = _dialog_format.response =
     a94:	90 93 43 05 	sts	0x0543, r25
     a98:	80 93 42 05 	sts	0x0542, r24
     a9c:	90 93 47 05 	sts	0x0547, r25
     aa0:	80 93 46 05 	sts	0x0546, r24
                  _dialog_seq[new_state].responce_format;
  _dialog_format.arg_buffers = _dialog_seq[new_state].arg_buffers;
     aa4:	e9 85       	ldd	r30, Y+9	; 0x09
     aa6:	fa 85       	ldd	r31, Y+10	; 0x0a
     aa8:	f0 93 4b 05 	sts	0x054B, r31
     aac:	e0 93 4a 05 	sts	0x054A, r30
  _dialog_format.arg_index = -1;
     ab0:	3f ef       	ldi	r19, 0xFF	; 255
     ab2:	30 93 49 05 	sts	0x0549, r19
  // Are any arg_buffers specified?
  if (_dialog_format.arg_buffers) {
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	31 f0       	breq	.+12     	; 0xac6 <_dialog_goto_state+0x94>
    _dialog_format.arg_buf_p = _dialog_seq[new_state].arg_buffers[0].arg_buf;
     aba:	40 81       	ld	r20, Z
     abc:	51 81       	ldd	r21, Z+1	; 0x01
     abe:	50 93 4d 05 	sts	0x054D, r21
     ac2:	40 93 4c 05 	sts	0x054C, r20
  }
  _dialog_format.last = _dialog_seq[new_state].responce_format
                  + _dialog_seq[new_state].responce_format_length - 1;
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	31 09       	sbc	r19, r1
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
  _dialog_format.arg_index = -1;
  // Are any arg_buffers specified?
  if (_dialog_format.arg_buffers) {
    _dialog_format.arg_buf_p = _dialog_seq[new_state].arg_buffers[0].arg_buf;
  }
  _dialog_format.last = _dialog_seq[new_state].responce_format
     ad0:	90 93 45 05 	sts	0x0545, r25
     ad4:	80 93 44 05 	sts	0x0544, r24
                  + _dialog_seq[new_state].responce_format_length - 1;
  _dialog_prepare_for_next_byte();
     ad8:	1c df       	rcall	.-456    	; 0x912 <_dialog_prepare_for_next_byte>
    }

    // Any response to wait for?
    if (_dialog_seq[new_state].responce_format_length > 0) {
      _dialog_await(new_state);
      _dialog_second_counter = _dialog_seq[new_state].max_response_time
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	80 93 41 05 	sts	0x0541, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <_dialog_goto_state+0xb6>
                      + 1; // add one because of 1 sec jitter in second timer
    } else {
      _dialog_goto_state(_dialog_seq[new_state].ok_state);
     ae4:	8f 81       	ldd	r24, Y+7	; 0x07
     ae6:	a5 df       	rcall	.-182    	; 0xa32 <_dialog_goto_state>
    }
  }
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <dialog_start>:
 @endcode
 */
void dialog_start(dialog_seq_t *p_seq,
		void (*pf_send)(uint8_t *command, uint8_t command_length),
		void (*pf_call_back)(uint8_t result)) {
  _dialog_seq = p_seq;
     aee:	90 93 3f 05 	sts	0x053F, r25
     af2:	80 93 3e 05 	sts	0x053E, r24
  _dialog_pf_send = pf_send;
     af6:	70 93 3c 05 	sts	0x053C, r23
     afa:	60 93 3b 05 	sts	0x053B, r22
  _dialog_pf_call_back = pf_call_back;
     afe:	50 93 3a 05 	sts	0x053A, r21
     b02:	40 93 39 05 	sts	0x0539, r20
  _dialog_current_state = 0;
     b06:	10 92 40 05 	sts	0x0540, r1
  _dialog_goto_state(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	92 cf       	rjmp	.-220    	; 0xa32 <_dialog_goto_state>
     b0e:	08 95       	ret

00000b10 <dialog_tick>:
 @brief Housekeeping function that must be called every second when a dialog is active.

 If the maximum wait time is exceeded the the dialog will change to error state.
 */
void dialog_tick() {
  if (_dialog_second_counter) {
     b10:	80 91 41 05 	lds	r24, 0x0541
     b14:	88 23       	and	r24, r24
     b16:	91 f0       	breq	.+36     	; 0xb3c <dialog_tick+0x2c>
    if (--_dialog_second_counter == 0) {
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	80 93 41 05 	sts	0x0541, r24
     b1e:	81 11       	cpse	r24, r1
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <dialog_tick+0x2c>
      _dialog_goto_state(_dialog_seq[_dialog_current_state].error_state);
     b22:	80 91 40 05 	lds	r24, 0x0540
     b26:	e0 91 3e 05 	lds	r30, 0x053E
     b2a:	f0 91 3f 05 	lds	r31, 0x053F
     b2e:	9b e0       	ldi	r25, 0x0B	; 11
     b30:	89 9f       	mul	r24, r25
     b32:	e0 0d       	add	r30, r0
     b34:	f1 1d       	adc	r31, r1
     b36:	11 24       	eor	r1, r1
     b38:	80 85       	ldd	r24, Z+8	; 0x08
     b3a:	7b cf       	rjmp	.-266    	; 0xa32 <_dialog_goto_state>
     b3c:	08 95       	ret

00000b3e <dialog_byte_received>:
If there are specified a pointer to an argument buffer in the current state of the dialog_seq, the received argument bytes will be stored in this buffer, else the argument values will be thrown away.

 When/If the expected response string is received the dialog state is changed to the current dialog states OK state.
 @param[in] byte received from device we are communication with.
 */
void dialog_byte_received(const uint8_t byte) {
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	98 2e       	mov	r9, r24
  uint8_t _retry;
  
  switch (_dialog_await_state) {
     b5c:	80 91 3d 05 	lds	r24, 0x053D
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <dialog_byte_received+0x28>
     b64:	42 c0       	rjmp	.+132    	; 0xbea <dialog_byte_received+0xac>
     b66:	20 f0       	brcs	.+8      	; 0xb70 <dialog_byte_received+0x32>
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	09 f4       	brne	.+2      	; 0xb6e <dialog_byte_received+0x30>
     b6c:	70 c0       	rjmp	.+224    	; 0xc4e <dialog_byte_received+0x110>
     b6e:	af c0       	rjmp	.+350    	; 0xcce <dialog_byte_received+0x190>
     b70:	81 2c       	mov	r8, r1
  case NORMAL_STATE:
    _retry = 0;
    do {
      if (*_dialog_format.response_p++ != byte) {
     b72:	c6 e4       	ldi	r28, 0x46	; 70
     b74:	d5 e0       	ldi	r29, 0x05	; 5
        // Problem: not the expected byte
        // Lets try from the beginning of the format
        _dialog_format.response_p = _dialog_format.response;
     b76:	0f 2e       	mov	r0, r31
     b78:	f2 e4       	ldi	r31, 0x42	; 66
     b7a:	cf 2e       	mov	r12, r31
     b7c:	f5 e0       	ldi	r31, 0x05	; 5
     b7e:	df 2e       	mov	r13, r31
     b80:	f0 2d       	mov	r31, r0

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
     b82:	0f 2e       	mov	r0, r31
     b84:	f9 e4       	ldi	r31, 0x49	; 73
     b86:	ef 2e       	mov	r14, r31
     b88:	f5 e0       	ldi	r31, 0x05	; 5
     b8a:	ff 2e       	mov	r15, r31
     b8c:	f0 2d       	mov	r31, r0
        if (_dialog_format.arg_buffers != 0) {
     b8e:	0a e4       	ldi	r16, 0x4A	; 74
     b90:	15 e0       	ldi	r17, 0x05	; 5
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
        }

        if (!_retry) {
     b92:	77 24       	eor	r7, r7
     b94:	73 94       	inc	r7
     b96:	61 2c       	mov	r6, r1
        _dialog_format.response_p = _dialog_format.response;

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
        if (_dialog_format.arg_buffers != 0) {
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
     b98:	0f 2e       	mov	r0, r31
     b9a:	fc e4       	ldi	r31, 0x4C	; 76
     b9c:	af 2e       	mov	r10, r31
     b9e:	f5 e0       	ldi	r31, 0x05	; 5
     ba0:	bf 2e       	mov	r11, r31
     ba2:	f0 2d       	mov	r31, r0
  
  switch (_dialog_await_state) {
  case NORMAL_STATE:
    _retry = 0;
    do {
      if (*_dialog_format.response_p++ != byte) {
     ba4:	e8 81       	ld	r30, Y
     ba6:	f9 81       	ldd	r31, Y+1	; 0x01
     ba8:	9f 01       	movw	r18, r30
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	39 83       	std	Y+1, r19	; 0x01
     bb0:	28 83       	st	Y, r18
     bb2:	80 81       	ld	r24, Z
     bb4:	89 15       	cp	r24, r9
     bb6:	a9 f0       	breq	.+42     	; 0xbe2 <dialog_byte_received+0xa4>
        // Problem: not the expected byte
        // Lets try from the beginning of the format
        _dialog_format.response_p = _dialog_format.response;
     bb8:	d6 01       	movw	r26, r12
     bba:	8d 91       	ld	r24, X+
     bbc:	9c 91       	ld	r25, X
     bbe:	99 83       	std	Y+1, r25	; 0x01
     bc0:	88 83       	st	Y, r24

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
     bc2:	f7 01       	movw	r30, r14
     bc4:	10 82       	st	Z, r1
        if (_dialog_format.arg_buffers != 0) {
     bc6:	d8 01       	movw	r26, r16
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <dialog_byte_received+0x9c>
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	f5 01       	movw	r30, r10
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	80 83       	st	Z, r24
        }

        if (!_retry) {
     bda:	87 2d       	mov	r24, r7
     bdc:	81 10       	cpse	r8, r1
     bde:	86 2d       	mov	r24, r6
          _retry = 1;
     be0:	88 2e       	mov	r8, r24
        } else {
          _retry = 0;
        }
      }
      _dialog_prepare_for_next_byte();
     be2:	97 de       	rcall	.-722    	; 0x912 <_dialog_prepare_for_next_byte>
    } while (_retry);
     be4:	81 10       	cpse	r8, r1
     be6:	de cf       	rjmp	.-68     	; 0xba4 <dialog_byte_received+0x66>
     be8:	72 c0       	rjmp	.+228    	; 0xcce <dialog_byte_received+0x190>
    break;

  case ARG_STATE:
    // Test if buffer is specified
    if (_dialog_format.arg_buffers != 0) {
     bea:	20 91 4a 05 	lds	r18, 0x054A
     bee:	30 91 4b 05 	lds	r19, 0x054B
     bf2:	21 15       	cp	r18, r1
     bf4:	31 05       	cpc	r19, r1
     bf6:	11 f1       	breq	.+68     	; 0xc3c <dialog_byte_received+0xfe>
      *_dialog_format.arg_buf_p++ = byte;
     bf8:	ac e4       	ldi	r26, 0x4C	; 76
     bfa:	b5 e0       	ldi	r27, 0x05	; 5
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	cf 01       	movw	r24, r30
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	8d 93       	st	X+, r24
     c08:	9c 93       	st	X, r25
     c0a:	90 82       	st	Z, r9
      // Update length of received argument in arg_buffers
      _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len++;
     c0c:	e0 91 49 05 	lds	r30, 0x0549
     c10:	ff 27       	eor	r31, r31
     c12:	e7 fd       	sbrc	r30, 7
     c14:	f0 95       	com	r31
     c16:	cf 01       	movw	r24, r30
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	e8 0f       	add	r30, r24
     c1e:	f9 1f       	adc	r31, r25
     c20:	e2 0f       	add	r30, r18
     c22:	f3 1f       	adc	r31, r19
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	82 83       	std	Z+2, r24	; 0x02

      // have we got all the bytes in the this argument
      if (--(_dialog_format.arg_cnt) == 0) {
     c2a:	e8 e4       	ldi	r30, 0x48	; 72
     c2c:	f5 e0       	ldi	r31, 0x05	; 5
     c2e:	80 81       	ld	r24, Z
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	80 83       	st	Z, r24
     c34:	81 11       	cpse	r24, r1
     c36:	4b c0       	rjmp	.+150    	; 0xcce <dialog_byte_received+0x190>
        _dialog_prepare_for_next_byte();
     c38:	6c de       	rcall	.-808    	; 0x912 <_dialog_prepare_for_next_byte>
     c3a:	49 c0       	rjmp	.+146    	; 0xcce <dialog_byte_received+0x190>
      }
    } else if (--(_dialog_format.arg_cnt) == 0) {
     c3c:	e8 e4       	ldi	r30, 0x48	; 72
     c3e:	f5 e0       	ldi	r31, 0x05	; 5
     c40:	80 81       	ld	r24, Z
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	80 83       	st	Z, r24
     c46:	81 11       	cpse	r24, r1
     c48:	42 c0       	rjmp	.+132    	; 0xcce <dialog_byte_received+0x190>
        _dialog_prepare_for_next_byte();
     c4a:	63 de       	rcall	.-826    	; 0x912 <_dialog_prepare_for_next_byte>
     c4c:	40 c0       	rjmp	.+128    	; 0xcce <dialog_byte_received+0x190>
    }
    break;

  case ARG_MAX_STATE:
    // Test if we still are receiving argument bytes
    if (byte != *_dialog_format.response_p) {
     c4e:	e0 91 46 05 	lds	r30, 0x0546
     c52:	f0 91 47 05 	lds	r31, 0x0547
     c56:	80 81       	ld	r24, Z
     c58:	89 15       	cp	r24, r9
     c5a:	51 f1       	breq	.+84     	; 0xcb0 <dialog_byte_received+0x172>
      // Test if buffer is specified
      if (_dialog_format.arg_buffers != 0) {
     c5c:	80 91 4a 05 	lds	r24, 0x054A
     c60:	90 91 4b 05 	lds	r25, 0x054B
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	09 f4       	brne	.+2      	; 0xc6a <dialog_byte_received+0x12c>
     c68:	4e c0       	rjmp	.+156    	; 0xd06 <dialog_byte_received+0x1c8>
        *_dialog_format.arg_buf_p++ = byte;
     c6a:	ac e4       	ldi	r26, 0x4C	; 76
     c6c:	b5 e0       	ldi	r27, 0x05	; 5
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	9f 01       	movw	r18, r30
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	2d 93       	st	X+, r18
     c7c:	3c 93       	st	X, r19
     c7e:	90 82       	st	Z, r9
        // Update length of received argument in arg_buffers
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len++;
     c80:	20 91 49 05 	lds	r18, 0x0549
     c84:	33 27       	eor	r19, r19
     c86:	27 fd       	sbrc	r18, 7
     c88:	30 95       	com	r19
     c8a:	f9 01       	movw	r30, r18
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	82 83       	std	Z+2, r24	; 0x02

        // Have we received the maximum number of bytes in argument?
        if (--(_dialog_format.arg_cnt) == 0) {
     c9e:	e8 e4       	ldi	r30, 0x48	; 72
     ca0:	f5 e0       	ldi	r31, 0x05	; 5
     ca2:	80 81       	ld	r24, Z
     ca4:	81 50       	subi	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
     ca8:	81 11       	cpse	r24, r1
     caa:	11 c0       	rjmp	.+34     	; 0xcce <dialog_byte_received+0x190>
          _dialog_prepare_for_next_byte();
     cac:	32 de       	rcall	.-924    	; 0x912 <_dialog_prepare_for_next_byte>
     cae:	0f c0       	rjmp	.+30     	; 0xcce <dialog_byte_received+0x190>
        }
      }
    } else if (--(_dialog_format.arg_cnt) == 0) { // or have we received the maximum allowed no of bytes in the argument?
     cb0:	a8 e4       	ldi	r26, 0x48	; 72
     cb2:	b5 e0       	ldi	r27, 0x05	; 5
     cb4:	8c 91       	ld	r24, X
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	8c 93       	st	X, r24
     cba:	81 11       	cpse	r24, r1
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <dialog_byte_received+0x184>
      _dialog_prepare_for_next_byte();
     cbe:	29 de       	rcall	.-942    	; 0x912 <_dialog_prepare_for_next_byte>
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <dialog_byte_received+0x190>
    } else {
      // Next byte in normal response is received
      _dialog_format.response_p++;
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	f0 93 47 05 	sts	0x0547, r31
     cc8:	e0 93 46 05 	sts	0x0546, r30
      _dialog_prepare_for_next_byte();
     ccc:	22 de       	rcall	.-956    	; 0x912 <_dialog_prepare_for_next_byte>
  default:
    break;
  }

  // Test if we are done - have received all bytes in this state of the dialog_seq
  if ((_dialog_await_state == NORMAL_STATE) && (_dialog_format.response_p > _dialog_format.last)) {
     cce:	80 91 3d 05 	lds	r24, 0x053D
     cd2:	81 11       	cpse	r24, r1
     cd4:	18 c0       	rjmp	.+48     	; 0xd06 <dialog_byte_received+0x1c8>
     cd6:	20 91 46 05 	lds	r18, 0x0546
     cda:	30 91 47 05 	lds	r19, 0x0547
     cde:	80 91 44 05 	lds	r24, 0x0544
     ce2:	90 91 45 05 	lds	r25, 0x0545
     ce6:	82 17       	cp	r24, r18
     ce8:	93 07       	cpc	r25, r19
     cea:	68 f4       	brcc	.+26     	; 0xd06 <dialog_byte_received+0x1c8>
    // OK - goto OK state
    _dialog_goto_state(_dialog_seq[_dialog_current_state].ok_state);
     cec:	80 91 40 05 	lds	r24, 0x0540
     cf0:	e0 91 3e 05 	lds	r30, 0x053E
     cf4:	f0 91 3f 05 	lds	r31, 0x053F
     cf8:	9b e0       	ldi	r25, 0x0B	; 11
     cfa:	89 9f       	mul	r24, r25
     cfc:	e0 0d       	add	r30, r0
     cfe:	f1 1d       	adc	r31, r1
     d00:	11 24       	eor	r1, r1
     d02:	87 81       	ldd	r24, Z+7	; 0x07
     d04:	96 de       	rcall	.-724    	; 0xa32 <_dialog_goto_state>
  }
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	08 95       	ret

00000d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d24:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d26:	03 96       	adiw	r24, 0x03	; 3
     d28:	92 83       	std	Z+2, r25	; 0x02
     d2a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	34 83       	std	Z+4, r19	; 0x04
     d32:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d34:	96 83       	std	Z+6, r25	; 0x06
     d36:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d38:	90 87       	std	Z+8, r25	; 0x08
     d3a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d3c:	10 82       	st	Z, r1
     d3e:	08 95       	ret

00000d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d40:	fc 01       	movw	r30, r24
     d42:	11 86       	std	Z+9, r1	; 0x09
     d44:	10 86       	std	Z+8, r1	; 0x08
     d46:	08 95       	ret

00000d48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	9c 01       	movw	r18, r24
     d4e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     d50:	dc 01       	movw	r26, r24
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	cd 91       	ld	r28, X+
     d56:	dc 91       	ld	r29, X
     d58:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d5a:	d3 83       	std	Z+3, r29	; 0x03
     d5c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	95 83       	std	Z+5, r25	; 0x05
     d64:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	dc 01       	movw	r26, r24
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	7c 93       	st	X, r23
     d70:	6e 93       	st	-X, r22
     d72:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     d74:	7d 83       	std	Y+5, r23	; 0x05
     d76:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d78:	31 87       	std	Z+9, r19	; 0x09
     d7a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     d7c:	f9 01       	movw	r30, r18
     d7e:	80 81       	ld	r24, Z
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 83       	st	Z, r24
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d90:	48 81       	ld	r20, Y
     d92:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d94:	4f 3f       	cpi	r20, 0xFF	; 255
     d96:	2f ef       	ldi	r18, 0xFF	; 255
     d98:	52 07       	cpc	r21, r18
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d9c:	fc 01       	movw	r30, r24
     d9e:	a7 81       	ldd	r26, Z+7	; 0x07
     da0:	b0 85       	ldd	r27, Z+8	; 0x08
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     da4:	dc 01       	movw	r26, r24
     da6:	13 96       	adiw	r26, 0x03	; 3
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	13 97       	sbiw	r26, 0x03	; 3
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	42 17       	cp	r20, r18
     db6:	53 07       	cpc	r21, r19
     db8:	10 f0       	brcs	.+4      	; 0xdbe <vListInsert+0x34>
     dba:	df 01       	movw	r26, r30
     dbc:	f5 cf       	rjmp	.-22     	; 0xda8 <vListInsert+0x1e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	ed 91       	ld	r30, X+
     dc2:	fc 91       	ld	r31, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	fb 83       	std	Y+3, r31	; 0x03
     dc8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     dca:	d5 83       	std	Z+5, r29	; 0x05
     dcc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     dce:	bd 83       	std	Y+5, r27	; 0x05
     dd0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     dd2:	13 96       	adiw	r26, 0x03	; 3
     dd4:	dc 93       	st	X, r29
     dd6:	ce 93       	st	-X, r28
     dd8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     dda:	99 87       	std	Y+9, r25	; 0x09
     ddc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     dde:	fc 01       	movw	r30, r24
     de0:	20 81       	ld	r18, Z
     de2:	2f 5f       	subi	r18, 0xFF	; 255
     de4:	20 83       	st	Z, r18
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     df2:	a0 85       	ldd	r26, Z+8	; 0x08
     df4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     df6:	c2 81       	ldd	r28, Z+2	; 0x02
     df8:	d3 81       	ldd	r29, Z+3	; 0x03
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	95 81       	ldd	r25, Z+5	; 0x05
     dfe:	9d 83       	std	Y+5, r25	; 0x05
     e00:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e02:	c4 81       	ldd	r28, Z+4	; 0x04
     e04:	d5 81       	ldd	r29, Z+5	; 0x05
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	9b 83       	std	Y+3, r25	; 0x03
     e0c:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	cd 91       	ld	r28, X+
     e12:	dc 91       	ld	r29, X
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	ce 17       	cp	r28, r30
     e18:	df 07       	cpc	r29, r31
     e1a:	31 f4       	brne	.+12     	; 0xe28 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     e28:	11 86       	std	Z+9, r1	; 0x09
     e2a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     e2c:	8c 91       	ld	r24, X
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <pxPortInitialiseStack>:
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */

#if defined( portUSE_TIMER0 )
   /* Setup clock source and compare match behaviour. Assuming 328p*/
	portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
     e38:	31 e1       	ldi	r19, 0x11	; 17
     e3a:	fc 01       	movw	r30, r24
     e3c:	30 83       	st	Z, r19
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	22 e2       	ldi	r18, 0x22	; 34
     e42:	20 83       	st	Z, r18
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	a3 e3       	ldi	r26, 0x33	; 51
     e48:	a0 83       	st	Z, r26
     e4a:	31 97       	sbiw	r30, 0x01	; 1
     e4c:	60 83       	st	Z, r22
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	70 83       	st	Z, r23
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	10 82       	st	Z, r1
     e56:	31 97       	sbiw	r30, 0x01	; 1
     e58:	10 82       	st	Z, r1
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	60 e8       	ldi	r22, 0x80	; 128
     e5e:	60 83       	st	Z, r22
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	10 82       	st	Z, r1
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	62 e0       	ldi	r22, 0x02	; 2
     e70:	60 83       	st	Z, r22
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	63 e0       	ldi	r22, 0x03	; 3
     e76:	60 83       	st	Z, r22
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	60 83       	st	Z, r22
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	60 83       	st	Z, r22
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	60 83       	st	Z, r22
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	67 e0       	ldi	r22, 0x07	; 7
     e8e:	60 83       	st	Z, r22
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	68 e0       	ldi	r22, 0x08	; 8
     e94:	60 83       	st	Z, r22
     e96:	31 97       	sbiw	r30, 0x01	; 1
     e98:	69 e0       	ldi	r22, 0x09	; 9
     e9a:	60 83       	st	Z, r22
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	60 e1       	ldi	r22, 0x10	; 16
     ea0:	60 83       	st	Z, r22
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	30 83       	st	Z, r19
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	32 e1       	ldi	r19, 0x12	; 18
     eaa:	30 83       	st	Z, r19
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	33 e1       	ldi	r19, 0x13	; 19
     eb0:	30 83       	st	Z, r19
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	34 e1       	ldi	r19, 0x14	; 20
     eb6:	30 83       	st	Z, r19
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	35 e1       	ldi	r19, 0x15	; 21
     ebc:	30 83       	st	Z, r19
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	36 e1       	ldi	r19, 0x16	; 22
     ec2:	30 83       	st	Z, r19
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	37 e1       	ldi	r19, 0x17	; 23
     ec8:	30 83       	st	Z, r19
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	38 e1       	ldi	r19, 0x18	; 24
     ece:	30 83       	st	Z, r19
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	39 e1       	ldi	r19, 0x19	; 25
     ed4:	30 83       	st	Z, r19
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	30 e2       	ldi	r19, 0x20	; 32
     eda:	30 83       	st	Z, r19
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	31 e2       	ldi	r19, 0x21	; 33
     ee0:	30 83       	st	Z, r19
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	20 83       	st	Z, r18
     ee6:	31 97       	sbiw	r30, 0x01	; 1
     ee8:	23 e2       	ldi	r18, 0x23	; 35
     eea:	20 83       	st	Z, r18
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	40 83       	st	Z, r20
     ef0:	31 97       	sbiw	r30, 0x01	; 1
     ef2:	50 83       	st	Z, r21
     ef4:	31 97       	sbiw	r30, 0x01	; 1
     ef6:	26 e2       	ldi	r18, 0x26	; 38
     ef8:	20 83       	st	Z, r18
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	27 e2       	ldi	r18, 0x27	; 39
     efe:	20 83       	st	Z, r18
     f00:	31 97       	sbiw	r30, 0x01	; 1
     f02:	28 e2       	ldi	r18, 0x28	; 40
     f04:	20 83       	st	Z, r18
     f06:	31 97       	sbiw	r30, 0x01	; 1
     f08:	29 e2       	ldi	r18, 0x29	; 41
     f0a:	20 83       	st	Z, r18
     f0c:	31 97       	sbiw	r30, 0x01	; 1
     f0e:	20 e3       	ldi	r18, 0x30	; 48
     f10:	20 83       	st	Z, r18
     f12:	31 97       	sbiw	r30, 0x01	; 1
     f14:	21 e3       	ldi	r18, 0x31	; 49
     f16:	20 83       	st	Z, r18
     f18:	89 97       	sbiw	r24, 0x29	; 41
     f1a:	08 95       	ret

00000f1c <xPortStartScheduler>:
     f1c:	88 ee       	ldi	r24, 0xE8	; 232
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	90 93 51 05 	sts	0x0551, r25
     f24:	80 93 50 05 	sts	0x0550, r24
     f28:	90 93 4f 05 	sts	0x054F, r25
     f2c:	80 93 4e 05 	sts	0x054E, r24
     f30:	89 ef       	ldi	r24, 0xF9	; 249
     f32:	87 bd       	out	0x27, r24	; 39
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	84 bd       	out	0x24, r24	; 36
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	85 bd       	out	0x25, r24	; 37
     f3c:	ee e6       	ldi	r30, 0x6E	; 110
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	80 83       	st	Z, r24
     f46:	a0 91 71 0f 	lds	r26, 0x0F71
     f4a:	b0 91 72 0f 	lds	r27, 0x0F72
     f4e:	cd 91       	ld	r28, X+
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	dd 91       	ld	r29, X+
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	9f 90       	pop	r9
     f84:	8f 90       	pop	r8
     f86:	7f 90       	pop	r7
     f88:	6f 90       	pop	r6
     f8a:	5f 90       	pop	r5
     f8c:	4f 90       	pop	r4
     f8e:	3f 90       	pop	r3
     f90:	2f 90       	pop	r2
     f92:	1f 90       	pop	r1
     f94:	0f 90       	pop	r0
     f96:	0c be       	out	0x3c, r0	; 60
     f98:	0f 90       	pop	r0
     f9a:	0b be       	out	0x3b, r0	; 59
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	08 95       	ret
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 95       	ret

00000fa8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	0f 92       	push	r0
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	0c b6       	in	r0, 0x3c	; 60
     fb6:	0f 92       	push	r0
     fb8:	1f 92       	push	r1
     fba:	11 24       	eor	r1, r1
     fbc:	2f 92       	push	r2
     fbe:	3f 92       	push	r3
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	a0 91 71 0f 	lds	r26, 0x0F71
     ffc:	b0 91 72 0f 	lds	r27, 0x0F72
    1000:	0d b6       	in	r0, 0x3d	; 61
    1002:	0d 92       	st	X+, r0
    1004:	0e b6       	in	r0, 0x3e	; 62
    1006:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1008:	b3 d5       	rcall	.+2918   	; 0x1b70 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    100a:	a0 91 71 0f 	lds	r26, 0x0F71
    100e:	b0 91 72 0f 	lds	r27, 0x0F72
    1012:	cd 91       	ld	r28, X+
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	dd 91       	ld	r29, X+
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	9f 90       	pop	r9
    1048:	8f 90       	pop	r8
    104a:	7f 90       	pop	r7
    104c:	6f 90       	pop	r6
    104e:	5f 90       	pop	r5
    1050:	4f 90       	pop	r4
    1052:	3f 90       	pop	r3
    1054:	2f 90       	pop	r2
    1056:	1f 90       	pop	r1
    1058:	0f 90       	pop	r0
    105a:	0c be       	out	0x3c, r0	; 60
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1066:	08 95       	ret

00001068 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	0f 92       	push	r0
    1070:	0b b6       	in	r0, 0x3b	; 59
    1072:	0f 92       	push	r0
    1074:	0c b6       	in	r0, 0x3c	; 60
    1076:	0f 92       	push	r0
    1078:	1f 92       	push	r1
    107a:	11 24       	eor	r1, r1
    107c:	2f 92       	push	r2
    107e:	3f 92       	push	r3
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	a0 91 71 0f 	lds	r26, 0x0F71
    10bc:	b0 91 72 0f 	lds	r27, 0x0F72
    10c0:	0d b6       	in	r0, 0x3d	; 61
    10c2:	0d 92       	st	X+, r0
    10c4:	0e b6       	in	r0, 0x3e	; 62
    10c6:	0d 92       	st	X+, r0

	if (--ticksRemainingInSec == 0)
    10c8:	80 91 4e 05 	lds	r24, 0x054E
    10cc:	90 91 4f 05 	lds	r25, 0x054F
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	90 93 4f 05 	sts	0x054F, r25
    10d6:	80 93 4e 05 	sts	0x054E, r24
    10da:	89 2b       	or	r24, r25
    10dc:	41 f4       	brne	.+16     	; 0x10ee <vPortYieldFromTick+0x86>
	{
//		system_tick();
		ticksRemainingInSec = portTickRateHz;
    10de:	80 91 50 05 	lds	r24, 0x0550
    10e2:	90 91 51 05 	lds	r25, 0x0551
    10e6:	90 93 4f 05 	sts	0x054F, r25
    10ea:	80 93 4e 05 	sts	0x054E, r24
	}

	if( xTaskIncrementTick() != pdFALSE )
    10ee:	ec d3       	rcall	.+2008   	; 0x18c8 <xTaskIncrementTick>
    10f0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    10f2:	3e d5       	rcall	.+2684   	; 0x1b70 <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    10f4:	a0 91 71 0f 	lds	r26, 0x0F71
    10f8:	b0 91 72 0f 	lds	r27, 0x0F72
    10fc:	cd 91       	ld	r28, X+
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	dd 91       	ld	r29, X+
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	8f 90       	pop	r8
    1134:	7f 90       	pop	r7
    1136:	6f 90       	pop	r6
    1138:	5f 90       	pop	r5
    113a:	4f 90       	pop	r4
    113c:	3f 90       	pop	r3
    113e:	2f 90       	pop	r2
    1140:	1f 90       	pop	r1
    1142:	0f 90       	pop	r0
    1144:	0c be       	out	0x3c, r0	; 60
    1146:	0f 90       	pop	r0
    1148:	0b be       	out	0x3b, r0	; 59
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1150:	08 95       	ret

00001152 <__vector_21>:
	 */
//	ISR(TIMER_COMPA_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(TIMER_COMPA_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(TIMER_COMPA_ISR, ISR_NAKED)
	{
		vPortYieldFromTick();
    1152:	8a df       	rcall	.-236    	; 0x1068 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    1154:	18 95       	reti

00001156 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    115c:	af d3       	rcall	.+1886   	; 0x18bc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    115e:	80 91 52 05 	lds	r24, 0x0552
    1162:	90 91 53 05 	lds	r25, 0x0553
    1166:	89 2b       	or	r24, r25
    1168:	31 f4       	brne	.+12     	; 0x1176 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    116a:	87 e5       	ldi	r24, 0x57	; 87
    116c:	95 e0       	ldi	r25, 0x05	; 5
    116e:	90 93 53 05 	sts	0x0553, r25
    1172:	80 93 52 05 	sts	0x0552, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1176:	40 91 54 05 	lds	r20, 0x0554
    117a:	50 91 55 05 	lds	r21, 0x0555
    117e:	9e 01       	movw	r18, r28
    1180:	24 0f       	add	r18, r20
    1182:	35 1f       	adc	r19, r21
    1184:	23 3c       	cpi	r18, 0xC3	; 195
    1186:	89 e0       	ldi	r24, 0x09	; 9
    1188:	38 07       	cpc	r19, r24
    118a:	70 f4       	brcc	.+28     	; 0x11a8 <pvPortMalloc+0x52>
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	70 f4       	brcc	.+28     	; 0x11ae <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1192:	c0 91 52 05 	lds	r28, 0x0552
    1196:	d0 91 53 05 	lds	r29, 0x0553
    119a:	c4 0f       	add	r28, r20
    119c:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
    119e:	30 93 55 05 	sts	0x0555, r19
    11a2:	20 93 54 05 	sts	0x0554, r18
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <pvPortMalloc+0x5c>
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    11b2:	45 d4       	rcall	.+2186   	; 0x1a3e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    11b4:	ce 01       	movw	r24, r28
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    11bc:	08 95       	ret

000011be <prvCopyDataToQueue>:
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	14 2f       	mov	r17, r20
    11c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11ca:	88 23       	and	r24, r24
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <prvCopyDataToQueue+0x8a>
    11ce:	41 11       	cpse	r20, r1
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <prvCopyDataToQueue+0x42>
    11d2:	48 2f       	mov	r20, r24
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <memcpy>
    11de:	2c 8d       	ldd	r18, Y+28	; 0x1c
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	82 0f       	add	r24, r18
    11e6:	91 1d       	adc	r25, r1
    11e8:	9d 83       	std	Y+5, r25	; 0x05
    11ea:	8c 83       	std	Y+4, r24	; 0x04
    11ec:	2a 81       	ldd	r18, Y+2	; 0x02
    11ee:	3b 81       	ldd	r19, Y+3	; 0x03
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	48 f1       	brcs	.+82     	; 0x1248 <prvCopyDataToQueue+0x8a>
    11f6:	88 81       	ld	r24, Y
    11f8:	99 81       	ldd	r25, Y+1	; 0x01
    11fa:	9d 83       	std	Y+5, r25	; 0x05
    11fc:	8c 83       	std	Y+4, r24	; 0x04
    11fe:	24 c0       	rjmp	.+72     	; 0x1248 <prvCopyDataToQueue+0x8a>
    1200:	48 2f       	mov	r20, r24
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <memcpy>
    120c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	31 95       	neg	r19
    1212:	21 95       	neg	r18
    1214:	31 09       	sbc	r19, r1
    1216:	8e 81       	ldd	r24, Y+6	; 0x06
    1218:	9f 81       	ldd	r25, Y+7	; 0x07
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	9f 83       	std	Y+7, r25	; 0x07
    1220:	8e 83       	std	Y+6, r24	; 0x06
    1222:	68 81       	ld	r22, Y
    1224:	79 81       	ldd	r23, Y+1	; 0x01
    1226:	86 17       	cp	r24, r22
    1228:	97 07       	cpc	r25, r23
    122a:	30 f4       	brcc	.+12     	; 0x1238 <prvCopyDataToQueue+0x7a>
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	28 0f       	add	r18, r24
    1232:	39 1f       	adc	r19, r25
    1234:	3f 83       	std	Y+7, r19	; 0x07
    1236:	2e 83       	std	Y+6, r18	; 0x06
    1238:	12 30       	cpi	r17, 0x02	; 2
    123a:	31 f4       	brne	.+12     	; 0x1248 <prvCopyDataToQueue+0x8a>
    123c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <prvCopyDataToQueue+0x8a>
    1242:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	8a 8f       	std	Y+26, r24	; 0x1a
    1248:	8a 8d       	ldd	r24, Y+26	; 0x1a
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 8f       	std	Y+26, r24	; 0x1a
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	08 95       	ret

00001258 <prvCopyDataFromQueue>:
    1258:	fc 01       	movw	r30, r24
    125a:	cb 01       	movw	r24, r22
    125c:	44 8d       	ldd	r20, Z+28	; 0x1c
    125e:	44 23       	and	r20, r20
    1260:	a1 f0       	breq	.+40     	; 0x128a <prvCopyDataFromQueue+0x32>
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	26 81       	ldd	r18, Z+6	; 0x06
    1266:	37 81       	ldd	r19, Z+7	; 0x07
    1268:	24 0f       	add	r18, r20
    126a:	35 1f       	adc	r19, r21
    126c:	37 83       	std	Z+7, r19	; 0x07
    126e:	26 83       	std	Z+6, r18	; 0x06
    1270:	62 81       	ldd	r22, Z+2	; 0x02
    1272:	73 81       	ldd	r23, Z+3	; 0x03
    1274:	26 17       	cp	r18, r22
    1276:	37 07       	cpc	r19, r23
    1278:	20 f0       	brcs	.+8      	; 0x1282 <prvCopyDataFromQueue+0x2a>
    127a:	20 81       	ld	r18, Z
    127c:	31 81       	ldd	r19, Z+1	; 0x01
    127e:	37 83       	std	Z+7, r19	; 0x07
    1280:	26 83       	std	Z+6, r18	; 0x06
    1282:	66 81       	ldd	r22, Z+6	; 0x06
    1284:	77 81       	ldd	r23, Z+7	; 0x07
    1286:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <memcpy>
    128a:	08 95       	ret

0000128c <prvUnlockQueue>:
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	0f 92       	push	r0
    129c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    129e:	18 16       	cp	r1, r24
    12a0:	a4 f4       	brge	.+40     	; 0x12ca <prvUnlockQueue+0x3e>
    12a2:	89 89       	ldd	r24, Y+17	; 0x11
    12a4:	88 23       	and	r24, r24
    12a6:	89 f0       	breq	.+34     	; 0x12ca <prvUnlockQueue+0x3e>
    12a8:	8e 01       	movw	r16, r28
    12aa:	0f 5e       	subi	r16, 0xEF	; 239
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <prvUnlockQueue+0x2a>
    12b0:	89 89       	ldd	r24, Y+17	; 0x11
    12b2:	88 23       	and	r24, r24
    12b4:	51 f0       	breq	.+20     	; 0x12ca <prvUnlockQueue+0x3e>
    12b6:	c8 01       	movw	r24, r16
    12b8:	ed d4       	rcall	.+2522   	; 0x1c94 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	6c d5       	rcall	.+2776   	; 0x1d96 <vTaskMissedYield>
    12be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c0:	81 50       	subi	r24, 0x01	; 1
    12c2:	8e 8f       	std	Y+30, r24	; 0x1e
    12c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c6:	18 16       	cp	r1, r24
    12c8:	9c f3       	brlt	.-26     	; 0x12b0 <prvUnlockQueue+0x24>
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	8e 8f       	std	Y+30, r24	; 0x1e
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12da:	18 16       	cp	r1, r24
    12dc:	a4 f4       	brge	.+40     	; 0x1306 <prvUnlockQueue+0x7a>
    12de:	88 85       	ldd	r24, Y+8	; 0x08
    12e0:	88 23       	and	r24, r24
    12e2:	89 f0       	breq	.+34     	; 0x1306 <prvUnlockQueue+0x7a>
    12e4:	8e 01       	movw	r16, r28
    12e6:	08 5f       	subi	r16, 0xF8	; 248
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <prvUnlockQueue+0x66>
    12ec:	88 85       	ldd	r24, Y+8	; 0x08
    12ee:	88 23       	and	r24, r24
    12f0:	51 f0       	breq	.+20     	; 0x1306 <prvUnlockQueue+0x7a>
    12f2:	c8 01       	movw	r24, r16
    12f4:	cf d4       	rcall	.+2462   	; 0x1c94 <xTaskRemoveFromEventList>
    12f6:	81 11       	cpse	r24, r1
    12f8:	4e d5       	rcall	.+2716   	; 0x1d96 <vTaskMissedYield>
    12fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1302:	18 16       	cp	r1, r24
    1304:	9c f3       	brlt	.-26     	; 0x12ec <prvUnlockQueue+0x60>
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	8d 8f       	std	Y+29, r24	; 0x1d
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <xQueueGenericReset>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	0f 92       	push	r0
    1324:	88 81       	ld	r24, Y
    1326:	99 81       	ldd	r25, Y+1	; 0x01
    1328:	2c 8d       	ldd	r18, Y+28	; 0x1c
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    132e:	72 9f       	mul	r23, r18
    1330:	a0 01       	movw	r20, r0
    1332:	73 9f       	mul	r23, r19
    1334:	50 0d       	add	r21, r0
    1336:	11 24       	eor	r1, r1
    1338:	fc 01       	movw	r30, r24
    133a:	e4 0f       	add	r30, r20
    133c:	f5 1f       	adc	r31, r21
    133e:	fb 83       	std	Y+3, r31	; 0x03
    1340:	ea 83       	std	Y+2, r30	; 0x02
    1342:	1a 8e       	std	Y+26, r1	; 0x1a
    1344:	9d 83       	std	Y+5, r25	; 0x05
    1346:	8c 83       	std	Y+4, r24	; 0x04
    1348:	42 1b       	sub	r20, r18
    134a:	53 0b       	sbc	r21, r19
    134c:	84 0f       	add	r24, r20
    134e:	95 1f       	adc	r25, r21
    1350:	9f 83       	std	Y+7, r25	; 0x07
    1352:	8e 83       	std	Y+6, r24	; 0x06
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	8d 8f       	std	Y+29, r24	; 0x1d
    1358:	8e 8f       	std	Y+30, r24	; 0x1e
    135a:	61 11       	cpse	r22, r1
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <xQueueGenericReset+0x5a>
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	88 23       	and	r24, r24
    1362:	69 f0       	breq	.+26     	; 0x137e <xQueueGenericReset+0x66>
    1364:	ce 01       	movw	r24, r28
    1366:	08 96       	adiw	r24, 0x08	; 8
    1368:	95 d4       	rcall	.+2346   	; 0x1c94 <xTaskRemoveFromEventList>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	41 f4       	brne	.+16     	; 0x137e <xQueueGenericReset+0x66>
    136e:	1c de       	rcall	.-968    	; 0xfa8 <vPortYield>
    1370:	06 c0       	rjmp	.+12     	; 0x137e <xQueueGenericReset+0x66>
    1372:	ce 01       	movw	r24, r28
    1374:	08 96       	adiw	r24, 0x08	; 8
    1376:	d6 dc       	rcall	.-1620   	; 0xd24 <vListInitialise>
    1378:	ce 01       	movw	r24, r28
    137a:	41 96       	adiw	r24, 0x11	; 17
    137c:	d3 dc       	rcall	.-1626   	; 0xd24 <vListInitialise>
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <xQueueGenericCreate>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	08 2f       	mov	r16, r24
    1394:	16 2f       	mov	r17, r22
    1396:	66 23       	and	r22, r22
    1398:	b9 f0       	breq	.+46     	; 0x13c8 <xQueueGenericCreate+0x3e>
    139a:	86 9f       	mul	r24, r22
    139c:	c0 01       	movw	r24, r0
    139e:	11 24       	eor	r1, r1
    13a0:	80 96       	adiw	r24, 0x20	; 32
    13a2:	d9 de       	rcall	.-590    	; 0x1156 <pvPortMalloc>
    13a4:	ec 01       	movw	r28, r24
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <xQueueGenericCreate+0x28>
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <xQueueGenericCreate+0x4a>
    13ac:	d9 83       	std	Y+1, r29	; 0x01
    13ae:	c8 83       	st	Y, r28
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <xQueueGenericCreate+0x32>
    13b2:	9c 01       	movw	r18, r24
    13b4:	21 5e       	subi	r18, 0xE1	; 225
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	39 83       	std	Y+1, r19	; 0x01
    13ba:	28 83       	st	Y, r18
    13bc:	0b 8f       	std	Y+27, r16	; 0x1b
    13be:	1c 8f       	std	Y+28, r17	; 0x1c
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	ce 01       	movw	r24, r28
    13c4:	a9 df       	rcall	.-174    	; 0x1318 <xQueueGenericReset>
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <xQueueGenericCreate+0x4a>
    13c8:	8f e1       	ldi	r24, 0x1F	; 31
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	c4 de       	rcall	.-632    	; 0x1156 <pvPortMalloc>
    13ce:	ec 01       	movw	r28, r24
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f7       	brne	.-40     	; 0x13ac <xQueueGenericCreate+0x22>
    13d4:	ce 01       	movw	r24, r28
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
    13ea:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    13ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	98 17       	cp	r25, r24
    13f2:	10 f0       	brcs	.+4      	; 0x13f8 <xQueueGenericSendFromISR+0x18>
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	d1 f4       	brne	.+52     	; 0x142c <xQueueGenericSendFromISR+0x4c>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    13f8:	42 2f       	mov	r20, r18
    13fa:	ce 01       	movw	r24, r28
    13fc:	e0 de       	rcall	.-576    	; 0x11be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    13fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	79 f4       	brne	.+30     	; 0x1422 <xQueueGenericSendFromISR+0x42>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	88 23       	and	r24, r24
    1408:	99 f0       	breq	.+38     	; 0x1430 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    140a:	ce 01       	movw	r24, r28
    140c:	41 96       	adiw	r24, 0x11	; 17
    140e:	42 d4       	rcall	.+2180   	; 0x1c94 <xTaskRemoveFromEventList>
    1410:	88 23       	and	r24, r24
    1412:	81 f0       	breq	.+32     	; 0x1434 <xQueueGenericSendFromISR+0x54>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1414:	01 15       	cp	r16, r1
    1416:	11 05       	cpc	r17, r1
    1418:	79 f0       	breq	.+30     	; 0x1438 <xQueueGenericSendFromISR+0x58>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	f8 01       	movw	r30, r16
    141e:	80 83       	st	Z, r24
    1420:	0c c0       	rjmp	.+24     	; 0x143a <xQueueGenericSendFromISR+0x5a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1422:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	07 c0       	rjmp	.+14     	; 0x143a <xQueueGenericSendFromISR+0x5a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	05 c0       	rjmp	.+10     	; 0x143a <xQueueGenericSendFromISR+0x5a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	03 c0       	rjmp	.+6      	; 0x143a <xQueueGenericSendFromISR+0x5a>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <xQueueGenericSendFromISR+0x5a>
    1438:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	fc 01       	movw	r30, r24
    144a:	eb 01       	movw	r28, r22
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    144c:	92 8d       	ldd	r25, Z+26	; 0x1a
    144e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1450:	98 17       	cp	r25, r24
    1452:	c0 f4       	brcc	.+48     	; 0x1484 <xQueueGiveFromISR+0x40>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    1454:	82 8d       	ldd	r24, Z+26	; 0x1a
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    145a:	86 8d       	ldd	r24, Z+30	; 0x1e
    145c:	8f 3f       	cpi	r24, 0xFF	; 255
    145e:	69 f4       	brne	.+26     	; 0x147a <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1460:	81 89       	ldd	r24, Z+17	; 0x11
    1462:	88 23       	and	r24, r24
    1464:	89 f0       	breq	.+34     	; 0x1488 <xQueueGiveFromISR+0x44>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1466:	cf 01       	movw	r24, r30
    1468:	41 96       	adiw	r24, 0x11	; 17
    146a:	14 d4       	rcall	.+2088   	; 0x1c94 <xTaskRemoveFromEventList>
    146c:	88 23       	and	r24, r24
    146e:	71 f0       	breq	.+28     	; 0x148c <xQueueGiveFromISR+0x48>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1470:	20 97       	sbiw	r28, 0x00	; 0
    1472:	71 f0       	breq	.+28     	; 0x1490 <xQueueGiveFromISR+0x4c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	88 83       	st	Y, r24
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <xQueueGiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    147a:	86 8d       	ldd	r24, Z+30	; 0x1e
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <xQueueGiveFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <xQueueGiveFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <xQueueGiveFromISR+0x4e>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <xQueueGiveFromISR+0x4e>
    1490:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1498:	9f 92       	push	r9
    149a:	af 92       	push	r10
    149c:	bf 92       	push	r11
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <xQueueGenericReceive+0x18>
    14b0:	1f 92       	push	r1
    14b2:	1f 92       	push	r1
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8c 01       	movw	r16, r24
    14ba:	6b 01       	movw	r12, r22
    14bc:	5d 83       	std	Y+5, r21	; 0x05
    14be:	4c 83       	std	Y+4, r20	; 0x04
    14c0:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    14c2:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    14c4:	99 24       	eor	r9, r9
    14c6:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    14c8:	7c 01       	movw	r14, r24
    14ca:	81 e1       	ldi	r24, 0x11	; 17
    14cc:	e8 0e       	add	r14, r24
    14ce:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    14d6:	f8 01       	movw	r30, r16
    14d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    14da:	88 23       	and	r24, r24
    14dc:	21 f1       	breq	.+72     	; 0x1526 <xQueueGenericReceive+0x8e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    14de:	e6 80       	ldd	r14, Z+6	; 0x06
    14e0:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    14e2:	b6 01       	movw	r22, r12
    14e4:	c8 01       	movw	r24, r16
    14e6:	b8 de       	rcall	.-656    	; 0x1258 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    14e8:	b1 10       	cpse	r11, r1
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    14ec:	f8 01       	movw	r30, r16
    14ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	82 8f       	std	Z+26, r24	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14f4:	80 85       	ldd	r24, Z+8	; 0x08
    14f6:	88 23       	and	r24, r24
    14f8:	91 f0       	breq	.+36     	; 0x151e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    14fa:	c8 01       	movw	r24, r16
    14fc:	08 96       	adiw	r24, 0x08	; 8
    14fe:	ca d3       	rcall	.+1940   	; 0x1c94 <xTaskRemoveFromEventList>
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	69 f4       	brne	.+26     	; 0x151e <xQueueGenericReceive+0x86>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1504:	51 dd       	rcall	.-1374   	; 0xfa8 <vPortYield>
    1506:	0b c0       	rjmp	.+22     	; 0x151e <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1508:	f8 01       	movw	r30, r16
    150a:	f7 82       	std	Z+7, r15	; 0x07
    150c:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    150e:	81 89       	ldd	r24, Z+17	; 0x11
    1510:	88 23       	and	r24, r24
    1512:	29 f0       	breq	.+10     	; 0x151e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1514:	c8 01       	movw	r24, r16
    1516:	41 96       	adiw	r24, 0x11	; 17
    1518:	bd d3       	rcall	.+1914   	; 0x1c94 <xTaskRemoveFromEventList>
    151a:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    151c:	45 dd       	rcall	.-1398   	; 0xfa8 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	44 c0       	rjmp	.+136    	; 0x15ae <xQueueGenericReceive+0x116>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1526:	4c 81       	ldd	r20, Y+4	; 0x04
    1528:	5d 81       	ldd	r21, Y+5	; 0x05
    152a:	45 2b       	or	r20, r21
    152c:	21 f4       	brne	.+8      	; 0x1536 <xQueueGenericReceive+0x9e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	3c c0       	rjmp	.+120    	; 0x15ae <xQueueGenericReceive+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    1536:	a1 10       	cpse	r10, r1
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <xQueueGenericReceive+0xaa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	ee d3       	rcall	.+2012   	; 0x1d1c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1540:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1546:	ba d1       	rcall	.+884    	; 0x18bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	0f 92       	push	r0
    154e:	f8 01       	movw	r30, r16
    1550:	85 8d       	ldd	r24, Z+29	; 0x1d
    1552:	8f 3f       	cpi	r24, 0xFF	; 255
    1554:	09 f4       	brne	.+2      	; 0x1558 <xQueueGenericReceive+0xc0>
    1556:	15 8e       	std	Z+29, r1	; 0x1d
    1558:	f8 01       	movw	r30, r16
    155a:	86 8d       	ldd	r24, Z+30	; 0x1e
    155c:	8f 3f       	cpi	r24, 0xFF	; 255
    155e:	09 f4       	brne	.+2      	; 0x1562 <xQueueGenericReceive+0xca>
    1560:	16 8e       	std	Z+30, r1	; 0x1e
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1566:	be 01       	movw	r22, r28
    1568:	6c 5f       	subi	r22, 0xFC	; 252
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	ce 01       	movw	r24, r28
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	e0 d3       	rcall	.+1984   	; 0x1d32 <xTaskCheckForTimeOut>
    1572:	81 11       	cpse	r24, r1
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <xQueueGenericReceive+0x10e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    157c:	f8 01       	movw	r30, r16
    157e:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1584:	81 11       	cpse	r24, r1
    1586:	0b c0       	rjmp	.+22     	; 0x159e <xQueueGenericReceive+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1588:	6c 81       	ldd	r22, Y+4	; 0x04
    158a:	7d 81       	ldd	r23, Y+5	; 0x05
    158c:	c7 01       	movw	r24, r14
    158e:	68 d3       	rcall	.+1744   	; 0x1c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1590:	c8 01       	movw	r24, r16
    1592:	7c de       	rcall	.-776    	; 0x128c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1594:	54 d2       	rcall	.+1192   	; 0x1a3e <xTaskResumeAll>
    1596:	81 11       	cpse	r24, r1
    1598:	9b cf       	rjmp	.-202    	; 0x14d0 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    159a:	06 dd       	rcall	.-1524   	; 0xfa8 <vPortYield>
    159c:	99 cf       	rjmp	.-206    	; 0x14d0 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    159e:	c8 01       	movw	r24, r16
    15a0:	75 de       	rcall	.-790    	; 0x128c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    15a2:	4d d2       	rcall	.+1178   	; 0x1a3e <xTaskResumeAll>
    15a4:	95 cf       	rjmp	.-214    	; 0x14d0 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    15a6:	c8 01       	movw	r24, r16
    15a8:	71 de       	rcall	.-798    	; 0x128c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    15aa:	49 d2       	rcall	.+1170   	; 0x1a3e <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	08 95       	ret

000015d0 <prvResetNextTaskUnblockTime>:
    15d0:	e0 91 39 0f 	lds	r30, 0x0F39
    15d4:	f0 91 3a 0f 	lds	r31, 0x0F3A
    15d8:	80 81       	ld	r24, Z
    15da:	81 11       	cpse	r24, r1
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <prvResetNextTaskUnblockTime+0x1c>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	90 93 4a 02 	sts	0x024A, r25
    15e6:	80 93 49 02 	sts	0x0249, r24
    15ea:	08 95       	ret
    15ec:	e0 91 39 0f 	lds	r30, 0x0F39
    15f0:	f0 91 3a 0f 	lds	r31, 0x0F3A
    15f4:	05 80       	ldd	r0, Z+5	; 0x05
    15f6:	f6 81       	ldd	r31, Z+6	; 0x06
    15f8:	e0 2d       	mov	r30, r0
    15fa:	06 80       	ldd	r0, Z+6	; 0x06
    15fc:	f7 81       	ldd	r31, Z+7	; 0x07
    15fe:	e0 2d       	mov	r30, r0
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	90 93 4a 02 	sts	0x024A, r25
    1608:	80 93 49 02 	sts	0x0249, r24
    160c:	08 95       	ret

0000160e <prvAddCurrentTaskToDelayedList>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	e0 91 71 0f 	lds	r30, 0x0F71
    1618:	f0 91 72 0f 	lds	r31, 0x0F72
    161c:	93 83       	std	Z+3, r25	; 0x03
    161e:	82 83       	std	Z+2, r24	; 0x02
    1620:	80 91 21 0f 	lds	r24, 0x0F21
    1624:	90 91 22 0f 	lds	r25, 0x0F22
    1628:	c8 17       	cp	r28, r24
    162a:	d9 07       	cpc	r29, r25
    162c:	60 f4       	brcc	.+24     	; 0x1646 <prvAddCurrentTaskToDelayedList+0x38>
    162e:	60 91 71 0f 	lds	r22, 0x0F71
    1632:	70 91 72 0f 	lds	r23, 0x0F72
    1636:	80 91 37 0f 	lds	r24, 0x0F37
    163a:	90 91 38 0f 	lds	r25, 0x0F38
    163e:	6e 5f       	subi	r22, 0xFE	; 254
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	a3 db       	rcall	.-2234   	; 0xd8a <vListInsert>
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <prvAddCurrentTaskToDelayedList+0x64>
    1646:	60 91 71 0f 	lds	r22, 0x0F71
    164a:	70 91 72 0f 	lds	r23, 0x0F72
    164e:	80 91 39 0f 	lds	r24, 0x0F39
    1652:	90 91 3a 0f 	lds	r25, 0x0F3A
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	97 db       	rcall	.-2258   	; 0xd8a <vListInsert>
    165c:	80 91 49 02 	lds	r24, 0x0249
    1660:	90 91 4a 02 	lds	r25, 0x024A
    1664:	c8 17       	cp	r28, r24
    1666:	d9 07       	cpc	r29, r25
    1668:	20 f4       	brcc	.+8      	; 0x1672 <prvAddCurrentTaskToDelayedList+0x64>
    166a:	d0 93 4a 02 	sts	0x024A, r29
    166e:	c0 93 49 02 	sts	0x0249, r28
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <xTaskGenericCreate>:
    1678:	4f 92       	push	r4
    167a:	5f 92       	push	r5
    167c:	6f 92       	push	r6
    167e:	7f 92       	push	r7
    1680:	8f 92       	push	r8
    1682:	9f 92       	push	r9
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	4c 01       	movw	r8, r24
    169a:	5b 01       	movw	r10, r22
    169c:	2a 01       	movw	r4, r20
    169e:	39 01       	movw	r6, r18
    16a0:	c1 14       	cp	r12, r1
    16a2:	d1 04       	cpc	r13, r1
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <xTaskGenericCreate+0x3a>
    16a6:	ca 01       	movw	r24, r20
    16a8:	56 dd       	rcall	.-1364   	; 0x1156 <pvPortMalloc>
    16aa:	6c 01       	movw	r12, r24
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <xTaskGenericCreate+0x3a>
    16b0:	ca c0       	rjmp	.+404    	; 0x1846 <xTaskGenericCreate+0x1ce>
    16b2:	86 e2       	ldi	r24, 0x26	; 38
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	4f dd       	rcall	.-1378   	; 0x1156 <pvPortMalloc>
    16b8:	ec 01       	movw	r28, r24
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	71 f0       	breq	.+28     	; 0x16da <xTaskGenericCreate+0x62>
    16be:	d8 8e       	std	Y+24, r13	; 0x18
    16c0:	cf 8a       	std	Y+23, r12	; 0x17
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	48 1a       	sub	r4, r24
    16c6:	51 08       	sbc	r5, r1
    16c8:	c4 0c       	add	r12, r4
    16ca:	d5 1c       	adc	r13, r5
    16cc:	d5 01       	movw	r26, r10
    16ce:	8c 91       	ld	r24, X
    16d0:	89 8f       	std	Y+25, r24	; 0x19
    16d2:	8c 91       	ld	r24, X
    16d4:	81 11       	cpse	r24, r1
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <xTaskGenericCreate+0x68>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <xTaskGenericCreate+0x8a>
    16da:	c6 01       	movw	r24, r12
    16dc:	6f dd       	rcall	.-1314   	; 0x11bc <vPortFree>
    16de:	b3 c0       	rjmp	.+358    	; 0x1846 <xTaskGenericCreate+0x1ce>
    16e0:	ae 01       	movw	r20, r28
    16e2:	46 5e       	subi	r20, 0xE6	; 230
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	f5 01       	movw	r30, r10
    16e8:	31 96       	adiw	r30, 0x01	; 1
    16ea:	27 e0       	ldi	r18, 0x07	; 7
    16ec:	cf 01       	movw	r24, r30
    16ee:	31 91       	ld	r19, Z+
    16f0:	da 01       	movw	r26, r20
    16f2:	3d 93       	st	X+, r19
    16f4:	ad 01       	movw	r20, r26
    16f6:	dc 01       	movw	r26, r24
    16f8:	8c 91       	ld	r24, X
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <xTaskGenericCreate+0x8a>
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	a9 f7       	brne	.-22     	; 0x16ec <xTaskGenericCreate+0x74>
    1702:	18 a2       	std	Y+32, r1	; 0x20
    1704:	10 2f       	mov	r17, r16
    1706:	04 30       	cpi	r16, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <xTaskGenericCreate+0x94>
    170a:	13 e0       	ldi	r17, 0x03	; 3
    170c:	1e 8b       	std	Y+22, r17	; 0x16
    170e:	5e 01       	movw	r10, r28
    1710:	b2 e0       	ldi	r27, 0x02	; 2
    1712:	ab 0e       	add	r10, r27
    1714:	b1 1c       	adc	r11, r1
    1716:	c5 01       	movw	r24, r10
    1718:	13 db       	rcall	.-2522   	; 0xd40 <vListInitialiseItem>
    171a:	ce 01       	movw	r24, r28
    171c:	0c 96       	adiw	r24, 0x0c	; 12
    171e:	10 db       	rcall	.-2528   	; 0xd40 <vListInitialiseItem>
    1720:	d9 87       	std	Y+9, r29	; 0x09
    1722:	c8 87       	std	Y+8, r28	; 0x08
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	81 1b       	sub	r24, r17
    172a:	91 09       	sbc	r25, r1
    172c:	9d 87       	std	Y+13, r25	; 0x0d
    172e:	8c 87       	std	Y+12, r24	; 0x0c
    1730:	db 8b       	std	Y+19, r29	; 0x13
    1732:	ca 8b       	std	Y+18, r28	; 0x12
    1734:	19 a2       	std	Y+33, r1	; 0x21
    1736:	1a a2       	std	Y+34, r1	; 0x22
    1738:	1b a2       	std	Y+35, r1	; 0x23
    173a:	1c a2       	std	Y+36, r1	; 0x24
    173c:	1d a2       	std	Y+37, r1	; 0x25
    173e:	a3 01       	movw	r20, r6
    1740:	b4 01       	movw	r22, r8
    1742:	c6 01       	movw	r24, r12
    1744:	79 db       	rcall	.-2318   	; 0xe38 <pxPortInitialiseStack>
    1746:	99 83       	std	Y+1, r25	; 0x01
    1748:	88 83       	st	Y, r24
    174a:	e1 14       	cp	r14, r1
    174c:	f1 04       	cpc	r15, r1
    174e:	19 f0       	breq	.+6      	; 0x1756 <xTaskGenericCreate+0xde>
    1750:	f7 01       	movw	r30, r14
    1752:	d1 83       	std	Z+1, r29	; 0x01
    1754:	c0 83       	st	Z, r28
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	0f 92       	push	r0
    175c:	80 91 23 0f 	lds	r24, 0x0F23
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 23 0f 	sts	0x0F23, r24
    1766:	80 91 71 0f 	lds	r24, 0x0F71
    176a:	90 91 72 0f 	lds	r25, 0x0F72
    176e:	89 2b       	or	r24, r25
    1770:	69 f5       	brne	.+90     	; 0x17cc <xTaskGenericCreate+0x154>
    1772:	d0 93 72 0f 	sts	0x0F72, r29
    1776:	c0 93 71 0f 	sts	0x0F71, r28
    177a:	80 91 23 0f 	lds	r24, 0x0F23
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f5       	brne	.+104    	; 0x17ea <xTaskGenericCreate+0x172>
    1782:	8d e4       	ldi	r24, 0x4D	; 77
    1784:	9f e0       	ldi	r25, 0x0F	; 15
    1786:	ce da       	rcall	.-2660   	; 0xd24 <vListInitialise>
    1788:	86 e5       	ldi	r24, 0x56	; 86
    178a:	9f e0       	ldi	r25, 0x0F	; 15
    178c:	cb da       	rcall	.-2666   	; 0xd24 <vListInitialise>
    178e:	8f e5       	ldi	r24, 0x5F	; 95
    1790:	9f e0       	ldi	r25, 0x0F	; 15
    1792:	c8 da       	rcall	.-2672   	; 0xd24 <vListInitialise>
    1794:	88 e6       	ldi	r24, 0x68	; 104
    1796:	9f e0       	ldi	r25, 0x0F	; 15
    1798:	c5 da       	rcall	.-2678   	; 0xd24 <vListInitialise>
    179a:	84 e4       	ldi	r24, 0x44	; 68
    179c:	9f e0       	ldi	r25, 0x0F	; 15
    179e:	c2 da       	rcall	.-2684   	; 0xd24 <vListInitialise>
    17a0:	8b e3       	ldi	r24, 0x3B	; 59
    17a2:	9f e0       	ldi	r25, 0x0F	; 15
    17a4:	bf da       	rcall	.-2690   	; 0xd24 <vListInitialise>
    17a6:	8e e2       	ldi	r24, 0x2E	; 46
    17a8:	9f e0       	ldi	r25, 0x0F	; 15
    17aa:	bc da       	rcall	.-2696   	; 0xd24 <vListInitialise>
    17ac:	85 e2       	ldi	r24, 0x25	; 37
    17ae:	9f e0       	ldi	r25, 0x0F	; 15
    17b0:	b9 da       	rcall	.-2702   	; 0xd24 <vListInitialise>
    17b2:	84 e4       	ldi	r24, 0x44	; 68
    17b4:	9f e0       	ldi	r25, 0x0F	; 15
    17b6:	90 93 3a 0f 	sts	0x0F3A, r25
    17ba:	80 93 39 0f 	sts	0x0F39, r24
    17be:	8b e3       	ldi	r24, 0x3B	; 59
    17c0:	9f e0       	ldi	r25, 0x0F	; 15
    17c2:	90 93 38 0f 	sts	0x0F38, r25
    17c6:	80 93 37 0f 	sts	0x0F37, r24
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <xTaskGenericCreate+0x172>
    17cc:	80 91 1f 0f 	lds	r24, 0x0F1F
    17d0:	81 11       	cpse	r24, r1
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <xTaskGenericCreate+0x172>
    17d4:	e0 91 71 0f 	lds	r30, 0x0F71
    17d8:	f0 91 72 0f 	lds	r31, 0x0F72
    17dc:	86 89       	ldd	r24, Z+22	; 0x16
    17de:	08 17       	cp	r16, r24
    17e0:	20 f0       	brcs	.+8      	; 0x17ea <xTaskGenericCreate+0x172>
    17e2:	d0 93 72 0f 	sts	0x0F72, r29
    17e6:	c0 93 71 0f 	sts	0x0F71, r28
    17ea:	80 91 1b 0f 	lds	r24, 0x0F1B
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 1b 0f 	sts	0x0F1B, r24
    17f4:	8e 89       	ldd	r24, Y+22	; 0x16
    17f6:	90 91 20 0f 	lds	r25, 0x0F20
    17fa:	98 17       	cp	r25, r24
    17fc:	10 f4       	brcc	.+4      	; 0x1802 <xTaskGenericCreate+0x18a>
    17fe:	80 93 20 0f 	sts	0x0F20, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 01       	movw	r18, r24
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	b5 01       	movw	r22, r10
    1818:	83 5b       	subi	r24, 0xB3	; 179
    181a:	90 4f       	sbci	r25, 0xF0	; 240
    181c:	95 da       	rcall	.-2774   	; 0xd48 <vListInsertEnd>
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	80 91 1f 0f 	lds	r24, 0x0F1F
    1826:	88 23       	and	r24, r24
    1828:	51 f0       	breq	.+20     	; 0x183e <xTaskGenericCreate+0x1c6>
    182a:	e0 91 71 0f 	lds	r30, 0x0F71
    182e:	f0 91 72 0f 	lds	r31, 0x0F72
    1832:	86 89       	ldd	r24, Z+22	; 0x16
    1834:	80 17       	cp	r24, r16
    1836:	28 f4       	brcc	.+10     	; 0x1842 <xTaskGenericCreate+0x1ca>
    1838:	b7 db       	rcall	.-2194   	; 0xfa8 <vPortYield>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <xTaskGenericCreate+0x1d0>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <xTaskGenericCreate+0x1d0>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <xTaskGenericCreate+0x1d0>
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	4f 90       	pop	r4
    1868:	08 95       	ret

0000186a <vTaskStartScheduler>:
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	a1 2c       	mov	r10, r1
    187a:	b1 2c       	mov	r11, r1
    187c:	c1 2c       	mov	r12, r1
    187e:	d1 2c       	mov	r13, r1
    1880:	e1 2c       	mov	r14, r1
    1882:	f1 2c       	mov	r15, r1
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	49 eb       	ldi	r20, 0xB9	; 185
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	66 e1       	ldi	r22, 0x16	; 22
    1890:	74 e0       	ldi	r23, 0x04	; 4
    1892:	8c e8       	ldi	r24, 0x8C	; 140
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	f0 de       	rcall	.-544    	; 0x1678 <xTaskGenericCreate>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	41 f4       	brne	.+16     	; 0x18ac <vTaskStartScheduler+0x42>
    189c:	f8 94       	cli
    189e:	80 93 1f 0f 	sts	0x0F1F, r24
    18a2:	10 92 22 0f 	sts	0x0F22, r1
    18a6:	10 92 21 0f 	sts	0x0F21, r1
    18aa:	38 db       	rcall	.-2448   	; 0xf1c <xPortStartScheduler>
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	08 95       	ret

000018bc <vTaskSuspendAll>:
    18bc:	80 91 1a 0f 	lds	r24, 0x0F1A
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 1a 0f 	sts	0x0F1A, r24
    18c6:	08 95       	ret

000018c8 <xTaskIncrementTick>:
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	80 91 1a 0f 	lds	r24, 0x0F1A
    18dc:	81 11       	cpse	r24, r1
    18de:	96 c0       	rjmp	.+300    	; 0x1a0c <xTaskIncrementTick+0x144>
    18e0:	80 91 21 0f 	lds	r24, 0x0F21
    18e4:	90 91 22 0f 	lds	r25, 0x0F22
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	90 93 22 0f 	sts	0x0F22, r25
    18ee:	80 93 21 0f 	sts	0x0F21, r24
    18f2:	e0 90 21 0f 	lds	r14, 0x0F21
    18f6:	f0 90 22 0f 	lds	r15, 0x0F22
    18fa:	e1 14       	cp	r14, r1
    18fc:	f1 04       	cpc	r15, r1
    18fe:	b1 f4       	brne	.+44     	; 0x192c <xTaskIncrementTick+0x64>
    1900:	80 91 39 0f 	lds	r24, 0x0F39
    1904:	90 91 3a 0f 	lds	r25, 0x0F3A
    1908:	20 91 37 0f 	lds	r18, 0x0F37
    190c:	30 91 38 0f 	lds	r19, 0x0F38
    1910:	30 93 3a 0f 	sts	0x0F3A, r19
    1914:	20 93 39 0f 	sts	0x0F39, r18
    1918:	90 93 38 0f 	sts	0x0F38, r25
    191c:	80 93 37 0f 	sts	0x0F37, r24
    1920:	80 91 1c 0f 	lds	r24, 0x0F1C
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	80 93 1c 0f 	sts	0x0F1C, r24
    192a:	52 de       	rcall	.-860    	; 0x15d0 <prvResetNextTaskUnblockTime>
    192c:	80 91 49 02 	lds	r24, 0x0249
    1930:	90 91 4a 02 	lds	r25, 0x024A
    1934:	e8 16       	cp	r14, r24
    1936:	f9 06       	cpc	r15, r25
    1938:	08 f4       	brcc	.+2      	; 0x193c <xTaskIncrementTick+0x74>
    193a:	51 c0       	rjmp	.+162    	; 0x19de <xTaskIncrementTick+0x116>
    193c:	d1 2c       	mov	r13, r1
    193e:	cc 24       	eor	r12, r12
    1940:	c3 94       	inc	r12
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <xTaskIncrementTick+0x7e>
    1944:	dc 2c       	mov	r13, r12
    1946:	e0 91 39 0f 	lds	r30, 0x0F39
    194a:	f0 91 3a 0f 	lds	r31, 0x0F3A
    194e:	80 81       	ld	r24, Z
    1950:	81 11       	cpse	r24, r1
    1952:	07 c0       	rjmp	.+14     	; 0x1962 <xTaskIncrementTick+0x9a>
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	9f ef       	ldi	r25, 0xFF	; 255
    1958:	90 93 4a 02 	sts	0x024A, r25
    195c:	80 93 49 02 	sts	0x0249, r24
    1960:	3f c0       	rjmp	.+126    	; 0x19e0 <xTaskIncrementTick+0x118>
    1962:	e0 91 39 0f 	lds	r30, 0x0F39
    1966:	f0 91 3a 0f 	lds	r31, 0x0F3A
    196a:	05 80       	ldd	r0, Z+5	; 0x05
    196c:	f6 81       	ldd	r31, Z+6	; 0x06
    196e:	e0 2d       	mov	r30, r0
    1970:	c6 81       	ldd	r28, Z+6	; 0x06
    1972:	d7 81       	ldd	r29, Z+7	; 0x07
    1974:	2a 81       	ldd	r18, Y+2	; 0x02
    1976:	3b 81       	ldd	r19, Y+3	; 0x03
    1978:	e2 16       	cp	r14, r18
    197a:	f3 06       	cpc	r15, r19
    197c:	28 f4       	brcc	.+10     	; 0x1988 <xTaskIncrementTick+0xc0>
    197e:	30 93 4a 02 	sts	0x024A, r19
    1982:	20 93 49 02 	sts	0x0249, r18
    1986:	2c c0       	rjmp	.+88     	; 0x19e0 <xTaskIncrementTick+0x118>
    1988:	8e 01       	movw	r16, r28
    198a:	0e 5f       	subi	r16, 0xFE	; 254
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	c8 01       	movw	r24, r16
    1990:	2d da       	rcall	.-2982   	; 0xdec <uxListRemove>
    1992:	8c 89       	ldd	r24, Y+20	; 0x14
    1994:	9d 89       	ldd	r25, Y+21	; 0x15
    1996:	89 2b       	or	r24, r25
    1998:	19 f0       	breq	.+6      	; 0x19a0 <xTaskIncrementTick+0xd8>
    199a:	ce 01       	movw	r24, r28
    199c:	0c 96       	adiw	r24, 0x0c	; 12
    199e:	26 da       	rcall	.-2996   	; 0xdec <uxListRemove>
    19a0:	2e 89       	ldd	r18, Y+22	; 0x16
    19a2:	80 91 20 0f 	lds	r24, 0x0F20
    19a6:	82 17       	cp	r24, r18
    19a8:	10 f4       	brcc	.+4      	; 0x19ae <xTaskIncrementTick+0xe6>
    19aa:	20 93 20 0f 	sts	0x0F20, r18
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	c9 01       	movw	r24, r18
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	82 0f       	add	r24, r18
    19c0:	93 1f       	adc	r25, r19
    19c2:	b8 01       	movw	r22, r16
    19c4:	83 5b       	subi	r24, 0xB3	; 179
    19c6:	90 4f       	sbci	r25, 0xF0	; 240
    19c8:	bf d9       	rcall	.-3202   	; 0xd48 <vListInsertEnd>
    19ca:	e0 91 71 0f 	lds	r30, 0x0F71
    19ce:	f0 91 72 0f 	lds	r31, 0x0F72
    19d2:	9e 89       	ldd	r25, Y+22	; 0x16
    19d4:	86 89       	ldd	r24, Z+22	; 0x16
    19d6:	98 17       	cp	r25, r24
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <xTaskIncrementTick+0x114>
    19da:	b4 cf       	rjmp	.-152    	; 0x1944 <xTaskIncrementTick+0x7c>
    19dc:	b4 cf       	rjmp	.-152    	; 0x1946 <xTaskIncrementTick+0x7e>
    19de:	d1 2c       	mov	r13, r1
    19e0:	e0 91 71 0f 	lds	r30, 0x0F71
    19e4:	f0 91 72 0f 	lds	r31, 0x0F72
    19e8:	86 89       	ldd	r24, Z+22	; 0x16
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	fc 01       	movw	r30, r24
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	ee 0f       	add	r30, r30
    19f8:	ff 1f       	adc	r31, r31
    19fa:	8e 0f       	add	r24, r30
    19fc:	9f 1f       	adc	r25, r31
    19fe:	fc 01       	movw	r30, r24
    1a00:	e3 5b       	subi	r30, 0xB3	; 179
    1a02:	f0 4f       	sbci	r31, 0xF0	; 240
    1a04:	80 81       	ld	r24, Z
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <xTaskIncrementTick+0x152>
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <xTaskIncrementTick+0x156>
    1a0c:	80 91 1e 0f 	lds	r24, 0x0F1E
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 93 1e 0f 	sts	0x0F1E, r24
    1a16:	d1 2c       	mov	r13, r1
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <xTaskIncrementTick+0x156>
    1a1a:	dd 24       	eor	r13, r13
    1a1c:	d3 94       	inc	r13
    1a1e:	80 91 1d 0f 	lds	r24, 0x0F1D
    1a22:	88 23       	and	r24, r24
    1a24:	11 f0       	breq	.+4      	; 0x1a2a <xTaskIncrementTick+0x162>
    1a26:	dd 24       	eor	r13, r13
    1a28:	d3 94       	inc	r13
    1a2a:	8d 2d       	mov	r24, r13
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	ff 90       	pop	r15
    1a36:	ef 90       	pop	r14
    1a38:	df 90       	pop	r13
    1a3a:	cf 90       	pop	r12
    1a3c:	08 95       	ret

00001a3e <xTaskResumeAll>:
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	0f 92       	push	r0
    1a52:	80 91 1a 0f 	lds	r24, 0x0F1A
    1a56:	81 50       	subi	r24, 0x01	; 1
    1a58:	80 93 1a 0f 	sts	0x0F1A, r24
    1a5c:	80 91 1a 0f 	lds	r24, 0x0F1A
    1a60:	81 11       	cpse	r24, r1
    1a62:	5c c0       	rjmp	.+184    	; 0x1b1c <xTaskResumeAll+0xde>
    1a64:	80 91 23 0f 	lds	r24, 0x0F23
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <xTaskResumeAll+0x30>
    1a6c:	59 c0       	rjmp	.+178    	; 0x1b20 <xTaskResumeAll+0xe2>
    1a6e:	0f 2e       	mov	r0, r31
    1a70:	fe e2       	ldi	r31, 0x2E	; 46
    1a72:	ef 2e       	mov	r14, r31
    1a74:	ff e0       	ldi	r31, 0x0F	; 15
    1a76:	ff 2e       	mov	r15, r31
    1a78:	f0 2d       	mov	r31, r0
    1a7a:	dd 24       	eor	r13, r13
    1a7c:	d3 94       	inc	r13
    1a7e:	2d c0       	rjmp	.+90     	; 0x1ada <xTaskResumeAll+0x9c>
    1a80:	e0 91 33 0f 	lds	r30, 0x0F33
    1a84:	f0 91 34 0f 	lds	r31, 0x0F34
    1a88:	c6 81       	ldd	r28, Z+6	; 0x06
    1a8a:	d7 81       	ldd	r29, Z+7	; 0x07
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	0c 96       	adiw	r24, 0x0c	; 12
    1a90:	ad d9       	rcall	.-3238   	; 0xdec <uxListRemove>
    1a92:	8e 01       	movw	r16, r28
    1a94:	0e 5f       	subi	r16, 0xFE	; 254
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	c8 01       	movw	r24, r16
    1a9a:	a8 d9       	rcall	.-3248   	; 0xdec <uxListRemove>
    1a9c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a9e:	90 91 20 0f 	lds	r25, 0x0F20
    1aa2:	98 17       	cp	r25, r24
    1aa4:	10 f4       	brcc	.+4      	; 0x1aaa <xTaskResumeAll+0x6c>
    1aa6:	80 93 20 0f 	sts	0x0F20, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 01       	movw	r18, r24
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	22 0f       	add	r18, r18
    1ab4:	33 1f       	adc	r19, r19
    1ab6:	22 0f       	add	r18, r18
    1ab8:	33 1f       	adc	r19, r19
    1aba:	82 0f       	add	r24, r18
    1abc:	93 1f       	adc	r25, r19
    1abe:	b8 01       	movw	r22, r16
    1ac0:	83 5b       	subi	r24, 0xB3	; 179
    1ac2:	90 4f       	sbci	r25, 0xF0	; 240
    1ac4:	41 d9       	rcall	.-3454   	; 0xd48 <vListInsertEnd>
    1ac6:	e0 91 71 0f 	lds	r30, 0x0F71
    1aca:	f0 91 72 0f 	lds	r31, 0x0F72
    1ace:	9e 89       	ldd	r25, Y+22	; 0x16
    1ad0:	86 89       	ldd	r24, Z+22	; 0x16
    1ad2:	98 17       	cp	r25, r24
    1ad4:	10 f0       	brcs	.+4      	; 0x1ada <xTaskResumeAll+0x9c>
    1ad6:	d0 92 1d 0f 	sts	0x0F1D, r13
    1ada:	f7 01       	movw	r30, r14
    1adc:	80 81       	ld	r24, Z
    1ade:	81 11       	cpse	r24, r1
    1ae0:	cf cf       	rjmp	.-98     	; 0x1a80 <xTaskResumeAll+0x42>
    1ae2:	80 91 1e 0f 	lds	r24, 0x0F1E
    1ae6:	88 23       	and	r24, r24
    1ae8:	91 f0       	breq	.+36     	; 0x1b0e <xTaskResumeAll+0xd0>
    1aea:	80 91 1e 0f 	lds	r24, 0x0F1E
    1aee:	88 23       	and	r24, r24
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <xTaskResumeAll+0xd0>
    1af2:	c1 e0       	ldi	r28, 0x01	; 1
    1af4:	e9 de       	rcall	.-558    	; 0x18c8 <xTaskIncrementTick>
    1af6:	81 11       	cpse	r24, r1
    1af8:	c0 93 1d 0f 	sts	0x0F1D, r28
    1afc:	80 91 1e 0f 	lds	r24, 0x0F1E
    1b00:	81 50       	subi	r24, 0x01	; 1
    1b02:	80 93 1e 0f 	sts	0x0F1E, r24
    1b06:	80 91 1e 0f 	lds	r24, 0x0F1E
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	f3 cf       	rjmp	.-26     	; 0x1af4 <xTaskResumeAll+0xb6>
    1b0e:	80 91 1d 0f 	lds	r24, 0x0F1D
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	39 f4       	brne	.+14     	; 0x1b24 <xTaskResumeAll+0xe6>
    1b16:	48 da       	rcall	.-2928   	; 0xfa8 <vPortYield>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <xTaskResumeAll+0xe8>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <xTaskResumeAll+0xe8>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <xTaskResumeAll+0xe8>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	08 95       	ret

00001b3a <vTaskDelay>:
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	91 f0       	breq	.+36     	; 0x1b68 <vTaskDelay+0x2e>
    1b44:	bb de       	rcall	.-650    	; 0x18bc <vTaskSuspendAll>
    1b46:	80 91 21 0f 	lds	r24, 0x0F21
    1b4a:	90 91 22 0f 	lds	r25, 0x0F22
    1b4e:	c8 0f       	add	r28, r24
    1b50:	d9 1f       	adc	r29, r25
    1b52:	80 91 71 0f 	lds	r24, 0x0F71
    1b56:	90 91 72 0f 	lds	r25, 0x0F72
    1b5a:	02 96       	adiw	r24, 0x02	; 2
    1b5c:	47 d9       	rcall	.-3442   	; 0xdec <uxListRemove>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	56 dd       	rcall	.-1364   	; 0x160e <prvAddCurrentTaskToDelayedList>
    1b62:	6d df       	rcall	.-294    	; 0x1a3e <xTaskResumeAll>
    1b64:	81 11       	cpse	r24, r1
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <vTaskDelay+0x30>
    1b68:	1f da       	rcall	.-3010   	; 0xfa8 <vPortYield>
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	08 95       	ret

00001b70 <vTaskSwitchContext>:
    1b70:	80 91 1a 0f 	lds	r24, 0x0F1A
    1b74:	88 23       	and	r24, r24
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <vTaskSwitchContext+0x10>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 1d 0f 	sts	0x0F1D, r24
    1b7e:	08 95       	ret
    1b80:	10 92 1d 0f 	sts	0x0F1D, r1
    1b84:	a0 91 71 0f 	lds	r26, 0x0F71
    1b88:	b0 91 72 0f 	lds	r27, 0x0F72
    1b8c:	e0 91 71 0f 	lds	r30, 0x0F71
    1b90:	f0 91 72 0f 	lds	r31, 0x0F72
    1b94:	2d 91       	ld	r18, X+
    1b96:	3c 91       	ld	r19, X
    1b98:	87 89       	ldd	r24, Z+23	; 0x17
    1b9a:	90 8d       	ldd	r25, Z+24	; 0x18
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	58 f0       	brcs	.+22     	; 0x1bb8 <vTaskSwitchContext+0x48>
    1ba2:	60 91 71 0f 	lds	r22, 0x0F71
    1ba6:	70 91 72 0f 	lds	r23, 0x0F72
    1baa:	80 91 71 0f 	lds	r24, 0x0F71
    1bae:	90 91 72 0f 	lds	r25, 0x0F72
    1bb2:	67 5e       	subi	r22, 0xE7	; 231
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	35 d3       	rcall	.+1642   	; 0x2222 <vApplicationStackOverflowHook>
    1bb8:	80 91 20 0f 	lds	r24, 0x0F20
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	8e 0f       	add	r24, r30
    1bce:	9f 1f       	adc	r25, r31
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	e3 5b       	subi	r30, 0xB3	; 179
    1bd4:	f0 4f       	sbci	r31, 0xF0	; 240
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 11       	cpse	r24, r1
    1bda:	17 c0       	rjmp	.+46     	; 0x1c0a <vTaskSwitchContext+0x9a>
    1bdc:	80 91 20 0f 	lds	r24, 0x0F20
    1be0:	81 50       	subi	r24, 0x01	; 1
    1be2:	80 93 20 0f 	sts	0x0F20, r24
    1be6:	80 91 20 0f 	lds	r24, 0x0F20
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	fc 01       	movw	r30, r24
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	8e 0f       	add	r24, r30
    1bfc:	9f 1f       	adc	r25, r31
    1bfe:	fc 01       	movw	r30, r24
    1c00:	e3 5b       	subi	r30, 0xB3	; 179
    1c02:	f0 4f       	sbci	r31, 0xF0	; 240
    1c04:	80 81       	ld	r24, Z
    1c06:	88 23       	and	r24, r24
    1c08:	49 f3       	breq	.-46     	; 0x1bdc <vTaskSwitchContext+0x6c>
    1c0a:	e0 91 20 0f 	lds	r30, 0x0F20
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	cf 01       	movw	r24, r30
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	e3 5b       	subi	r30, 0xB3	; 179
    1c24:	f0 4f       	sbci	r31, 0xF0	; 240
    1c26:	a1 81       	ldd	r26, Z+1	; 0x01
    1c28:	b2 81       	ldd	r27, Z+2	; 0x02
    1c2a:	12 96       	adiw	r26, 0x02	; 2
    1c2c:	0d 90       	ld	r0, X+
    1c2e:	bc 91       	ld	r27, X
    1c30:	a0 2d       	mov	r26, r0
    1c32:	b2 83       	std	Z+2, r27	; 0x02
    1c34:	a1 83       	std	Z+1, r26	; 0x01
    1c36:	cf 01       	movw	r24, r30
    1c38:	03 96       	adiw	r24, 0x03	; 3
    1c3a:	a8 17       	cp	r26, r24
    1c3c:	b9 07       	cpc	r27, r25
    1c3e:	31 f4       	brne	.+12     	; 0x1c4c <vTaskSwitchContext+0xdc>
    1c40:	12 96       	adiw	r26, 0x02	; 2
    1c42:	8d 91       	ld	r24, X+
    1c44:	9c 91       	ld	r25, X
    1c46:	13 97       	sbiw	r26, 0x03	; 3
    1c48:	92 83       	std	Z+2, r25	; 0x02
    1c4a:	81 83       	std	Z+1, r24	; 0x01
    1c4c:	01 80       	ldd	r0, Z+1	; 0x01
    1c4e:	f2 81       	ldd	r31, Z+2	; 0x02
    1c50:	e0 2d       	mov	r30, r0
    1c52:	86 81       	ldd	r24, Z+6	; 0x06
    1c54:	97 81       	ldd	r25, Z+7	; 0x07
    1c56:	90 93 72 0f 	sts	0x0F72, r25
    1c5a:	80 93 71 0f 	sts	0x0F71, r24
    1c5e:	08 95       	ret

00001c60 <vTaskPlaceOnEventList>:
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	eb 01       	movw	r28, r22
    1c66:	60 91 71 0f 	lds	r22, 0x0F71
    1c6a:	70 91 72 0f 	lds	r23, 0x0F72
    1c6e:	64 5f       	subi	r22, 0xF4	; 244
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8b d8       	rcall	.-3818   	; 0xd8a <vListInsert>
    1c74:	80 91 71 0f 	lds	r24, 0x0F71
    1c78:	90 91 72 0f 	lds	r25, 0x0F72
    1c7c:	02 96       	adiw	r24, 0x02	; 2
    1c7e:	b6 d8       	rcall	.-3732   	; 0xdec <uxListRemove>
    1c80:	80 91 21 0f 	lds	r24, 0x0F21
    1c84:	90 91 22 0f 	lds	r25, 0x0F22
    1c88:	8c 0f       	add	r24, r28
    1c8a:	9d 1f       	adc	r25, r29
    1c8c:	c0 dc       	rcall	.-1664   	; 0x160e <prvAddCurrentTaskToDelayedList>
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <xTaskRemoveFromEventList>:
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	15 96       	adiw	r26, 0x05	; 5
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	16 97       	sbiw	r26, 0x06	; 6
    1ca6:	c6 81       	ldd	r28, Z+6	; 0x06
    1ca8:	d7 81       	ldd	r29, Z+7	; 0x07
    1caa:	8e 01       	movw	r16, r28
    1cac:	04 5f       	subi	r16, 0xF4	; 244
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	9c d8       	rcall	.-3784   	; 0xdec <uxListRemove>
    1cb4:	80 91 1a 0f 	lds	r24, 0x0F1A
    1cb8:	81 11       	cpse	r24, r1
    1cba:	1a c0       	rjmp	.+52     	; 0x1cf0 <xTaskRemoveFromEventList+0x5c>
    1cbc:	0a 50       	subi	r16, 0x0A	; 10
    1cbe:	11 09       	sbc	r17, r1
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	94 d8       	rcall	.-3800   	; 0xdec <uxListRemove>
    1cc4:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc6:	90 91 20 0f 	lds	r25, 0x0F20
    1cca:	98 17       	cp	r25, r24
    1ccc:	10 f4       	brcc	.+4      	; 0x1cd2 <xTaskRemoveFromEventList+0x3e>
    1cce:	80 93 20 0f 	sts	0x0F20, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	b8 01       	movw	r22, r16
    1ce8:	83 5b       	subi	r24, 0xB3	; 179
    1cea:	90 4f       	sbci	r25, 0xF0	; 240
    1cec:	2d d8       	rcall	.-4006   	; 0xd48 <vListInsertEnd>
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <xTaskRemoveFromEventList+0x64>
    1cf0:	b8 01       	movw	r22, r16
    1cf2:	8e e2       	ldi	r24, 0x2E	; 46
    1cf4:	9f e0       	ldi	r25, 0x0F	; 15
    1cf6:	28 d8       	rcall	.-4016   	; 0xd48 <vListInsertEnd>
    1cf8:	e0 91 71 0f 	lds	r30, 0x0F71
    1cfc:	f0 91 72 0f 	lds	r31, 0x0F72
    1d00:	9e 89       	ldd	r25, Y+22	; 0x16
    1d02:	86 89       	ldd	r24, Z+22	; 0x16
    1d04:	89 17       	cp	r24, r25
    1d06:	20 f4       	brcc	.+8      	; 0x1d10 <xTaskRemoveFromEventList+0x7c>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 1d 0f 	sts	0x0F1D, r24
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <xTaskRemoveFromEventList+0x7e>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1d1c:	20 91 1c 0f 	lds	r18, 0x0F1C
    1d20:	fc 01       	movw	r30, r24
    1d22:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1d24:	20 91 21 0f 	lds	r18, 0x0F21
    1d28:	30 91 22 0f 	lds	r19, 0x0F22
    1d2c:	32 83       	std	Z+2, r19	; 0x02
    1d2e:	21 83       	std	Z+1, r18	; 0x01
    1d30:	08 95       	ret

00001d32 <xTaskCheckForTimeOut>:
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1d38:	20 91 21 0f 	lds	r18, 0x0F21
    1d3c:	30 91 22 0f 	lds	r19, 0x0F22
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1d40:	40 91 1c 0f 	lds	r20, 0x0F1C
    1d44:	dc 01       	movw	r26, r24
    1d46:	5c 91       	ld	r21, X
    1d48:	54 17       	cp	r21, r20
    1d4a:	39 f0       	breq	.+14     	; 0x1d5a <xTaskCheckForTimeOut+0x28>
    1d4c:	11 96       	adiw	r26, 0x01	; 1
    1d4e:	4d 91       	ld	r20, X+
    1d50:	5c 91       	ld	r21, X
    1d52:	12 97       	sbiw	r26, 0x02	; 2
    1d54:	24 17       	cp	r18, r20
    1d56:	35 07       	cpc	r19, r21
    1d58:	c0 f4       	brcc	.+48     	; 0x1d8a <xTaskCheckForTimeOut+0x58>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	ed 91       	ld	r30, X+
    1d60:	fc 91       	ld	r31, X
    1d62:	12 97       	sbiw	r26, 0x02	; 2
    1d64:	db 01       	movw	r26, r22
    1d66:	4d 91       	ld	r20, X+
    1d68:	5c 91       	ld	r21, X
    1d6a:	d9 01       	movw	r26, r18
    1d6c:	ae 1b       	sub	r26, r30
    1d6e:	bf 0b       	sbc	r27, r31
    1d70:	a4 17       	cp	r26, r20
    1d72:	b5 07       	cpc	r27, r21
    1d74:	60 f4       	brcc	.+24     	; 0x1d8e <xTaskCheckForTimeOut+0x5c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1d76:	e2 1b       	sub	r30, r18
    1d78:	f3 0b       	sbc	r31, r19
    1d7a:	4e 0f       	add	r20, r30
    1d7c:	5f 1f       	adc	r21, r31
    1d7e:	fb 01       	movw	r30, r22
    1d80:	51 83       	std	Z+1, r21	; 0x01
    1d82:	40 83       	st	Z, r20
			vTaskSetTimeOutState( pxTimeOut );
    1d84:	cb df       	rcall	.-106    	; 0x1d1c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <xTaskCheckForTimeOut+0x5e>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1d94:	08 95       	ret

00001d96 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 1d 0f 	sts	0x0F1D, r24
    1d9c:	08 95       	ret

00001d9e <bt_status_call_back>:
uint8_t bt_initialised = 0;
uint8_t charCount=0;
char sendValue[2] = {};

void bt_status_call_back(uint8_t status) {
	if (status == DIALOG_OK_STOP) {
    1d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <bt_status_call_back+0xa>
		bt_initialised = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	80 93 76 0f 	sts	0x0F76, r24
    1da8:	08 95       	ret

00001daa <vjustATask>:

	/* Cycle for ever, one cycle each time the goal line is passed. */
	for( ;; )
	{
		// Wait for goal line is passed
		xSemaphoreTake(goal_line_semaphore, portMAX_DELAY);
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	4f ef       	ldi	r20, 0xFF	; 255
    1dae:	5f ef       	ldi	r21, 0xFF	; 255
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	80 91 7a 0f 	lds	r24, 0x0F7A
    1db8:	90 91 7b 0f 	lds	r25, 0x0F7B
    1dbc:	6d db       	rcall	.-2342   	; 0x1498 <xQueueGenericReceive>
    1dbe:	f5 cf       	rjmp	.-22     	; 0x1daa <vjustATask>

00001dc0 <learn>:
				break;
		}
	}
}

void learn() {
    1dc0:	8f 92       	push	r8
    1dc2:	9f 92       	push	r9
    1dc4:	af 92       	push	r10
    1dc6:	bf 92       	push	r11
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	64 97       	sbiw	r28, 0x14	; 20
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	0f 2e       	mov	r0, r31
    1dea:	f4 e6       	ldi	r31, 0x64	; 100
    1dec:	ef 2e       	mov	r14, r31
    1dee:	f1 2c       	mov	r15, r1
    1df0:	f0 2d       	mov	r31, r0
			uint16_t raw_x = get_raw_x_accel();
			uint16_t raw_y = get_raw_y_accel();
			uint16_t raw_z = get_raw_z_accel();
			//uint16_t raw_rx = get_raw_x_rotation();
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
    1df2:	0f 2e       	mov	r0, r31
    1df4:	fb e1       	ldi	r31, 0x1B	; 27
    1df6:	cf 2e       	mov	r12, r31
    1df8:	f4 e0       	ldi	r31, 0x04	; 4
    1dfa:	df 2e       	mov	r13, r31
    1dfc:	f0 2d       	mov	r31, r0
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0f 5f       	subi	r16, 0xFF	; 255
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	char buf[20];
	
	for (i= 0; i<100; i++)
	{
			uint16_t raw_x = get_raw_x_accel();
    1e04:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
    1e08:	b8 2e       	mov	r11, r24
    1e0a:	a9 2e       	mov	r10, r25
			uint16_t raw_y = get_raw_y_accel();
    1e0c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <get_raw_y_accel>
    1e10:	98 2e       	mov	r9, r24
    1e12:	89 2e       	mov	r8, r25
			uint16_t raw_z = get_raw_z_accel();
    1e14:	0e 94 87 03 	call	0x70e	; 0x70e <get_raw_z_accel>
			//uint16_t raw_rx = get_raw_x_rotation();
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
    1e18:	9f 93       	push	r25
    1e1a:	8f 93       	push	r24
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	df 92       	push	r13
    1e26:	cf 92       	push	r12
    1e28:	1f 93       	push	r17
    1e2a:	0f 93       	push	r16
    1e2c:	63 d7       	rcall	.+3782   	; 0x2cf4 <sprintf>
			bt_send_bytes((uint8_t *)buf, strlen(buf));
    1e2e:	f8 01       	movw	r30, r16
    1e30:	01 90       	ld	r0, Z+
    1e32:	00 20       	and	r0, r0
    1e34:	e9 f7       	brne	.-6      	; 0x1e30 <learn+0x70>
    1e36:	31 97       	sbiw	r30, 0x01	; 1
    1e38:	bf 01       	movw	r22, r30
    1e3a:	60 1b       	sub	r22, r16
    1e3c:	71 0b       	sbc	r23, r17
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
			vTaskDelay( 100/ portTICK_PERIOD_MS);
    1e44:	84 e6       	ldi	r24, 0x64	; 100
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	78 de       	rcall	.-784    	; 0x1b3a <vTaskDelay>
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	e8 1a       	sub	r14, r24
    1e4e:	f1 08       	sbc	r15, r1

void learn() {
	int i;
	char buf[20];
	
	for (i= 0; i<100; i++)
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	e1 14       	cp	r14, r1
    1e5c:	f1 04       	cpc	r15, r1
    1e5e:	91 f6       	brne	.-92     	; 0x1e04 <learn+0x44>
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
			bt_send_bytes((uint8_t *)buf, strlen(buf));
			vTaskDelay( 100/ portTICK_PERIOD_MS);
	}
}
    1e60:	64 96       	adiw	r28, 0x14	; 20
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	08 95       	ret

00001e86 <plannedTrack>:

void plannedTrack() {
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
	uint16_t count = 0;
	//uint16_t prog[200]= {20, 65, 120, 55, 220, 75, 300, 60, 400, -30, 520, 65, 620, 55, 720, 50, 820, 70, 920, 0};
	uint16_t tacho = get_tacho_count();
    1e92:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
    1e96:	ec 01       	movw	r28, r24
	set_motor_speed(60);
    1e98:	8c e3       	ldi	r24, 0x3C	; 60
    1e9a:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
	while (tacho < 1000)
    1e9e:	c8 3e       	cpi	r28, 0xE8	; 232
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	d8 07       	cpc	r29, r24
    1ea4:	88 f5       	brcc	.+98     	; 0x1f08 <plannedTrack+0x82>
			vTaskDelay( 100/ portTICK_PERIOD_MS);
	}
}

void plannedTrack() {
	uint16_t count = 0;
    1ea6:	00 e0       	ldi	r16, 0x00	; 0
    1ea8:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t prog[200]= {20, 65, 120, 55, 220, 75, 300, 60, 400, -30, 520, 65, 620, 55, 720, 50, 820, 70, 920, 0};
	uint16_t tacho = get_tacho_count();
	set_motor_speed(60);
	while (tacho < 1000)
	{
		if (tacho >= prog[count])
    1eaa:	f8 01       	movw	r30, r16
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	e5 5b       	subi	r30, 0xB5	; 181
    1eb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	c8 17       	cp	r28, r24
    1eba:	d9 07       	cpc	r29, r25
    1ebc:	e8 f0       	brcs	.+58     	; 0x1ef8 <plannedTrack+0x72>
		{
			if (prog[count+1] > 0)
    1ebe:	78 01       	movw	r14, r16
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	e8 1a       	sub	r14, r24
    1ec4:	f8 0a       	sbc	r15, r24
    1ec6:	f7 01       	movw	r30, r14
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	e5 5b       	subi	r30, 0xB5	; 181
    1ece:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	19 f0       	breq	.+6      	; 0x1ede <plannedTrack+0x58>
			{
				set_motor_speed(prog[count+1]);
    1ed8:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <plannedTrack+0x5e>
			} else {
				set_brake(abs(prog[count+1]));
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
			}
			nextVal= prog[count+1];
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	e5 5b       	subi	r30, 0xB5	; 181
    1eec:	fd 4f       	sbci	r31, 0xFD	; 253
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 93 77 0f 	sts	0x0F77, r24
			count = count + 2;
    1ef4:	0e 5f       	subi	r16, 0xFE	; 254
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		tacho = tacho + get_tacho_count();
    1ef8:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
    1efc:	c8 0f       	add	r28, r24
    1efe:	d9 1f       	adc	r29, r25
void plannedTrack() {
	uint16_t count = 0;
	//uint16_t prog[200]= {20, 65, 120, 55, 220, 75, 300, 60, 400, -30, 520, 65, 620, 55, 720, 50, 820, 70, 920, 0};
	uint16_t tacho = get_tacho_count();
	set_motor_speed(60);
	while (tacho < 1000)
    1f00:	c8 3e       	cpi	r28, 0xE8	; 232
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	d8 07       	cpc	r29, r24
    1f06:	88 f2       	brcs	.-94     	; 0x1eaa <plannedTrack+0x24>
			nextVal= prog[count+1];
			count = count + 2;
		}
		tacho = tacho + get_tacho_count();
	}
	set_motor_speed(0);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
	set_motor_speed(0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
	count +1;
}
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	08 95       	ret

00001f22 <bt_com_call_back>:
		} else if (status == DIALOG_ERROR_STOP) {
		// What to do??
	}
}

void bt_com_call_back(uint8_t byte) {
    1f22:	8f 92       	push	r8
    1f24:	9f 92       	push	r9
    1f26:	af 92       	push	r10
    1f28:	bf 92       	push	r11
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	a8 97       	sbiw	r28, 0x28	; 40
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	18 2f       	mov	r17, r24
	char buf[40];
	
	if (bt_initialised) {
    1f4c:	90 91 76 0f 	lds	r25, 0x0F76
    1f50:	99 23       	and	r25, r25
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <bt_com_call_back+0x34>
    1f54:	e3 c0       	rjmp	.+454    	; 0x211c <bt_com_call_back+0x1fa>
		switch (byte) {
    1f56:	48 2f       	mov	r20, r24
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	fa 01       	movw	r30, r20
    1f5c:	e1 54       	subi	r30, 0x41	; 65
    1f5e:	f1 09       	sbc	r31, r1
    1f60:	e6 32       	cpi	r30, 0x26	; 38
    1f62:	f1 05       	cpc	r31, r1
    1f64:	08 f0       	brcs	.+2      	; 0x1f68 <bt_com_call_back+0x46>
    1f66:	b7 c0       	rjmp	.+366    	; 0x20d6 <bt_com_call_back+0x1b4>
    1f68:	ea 59       	subi	r30, 0x9A	; 154
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	45 c5       	rjmp	.+2698   	; 0x29f8 <__tablejump2__>
			case 'a': {
				set_head_light(0);
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	0e 94 76 02 	call	0x4ec	; 0x4ec <set_head_light>
				break;
    1f74:	d3 c0       	rjmp	.+422    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'A': {
				set_head_light(1);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 76 02 	call	0x4ec	; 0x4ec <set_head_light>
				break;
    1f7c:	cf c0       	rjmp	.+414    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'b': {
				set_brake_light(0);
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				break;
    1f84:	cb c0       	rjmp	.+406    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'B': {
				set_brake_light(1);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				break;
    1f8c:	c7 c0       	rjmp	.+398    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'c': {
				set_horn(0);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0e 94 70 02 	call	0x4e0	; 0x4e0 <set_horn>
				break;
    1f94:	c3 c0       	rjmp	.+390    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'C': {
				set_horn(1);
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	0e 94 70 02 	call	0x4e0	; 0x4e0 <set_horn>
				break;
    1f9c:	bf c0       	rjmp	.+382    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'd': {
				set_motor_speed(0);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				break;
    1fa4:	bb c0       	rjmp	.+374    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'D': {
				set_motor_speed(65);
    1fa6:	81 e4       	ldi	r24, 0x41	; 65
    1fa8:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				break;
    1fac:	b7 c0       	rjmp	.+366    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'e': {
				set_brake(0);
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				break;
    1fb4:	b3 c0       	rjmp	.+358    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'E': {
				set_brake(100);
    1fb6:	84 e6       	ldi	r24, 0x64	; 100
    1fb8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				break;
    1fbc:	af c0       	rjmp	.+350    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'F': {
				uint16_t raw_x = get_raw_x_accel();
    1fbe:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
    1fc2:	18 2f       	mov	r17, r24
    1fc4:	09 2f       	mov	r16, r25
				uint16_t raw_y = get_raw_y_accel();
    1fc6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <get_raw_y_accel>
    1fca:	f8 2e       	mov	r15, r24
    1fcc:	e9 2e       	mov	r14, r25
				uint16_t raw_z = get_raw_z_accel();
    1fce:	0e 94 87 03 	call	0x70e	; 0x70e <get_raw_z_accel>
    1fd2:	d8 2e       	mov	r13, r24
    1fd4:	c9 2e       	mov	r12, r25
				uint16_t raw_rx = get_raw_x_rotation();
    1fd6:	0e 94 8f 03 	call	0x71e	; 0x71e <get_raw_x_rotation>
    1fda:	b8 2e       	mov	r11, r24
    1fdc:	a9 2e       	mov	r10, r25
				uint16_t raw_ry = get_raw_y_rotation();
    1fde:	0e 94 97 03 	call	0x72e	; 0x72e <get_raw_y_rotation>
    1fe2:	98 2e       	mov	r9, r24
    1fe4:	89 2e       	mov	r8, r25
				uint16_t tacho = get_tacho_count();
    1fe6:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
				sprintf(buf, "x%4dy%4dz%4dr%4dq%4dt%4d", raw_x, raw_y, raw_z, raw_rx, raw_ry, tacho);
    1fea:	9f 93       	push	r25
    1fec:	8f 93       	push	r24
    1fee:	8f 92       	push	r8
    1ff0:	9f 92       	push	r9
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	87 e2       	ldi	r24, 0x27	; 39
    2004:	94 e0       	ldi	r25, 0x04	; 4
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	8e 01       	movw	r16, r28
    200c:	0f 5f       	subi	r16, 0xFF	; 255
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	1f 93       	push	r17
    2012:	0f 93       	push	r16
    2014:	6f d6       	rcall	.+3294   	; 0x2cf4 <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    2016:	f8 01       	movw	r30, r16
    2018:	01 90       	ld	r0, Z+
    201a:	00 20       	and	r0, r0
    201c:	e9 f7       	brne	.-6      	; 0x2018 <bt_com_call_back+0xf6>
    201e:	31 97       	sbiw	r30, 0x01	; 1
    2020:	bf 01       	movw	r22, r30
    2022:	60 1b       	sub	r22, r16
    2024:	71 0b       	sbc	r23, r17
    2026:	c8 01       	movw	r24, r16
    2028:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	72 c0       	rjmp	.+228    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'f': {
				learn();
    2038:	c3 de       	rcall	.-634    	; 0x1dc0 <learn>
				break;
    203a:	70 c0       	rjmp	.+224    	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'G': {
				uint16_t raw_x = get_raw_x_rotation();
    203c:	0e 94 8f 03 	call	0x71e	; 0x71e <get_raw_x_rotation>
    2040:	18 2f       	mov	r17, r24
    2042:	09 2f       	mov	r16, r25
				uint16_t raw_y = get_raw_y_rotation();
    2044:	0e 94 97 03 	call	0x72e	; 0x72e <get_raw_y_rotation>
    2048:	f8 2e       	mov	r15, r24
    204a:	e9 2e       	mov	r14, r25
				uint16_t raw_xa = get_raw_x_accel();
    204c:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
				sprintf(buf, "x%4d y%4d x%4d", raw_x, raw_y, raw_xa);
    2050:	9f 93       	push	r25
    2052:	8f 93       	push	r24
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	80 e4       	ldi	r24, 0x40	; 64
    205e:	94 e0       	ldi	r25, 0x04	; 4
    2060:	9f 93       	push	r25
    2062:	8f 93       	push	r24
    2064:	8e 01       	movw	r16, r28
    2066:	0f 5f       	subi	r16, 0xFF	; 255
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	1f 93       	push	r17
    206c:	0f 93       	push	r16
    206e:	42 d6       	rcall	.+3204   	; 0x2cf4 <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    2070:	f8 01       	movw	r30, r16
    2072:	01 90       	ld	r0, Z+
    2074:	00 20       	and	r0, r0
    2076:	e9 f7       	brne	.-6      	; 0x2072 <bt_com_call_back+0x150>
    2078:	31 97       	sbiw	r30, 0x01	; 1
    207a:	bf 01       	movw	r22, r30
    207c:	60 1b       	sub	r22, r16
    207e:	71 0b       	sbc	r23, r17
    2080:	c8 01       	movw	r24, r16
    2082:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	45 c0       	rjmp	.+138    	; 0x211c <bt_com_call_back+0x1fa>
			}
			case 'N': {
				sprintf(buf, "n%4d", nextVal);
    2092:	80 91 77 0f 	lds	r24, 0x0F77
    2096:	1f 92       	push	r1
    2098:	8f 93       	push	r24
    209a:	8f e4       	ldi	r24, 0x4F	; 79
    209c:	94 e0       	ldi	r25, 0x04	; 4
    209e:	9f 93       	push	r25
    20a0:	8f 93       	push	r24
    20a2:	8e 01       	movw	r16, r28
    20a4:	0f 5f       	subi	r16, 0xFF	; 255
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	1f 93       	push	r17
    20aa:	0f 93       	push	r16
    20ac:	23 d6       	rcall	.+3142   	; 0x2cf4 <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    20ae:	f8 01       	movw	r30, r16
    20b0:	01 90       	ld	r0, Z+
    20b2:	00 20       	and	r0, r0
    20b4:	e9 f7       	brne	.-6      	; 0x20b0 <bt_com_call_back+0x18e>
    20b6:	31 97       	sbiw	r30, 0x01	; 1
    20b8:	bf 01       	movw	r22, r30
    20ba:	60 1b       	sub	r22, r16
    20bc:	71 0b       	sbc	r23, r17
    20be:	c8 01       	movw	r24, r16
    20c0:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	25 c0       	rjmp	.+74     	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			case 'P': {
				plannedTrack();
    20d2:	d9 de       	rcall	.-590    	; 0x1e86 <plannedTrack>
				break;
    20d4:	23 c0       	rjmp	.+70     	; 0x211c <bt_com_call_back+0x1fa>
			}
			
			default:
				sendValue[charCount] = byte - '0';
    20d6:	80 91 75 0f 	lds	r24, 0x0F75
    20da:	e8 2f       	mov	r30, r24
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	ed 58       	subi	r30, 0x8D	; 141
    20e0:	f0 4f       	sbci	r31, 0xF0	; 240
    20e2:	90 ed       	ldi	r25, 0xD0	; 208
    20e4:	91 0f       	add	r25, r17
    20e6:	90 83       	st	Z, r25
				charCount++;
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	80 93 75 0f 	sts	0x0F75, r24
				set_motor_speed(0);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				if(byte == 33) {
    20f4:	11 32       	cpi	r17, 0x21	; 33
    20f6:	91 f4       	brne	.+36     	; 0x211c <bt_com_call_back+0x1fa>
					//sendValue[charCount] = '\0';
					int tempInt;
					//sscanf(sendValue, "%d", &tempInt);
					tempInt = atoi(sendValue);
    20f8:	83 e7       	ldi	r24, 0x73	; 115
    20fa:	9f e0       	ldi	r25, 0x0F	; 15
    20fc:	cd d5       	rcall	.+2970   	; 0x2c98 <atoi>
					prog[nextVal] = tempInt;
    20fe:	20 91 77 0f 	lds	r18, 0x0F77
    2102:	e2 2f       	mov	r30, r18
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e5 5b       	subi	r30, 0xB5	; 181
    210c:	fd 4f       	sbci	r31, 0xFD	; 253
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
					nextVal++;
    2112:	2f 5f       	subi	r18, 0xFF	; 255
    2114:	20 93 77 0f 	sts	0x0F77, r18
					charCount=0;
    2118:	10 92 75 0f 	sts	0x0F75, r1
					tempInt = sendValue[1];
				}
				break;
		}
	}
}
    211c:	a8 96       	adiw	r28, 0x28	; 40
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	af 90       	pop	r10
    213c:	9f 90       	pop	r9
    213e:	8f 90       	pop	r8
    2140:	08 95       	ret

00002142 <vstartupTask>:
		// Wait for goal line is passed
		xSemaphoreTake(goal_line_semaphore, portMAX_DELAY);
	}
}

static void vstartupTask( void *pvParameters ) {
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	1f 92       	push	r1
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	/* The parameters are not used. */
	( void ) pvParameters;
	
	goal_line_semaphore = xSemaphoreCreateBinary();
    214c:	43 e0       	ldi	r20, 0x03	; 3
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	1b d9       	rcall	.-3530   	; 0x138a <xQueueGenericCreate>
    2154:	90 93 7b 0f 	sts	0x0F7B, r25
    2158:	80 93 7a 0f 	sts	0x0F7A, r24
	_xBT_received_chars_queue = xQueueCreate( _BT_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	8e e1       	ldi	r24, 0x1E	; 30
    2162:	13 d9       	rcall	.-3546   	; 0x138a <xQueueGenericCreate>
    2164:	90 93 79 0f 	sts	0x0F79, r25
    2168:	80 93 78 0f 	sts	0x0F78, r24
	
	if( goal_line_semaphore == NULL ) {
    216c:	80 91 7a 0f 	lds	r24, 0x0F7A
    2170:	90 91 7b 0f 	lds	r25, 0x0F7B
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	11 f0       	breq	.+4      	; 0x217c <vstartupTask+0x3a>
		/* There was insufficient OpenRTOS heap available for the semaphore to
		be created successfully. */
		// What to do here ?????????????????????????????????
		} else {
		set_goal_line_semaphore(goal_line_semaphore);
    2178:	0e 94 db 03 	call	0x7b6	; 0x7b6 <set_goal_line_semaphore>
	}
	
	// Initialize Bluetooth Module
	vTaskDelay( 1000/ portTICK_PERIOD_MS);
    217c:	88 ee       	ldi	r24, 0xE8	; 232
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	dc dc       	rcall	.-1608   	; 0x1b3a <vTaskDelay>
	set_bt_reset(0);  // Disable reset line of Blue tooth module
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	0e 94 b9 03 	call	0x772	; 0x772 <set_bt_reset>
	vTaskDelay( 1000/ portTICK_PERIOD_MS);
    2188:	88 ee       	ldi	r24, 0xE8	; 232
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	d6 dc       	rcall	.-1620   	; 0x1b3a <vTaskDelay>
	init_bt_module(bt_status_call_back, _xBT_received_chars_queue);
    218e:	60 91 78 0f 	lds	r22, 0x0F78
    2192:	70 91 79 0f 	lds	r23, 0x0F79
    2196:	8f ec       	ldi	r24, 0xCF	; 207
    2198:	9e e0       	ldi	r25, 0x0E	; 14
    219a:	0e 94 c8 03 	call	0x790	; 0x790 <init_bt_module>
	
	xTaskCreate( vjustATask, "JustATask", configMINIMAL_STACK_SIZE, NULL, just_a_task_TASK_PRIORITY, NULL );
    219e:	a1 2c       	mov	r10, r1
    21a0:	b1 2c       	mov	r11, r1
    21a2:	c1 2c       	mov	r12, r1
    21a4:	d1 2c       	mov	r13, r1
    21a6:	e1 2c       	mov	r14, r1
    21a8:	f1 2c       	mov	r15, r1
    21aa:	01 e0       	ldi	r16, 0x01	; 1
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	49 eb       	ldi	r20, 0xB9	; 185
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	64 e5       	ldi	r22, 0x54	; 84
    21b6:	74 e0       	ldi	r23, 0x04	; 4
    21b8:	85 ed       	ldi	r24, 0xD5	; 213
    21ba:	9e e0       	ldi	r25, 0x0E	; 14
    21bc:	5d da       	rcall	.-2886   	; 0x1678 <xTaskGenericCreate>
	uint8_t _byte;
	
	for( ;; ) {
		xQueueReceive( _xBT_received_chars_queue, &_byte, portMAX_DELAY );
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	4f ef       	ldi	r20, 0xFF	; 255
    21c2:	5f ef       	ldi	r21, 0xFF	; 255
    21c4:	be 01       	movw	r22, r28
    21c6:	6f 5f       	subi	r22, 0xFF	; 255
    21c8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ca:	80 91 78 0f 	lds	r24, 0x0F78
    21ce:	90 91 79 0f 	lds	r25, 0x0F79
    21d2:	62 d9       	rcall	.-3388   	; 0x1498 <xQueueGenericReceive>
		bt_com_call_back(_byte);
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	a5 de       	rcall	.-694    	; 0x1f22 <bt_com_call_back>
    21d8:	f2 cf       	rjmp	.-28     	; 0x21be <vstartupTask+0x7c>

000021da <main>:
	}
}

int main(void)
{
    21da:	af 92       	push	r10
    21dc:	bf 92       	push	r11
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
	init_main_board();
    21e8:	0e 94 a5 02 	call	0x54a	; 0x54a <init_main_board>
	xTaskCreate( vstartupTask, "StartupTask", configMINIMAL_STACK_SIZE, NULL, startup_TASK_PRIORITY, NULL );
    21ec:	a1 2c       	mov	r10, r1
    21ee:	b1 2c       	mov	r11, r1
    21f0:	c1 2c       	mov	r12, r1
    21f2:	d1 2c       	mov	r13, r1
    21f4:	e1 2c       	mov	r14, r1
    21f6:	f1 2c       	mov	r15, r1
    21f8:	00 e0       	ldi	r16, 0x00	; 0
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	49 eb       	ldi	r20, 0xB9	; 185
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	6e e5       	ldi	r22, 0x5E	; 94
    2204:	74 e0       	ldi	r23, 0x04	; 4
    2206:	81 ea       	ldi	r24, 0xA1	; 161
    2208:	90 e1       	ldi	r25, 0x10	; 16
    220a:	36 da       	rcall	.-2964   	; 0x1678 <xTaskGenericCreate>
	vTaskStartScheduler();
    220c:	2e db       	rcall	.-2468   	; 0x186a <vTaskStartScheduler>
}
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	cf 90       	pop	r12
    221c:	bf 90       	pop	r11
    221e:	af 90       	pop	r10
    2220:	08 95       	ret

00002222 <vApplicationStackOverflowHook>:


// Called is TASK Stack overflows
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ) {
    2222:	08 95       	ret

00002224 <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    2224:	4f 92       	push	r4
    2226:	5f 92       	push	r5
    2228:	6f 92       	push	r6
    222a:	7f 92       	push	r7
    222c:	8f 92       	push	r8
    222e:	9f 92       	push	r9
    2230:	af 92       	push	r10
    2232:	bf 92       	push	r11
    2234:	cf 92       	push	r12
    2236:	df 92       	push	r13
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	f8 2e       	mov	r15, r24
    2248:	2a 01       	movw	r4, r20
    224a:	3b 01       	movw	r6, r22
    224c:	88 e0       	ldi	r24, 0x08	; 8
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	fc d3       	rcall	.+2040   	; 0x2a4a <malloc>
    2252:	8c 01       	movw	r16, r24
    2254:	8f 2d       	mov	r24, r15
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	fc 01       	movw	r30, r24
    225e:	e4 58       	subi	r30, 0x84	; 132
    2260:	f0 4f       	sbci	r31, 0xF0	; 240
    2262:	11 83       	std	Z+1, r17	; 0x01
    2264:	00 83       	st	Z, r16
    2266:	fc 01       	movw	r30, r24
    2268:	e5 52       	subi	r30, 0x25	; 37
    226a:	fc 4f       	sbci	r31, 0xFC	; 252
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	d8 01       	movw	r26, r16
    2272:	11 96       	adiw	r26, 0x01	; 1
    2274:	9c 93       	st	X, r25
    2276:	8e 93       	st	-X, r24
    2278:	13 96       	adiw	r26, 0x03	; 3
    227a:	bc 92       	st	X, r11
    227c:	ae 92       	st	-X, r10
    227e:	12 97       	sbiw	r26, 0x02	; 2
    2280:	15 96       	adiw	r26, 0x05	; 5
    2282:	dc 92       	st	X, r13
    2284:	ce 92       	st	-X, r12
    2286:	14 97       	sbiw	r26, 0x04	; 4
    2288:	17 96       	adiw	r26, 0x07	; 7
    228a:	9c 92       	st	X, r9
    228c:	8e 92       	st	-X, r8
    228e:	16 97       	sbiw	r26, 0x06	; 6
    2290:	ff b6       	in	r15, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	d8 01       	movw	r26, r16
    2296:	ed 91       	ld	r30, X+
    2298:	fc 91       	ld	r31, X
    229a:	11 97       	sbiw	r26, 0x01	; 1
    229c:	36 97       	sbiw	r30, 0x06	; 6
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	80 83       	st	Z, r24
    22a4:	cd 90       	ld	r12, X+
    22a6:	dc 90       	ld	r13, X
    22a8:	44 0c       	add	r4, r4
    22aa:	55 1c       	adc	r5, r5
    22ac:	66 1c       	adc	r6, r6
    22ae:	77 1c       	adc	r7, r7
    22b0:	44 0c       	add	r4, r4
    22b2:	55 1c       	adc	r5, r5
    22b4:	66 1c       	adc	r6, r6
    22b6:	77 1c       	adc	r7, r7
    22b8:	a3 01       	movw	r20, r6
    22ba:	92 01       	movw	r18, r4
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	44 1f       	adc	r20, r20
    22c2:	55 1f       	adc	r21, r21
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	74 e2       	ldi	r23, 0x24	; 36
    22c8:	84 ef       	ldi	r24, 0xF4	; 244
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	57 d3       	rcall	.+1710   	; 0x297c <__udivmodsi4>
    22ce:	21 50       	subi	r18, 0x01	; 1
    22d0:	f6 01       	movw	r30, r12
    22d2:	32 97       	sbiw	r30, 0x02	; 2
    22d4:	20 83       	st	Z, r18
    22d6:	d8 01       	movw	r26, r16
    22d8:	ed 91       	ld	r30, X+
    22da:	fc 91       	ld	r31, X
    22dc:	11 97       	sbiw	r26, 0x01	; 1
    22de:	35 97       	sbiw	r30, 0x05	; 5
    22e0:	88 e9       	ldi	r24, 0x98	; 152
    22e2:	80 83       	st	Z, r24
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	34 97       	sbiw	r30, 0x04	; 4
    22ea:	86 e0       	ldi	r24, 0x06	; 6
    22ec:	80 83       	st	Z, r24
    22ee:	ff be       	out	0x3f, r15	; 63
    22f0:	c8 01       	movw	r24, r16
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	1f 91       	pop	r17
    22f8:	0f 91       	pop	r16
    22fa:	ff 90       	pop	r15
    22fc:	df 90       	pop	r13
    22fe:	cf 90       	pop	r12
    2300:	bf 90       	pop	r11
    2302:	af 90       	pop	r10
    2304:	9f 90       	pop	r9
    2306:	8f 90       	pop	r8
    2308:	7f 90       	pop	r7
    230a:	6f 90       	pop	r6
    230c:	5f 90       	pop	r5
    230e:	4f 90       	pop	r4
    2310:	08 95       	ret

00002312 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	8c 01       	movw	r16, r24
    2320:	e4 2e       	mov	r14, r20
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    2322:	dc 01       	movw	r26, r24
    2324:	12 96       	adiw	r26, 0x02	; 2
    2326:	ed 91       	ld	r30, X+
    2328:	fc 91       	ld	r31, X
    232a:	13 97       	sbiw	r26, 0x03	; 3
    232c:	30 97       	sbiw	r30, 0x00	; 0
    232e:	69 f0       	breq	.+26     	; 0x234a <serial_send_bytes+0x38>
    2330:	24 2f       	mov	r18, r20
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	42 a5       	ldd	r20, Z+42	; 0x2a
    2336:	88 e2       	ldi	r24, 0x28	; 40
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	84 1b       	sub	r24, r20
    233c:	91 09       	sbc	r25, r1
    233e:	82 17       	cp	r24, r18
    2340:	93 07       	cpc	r25, r19
    2342:	e4 f0       	brlt	.+56     	; 0x237c <serial_send_bytes+0x6a>
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2344:	e1 10       	cpse	r14, r1
    2346:	05 c0       	rjmp	.+10     	; 0x2352 <serial_send_bytes+0x40>
    2348:	10 c0       	rjmp	.+32     	; 0x236a <serial_send_bytes+0x58>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    234a:	b1 e0       	ldi	r27, 0x01	; 1
    234c:	b4 17       	cp	r27, r20
    234e:	c0 f0       	brcs	.+48     	; 0x2380 <serial_send_bytes+0x6e>
    2350:	f9 cf       	rjmp	.-14     	; 0x2344 <serial_send_bytes+0x32>
    2352:	c6 2f       	mov	r28, r22
    2354:	d7 2f       	mov	r29, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2356:	f1 2c       	mov	r15, r1
		buffer_put_item(handle->_tx_buf, buf[i]);
    2358:	69 91       	ld	r22, Y+
    235a:	f8 01       	movw	r30, r16
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2364:	f3 94       	inc	r15
    2366:	fe 10       	cpse	r15, r14
    2368:	f7 cf       	rjmp	.-18     	; 0x2358 <serial_send_bytes+0x46>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    236a:	d8 01       	movw	r26, r16
    236c:	ed 91       	ld	r30, X+
    236e:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
    2370:	35 97       	sbiw	r30, 0x05	; 5
    2372:	80 81       	ld	r24, Z
    2374:	80 62       	ori	r24, 0x20	; 32
    2376:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	03 c0       	rjmp	.+6      	; 0x2382 <serial_send_bytes+0x70>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <serial_send_bytes+0x70>
    2380:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	08 95       	ret

00002390 <__vector_25>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    2390:	1f 92       	push	r1
    2392:	0f 92       	push	r0
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	0f 92       	push	r0
    2398:	11 24       	eor	r1, r1
    239a:	0b b6       	in	r0, 0x3b	; 59
    239c:	0f 92       	push	r0
    239e:	2f 93       	push	r18
    23a0:	3f 93       	push	r19
    23a2:	4f 93       	push	r20
    23a4:	5f 93       	push	r21
    23a6:	6f 93       	push	r22
    23a8:	7f 93       	push	r23
    23aa:	8f 93       	push	r24
    23ac:	9f 93       	push	r25
    23ae:	af 93       	push	r26
    23b0:	bf 93       	push	r27
    23b2:	cf 93       	push	r28
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    23b8:	e0 91 7c 0f 	lds	r30, 0x0F7C
    23bc:	f0 91 7d 0f 	lds	r31, 0x0F7D
    23c0:	30 97       	sbiw	r30, 0x00	; 0
    23c2:	a1 f0       	breq	.+40     	; 0x23ec <__vector_25+0x5c>
		item = UDR0;
    23c4:	c0 91 c6 00 	lds	r28, 0x00C6
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    23c8:	6c 2f       	mov	r22, r28
    23ca:	84 81       	ldd	r24, Z+4	; 0x04
    23cc:	95 81       	ldd	r25, Z+5	; 0x05
    23ce:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    23d2:	80 91 7c 0f 	lds	r24, 0x0F7C
    23d6:	90 91 7d 0f 	lds	r25, 0x0F7D
    23da:	dc 01       	movw	r26, r24
    23dc:	16 96       	adiw	r26, 0x06	; 6
    23de:	ed 91       	ld	r30, X+
    23e0:	fc 91       	ld	r31, X
    23e2:	17 97       	sbiw	r26, 0x07	; 7
    23e4:	30 97       	sbiw	r30, 0x00	; 0
    23e6:	11 f0       	breq	.+4      	; 0x23ec <__vector_25+0x5c>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    23e8:	6c 2f       	mov	r22, r28
    23ea:	19 95       	eicall
		}
	}
}
    23ec:	ff 91       	pop	r31
    23ee:	ef 91       	pop	r30
    23f0:	cf 91       	pop	r28
    23f2:	bf 91       	pop	r27
    23f4:	af 91       	pop	r26
    23f6:	9f 91       	pop	r25
    23f8:	8f 91       	pop	r24
    23fa:	7f 91       	pop	r23
    23fc:	6f 91       	pop	r22
    23fe:	5f 91       	pop	r21
    2400:	4f 91       	pop	r20
    2402:	3f 91       	pop	r19
    2404:	2f 91       	pop	r18
    2406:	0f 90       	pop	r0
    2408:	0b be       	out	0x3b, r0	; 59
    240a:	0f 90       	pop	r0
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	0f 90       	pop	r0
    2410:	1f 90       	pop	r1
    2412:	18 95       	reti

00002414 <__vector_26>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    2414:	1f 92       	push	r1
    2416:	0f 92       	push	r0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	0f 92       	push	r0
    241c:	11 24       	eor	r1, r1
    241e:	0b b6       	in	r0, 0x3b	; 59
    2420:	0f 92       	push	r0
    2422:	2f 93       	push	r18
    2424:	3f 93       	push	r19
    2426:	4f 93       	push	r20
    2428:	5f 93       	push	r21
    242a:	6f 93       	push	r22
    242c:	7f 93       	push	r23
    242e:	8f 93       	push	r24
    2430:	9f 93       	push	r25
    2432:	af 93       	push	r26
    2434:	bf 93       	push	r27
    2436:	ef 93       	push	r30
    2438:	ff 93       	push	r31
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	1f 92       	push	r1
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2444:	e0 91 7c 0f 	lds	r30, 0x0F7C
    2448:	f0 91 7d 0f 	lds	r31, 0x0F7D
    244c:	30 97       	sbiw	r30, 0x00	; 0
    244e:	99 f0       	breq	.+38     	; 0x2476 <__vector_26+0x62>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2450:	be 01       	movw	r22, r28
    2452:	6f 5f       	subi	r22, 0xFF	; 255
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    245e:	81 11       	cpse	r24, r1
    2460:	04 c0       	rjmp	.+8      	; 0x246a <__vector_26+0x56>
			UDR0 = item;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	80 93 c6 00 	sts	0x00C6, r24
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <__vector_26+0x6c>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    246a:	e1 ec       	ldi	r30, 0xC1	; 193
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8f 7d       	andi	r24, 0xDF	; 223
    2472:	80 83       	st	Z, r24
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <__vector_26+0x6c>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    2476:	e1 ec       	ldi	r30, 0xC1	; 193
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 7d       	andi	r24, 0xDF	; 223
    247e:	80 83       	st	Z, r24
	}
}
    2480:	0f 90       	pop	r0
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	ff 91       	pop	r31
    2488:	ef 91       	pop	r30
    248a:	bf 91       	pop	r27
    248c:	af 91       	pop	r26
    248e:	9f 91       	pop	r25
    2490:	8f 91       	pop	r24
    2492:	7f 91       	pop	r23
    2494:	6f 91       	pop	r22
    2496:	5f 91       	pop	r21
    2498:	4f 91       	pop	r20
    249a:	3f 91       	pop	r19
    249c:	2f 91       	pop	r18
    249e:	0f 90       	pop	r0
    24a0:	0b be       	out	0x3b, r0	; 59
    24a2:	0f 90       	pop	r0
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	0f 90       	pop	r0
    24a8:	1f 90       	pop	r1
    24aa:	18 95       	reti

000024ac <__vector_36>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    24ac:	1f 92       	push	r1
    24ae:	0f 92       	push	r0
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	0f 92       	push	r0
    24b4:	11 24       	eor	r1, r1
    24b6:	0b b6       	in	r0, 0x3b	; 59
    24b8:	0f 92       	push	r0
    24ba:	2f 93       	push	r18
    24bc:	3f 93       	push	r19
    24be:	4f 93       	push	r20
    24c0:	5f 93       	push	r21
    24c2:	6f 93       	push	r22
    24c4:	7f 93       	push	r23
    24c6:	8f 93       	push	r24
    24c8:	9f 93       	push	r25
    24ca:	af 93       	push	r26
    24cc:	bf 93       	push	r27
    24ce:	cf 93       	push	r28
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    24d4:	e0 91 7e 0f 	lds	r30, 0x0F7E
    24d8:	f0 91 7f 0f 	lds	r31, 0x0F7F
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	a1 f0       	breq	.+40     	; 0x2508 <__vector_36+0x5c>
		item = UDR1;
    24e0:	c0 91 ce 00 	lds	r28, 0x00CE
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    24e4:	6c 2f       	mov	r22, r28
    24e6:	84 81       	ldd	r24, Z+4	; 0x04
    24e8:	95 81       	ldd	r25, Z+5	; 0x05
    24ea:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    24ee:	80 91 7e 0f 	lds	r24, 0x0F7E
    24f2:	90 91 7f 0f 	lds	r25, 0x0F7F
    24f6:	dc 01       	movw	r26, r24
    24f8:	16 96       	adiw	r26, 0x06	; 6
    24fa:	ed 91       	ld	r30, X+
    24fc:	fc 91       	ld	r31, X
    24fe:	17 97       	sbiw	r26, 0x07	; 7
    2500:	30 97       	sbiw	r30, 0x00	; 0
    2502:	11 f0       	breq	.+4      	; 0x2508 <__vector_36+0x5c>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    2504:	6c 2f       	mov	r22, r28
    2506:	19 95       	eicall
		}
	}
}
    2508:	ff 91       	pop	r31
    250a:	ef 91       	pop	r30
    250c:	cf 91       	pop	r28
    250e:	bf 91       	pop	r27
    2510:	af 91       	pop	r26
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	7f 91       	pop	r23
    2518:	6f 91       	pop	r22
    251a:	5f 91       	pop	r21
    251c:	4f 91       	pop	r20
    251e:	3f 91       	pop	r19
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0b be       	out	0x3b, r0	; 59
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f 90       	pop	r0
    252c:	1f 90       	pop	r1
    252e:	18 95       	reti

00002530 <__vector_37>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	0b b6       	in	r0, 0x3b	; 59
    253c:	0f 92       	push	r0
    253e:	2f 93       	push	r18
    2540:	3f 93       	push	r19
    2542:	4f 93       	push	r20
    2544:	5f 93       	push	r21
    2546:	6f 93       	push	r22
    2548:	7f 93       	push	r23
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	af 93       	push	r26
    2550:	bf 93       	push	r27
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	1f 92       	push	r1
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2560:	e0 91 7e 0f 	lds	r30, 0x0F7E
    2564:	f0 91 7f 0f 	lds	r31, 0x0F7F
    2568:	30 97       	sbiw	r30, 0x00	; 0
    256a:	99 f0       	breq	.+38     	; 0x2592 <__vector_37+0x62>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    256c:	be 01       	movw	r22, r28
    256e:	6f 5f       	subi	r22, 0xFF	; 255
    2570:	7f 4f       	sbci	r23, 0xFF	; 255
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    257a:	81 11       	cpse	r24, r1
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <__vector_37+0x56>
			UDR1 = item;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	80 93 ce 00 	sts	0x00CE, r24
    2584:	0b c0       	rjmp	.+22     	; 0x259c <__vector_37+0x6c>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    2586:	e9 ec       	ldi	r30, 0xC9	; 201
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	8f 7d       	andi	r24, 0xDF	; 223
    258e:	80 83       	st	Z, r24
    2590:	05 c0       	rjmp	.+10     	; 0x259c <__vector_37+0x6c>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    2592:	e9 ec       	ldi	r30, 0xC9	; 201
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	8f 7d       	andi	r24, 0xDF	; 223
    259a:	80 83       	st	Z, r24
	}
}
    259c:	0f 90       	pop	r0
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	ff 91       	pop	r31
    25a4:	ef 91       	pop	r30
    25a6:	bf 91       	pop	r27
    25a8:	af 91       	pop	r26
    25aa:	9f 91       	pop	r25
    25ac:	8f 91       	pop	r24
    25ae:	7f 91       	pop	r23
    25b0:	6f 91       	pop	r22
    25b2:	5f 91       	pop	r21
    25b4:	4f 91       	pop	r20
    25b6:	3f 91       	pop	r19
    25b8:	2f 91       	pop	r18
    25ba:	0f 90       	pop	r0
    25bc:	0b be       	out	0x3b, r0	; 59
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	0f 90       	pop	r0
    25c4:	1f 90       	pop	r1
    25c6:	18 95       	reti

000025c8 <_select_instance>:
		// restore interrupt state
		SREG = c_sreg;
	}

	return result;
}
    25c8:	e0 91 81 0f 	lds	r30, 0x0F81
    25cc:	f0 91 82 0f 	lds	r31, 0x0F82
    25d0:	30 97       	sbiw	r30, 0x00	; 0
    25d2:	01 f1       	breq	.+64     	; 0x2614 <_select_instance+0x4c>
    25d4:	23 81       	ldd	r18, Z+3	; 0x03
    25d6:	21 30       	cpi	r18, 0x01	; 1
    25d8:	79 f4       	brne	.+30     	; 0x25f8 <_select_instance+0x30>
    25da:	a0 81       	ld	r26, Z
    25dc:	b1 81       	ldd	r27, Z+1	; 0x01
    25de:	4c 91       	ld	r20, X
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	02 80       	ldd	r0, Z+2	; 0x02
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <_select_instance+0x24>
    25e8:	22 0f       	add	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	0a 94       	dec	r0
    25ee:	e2 f7       	brpl	.-8      	; 0x25e8 <_select_instance+0x20>
    25f0:	20 95       	com	r18
    25f2:	24 23       	and	r18, r20
    25f4:	2c 93       	st	X, r18
    25f6:	0e c0       	rjmp	.+28     	; 0x2614 <_select_instance+0x4c>
    25f8:	a0 81       	ld	r26, Z
    25fa:	b1 81       	ldd	r27, Z+1	; 0x01
    25fc:	6c 91       	ld	r22, X
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	9a 01       	movw	r18, r20
    2604:	02 80       	ldd	r0, Z+2	; 0x02
    2606:	02 c0       	rjmp	.+4      	; 0x260c <_select_instance+0x44>
    2608:	22 0f       	add	r18, r18
    260a:	33 1f       	adc	r19, r19
    260c:	0a 94       	dec	r0
    260e:	e2 f7       	brpl	.-8      	; 0x2608 <_select_instance+0x40>
    2610:	26 2b       	or	r18, r22
    2612:	2c 93       	st	X, r18
    2614:	90 93 82 0f 	sts	0x0F82, r25
    2618:	80 93 81 0f 	sts	0x0F81, r24
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f0       	breq	.+26     	; 0x263a <_select_instance+0x72>
    2620:	10 92 83 0f 	sts	0x0F83, r1
    2624:	2c b5       	in	r18, 0x2c	; 44
    2626:	2f 73       	andi	r18, 0x3F	; 63
    2628:	2c bd       	out	0x2c, r18	; 44
    262a:	fc 01       	movw	r30, r24
    262c:	24 81       	ldd	r18, Z+4	; 0x04
    262e:	2c bd       	out	0x2c, r18	; 44
    2630:	85 81       	ldd	r24, Z+5	; 0x05
    2632:	8d bd       	out	0x2d, r24	; 45
    2634:	8c b5       	in	r24, 0x2c	; 44
    2636:	80 64       	ori	r24, 0x40	; 64
    2638:	8c bd       	out	0x2c, r24	; 44
    263a:	08 95       	ret

0000263c <spi_new_instance>:
    263c:	6f 92       	push	r6
    263e:	7f 92       	push	r7
    2640:	8f 92       	push	r8
    2642:	9f 92       	push	r9
    2644:	af 92       	push	r10
    2646:	bf 92       	push	r11
    2648:	cf 92       	push	r12
    264a:	df 92       	push	r13
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	d8 2e       	mov	r13, r24
    265e:	f6 2e       	mov	r15, r22
    2660:	64 2e       	mov	r6, r20
    2662:	72 2e       	mov	r7, r18
    2664:	80 91 80 0f 	lds	r24, 0x0F80
    2668:	81 11       	cpse	r24, r1
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <spi_new_instance+0x3c>
    266c:	84 b1       	in	r24, 0x04	; 4
    266e:	87 60       	ori	r24, 0x07	; 7
    2670:	84 b9       	out	0x04, r24	; 4
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	80 93 80 0f 	sts	0x0F80, r24
    2678:	8c e0       	ldi	r24, 0x0C	; 12
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	e6 d1       	rcall	.+972    	; 0x2a4a <malloc>
    267e:	fc 01       	movw	r30, r24
    2680:	00 83       	st	Z, r16
    2682:	11 83       	std	Z+1, r17	; 0x01
    2684:	e2 82       	std	Z+2, r14	; 0x02
    2686:	a0 2f       	mov	r26, r16
    2688:	b1 2f       	mov	r27, r17
    268a:	4e 91       	ld	r20, -X
    268c:	21 e0       	ldi	r18, 0x01	; 1
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	c9 01       	movw	r24, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <spi_new_instance+0x5c>
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	ea 94       	dec	r14
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <spi_new_instance+0x58>
    269c:	84 2b       	or	r24, r20
    269e:	8c 93       	st	X, r24
    26a0:	c3 82       	std	Z+3, r12	; 0x03
    26a2:	66 0c       	add	r6, r6
    26a4:	66 0c       	add	r6, r6
    26a6:	76 28       	or	r7, r6
    26a8:	af 2d       	mov	r26, r15
    26aa:	bb 27       	eor	r27, r27
    26ac:	a7 fd       	sbrc	r26, 7
    26ae:	b0 95       	com	r27
    26b0:	a6 59       	subi	r26, 0x96	; 150
    26b2:	bb 4f       	sbci	r27, 0xFB	; 251
    26b4:	6c 90       	ld	r6, X
    26b6:	d6 28       	or	r13, r6
    26b8:	d7 28       	or	r13, r7
    26ba:	d4 82       	std	Z+4, r13	; 0x04
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	8f 15       	cp	r24, r15
    26c0:	14 f4       	brge	.+4      	; 0x26c6 <spi_new_instance+0x8a>
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	85 83       	std	Z+5, r24	; 0x05
    26c6:	97 82       	std	Z+7, r9	; 0x07
    26c8:	86 82       	std	Z+6, r8	; 0x06
    26ca:	b1 86       	std	Z+9, r11	; 0x09
    26cc:	a0 86       	std	Z+8, r10	; 0x08
    26ce:	8a 89       	ldd	r24, Y+18	; 0x12
    26d0:	9b 89       	ldd	r25, Y+19	; 0x13
    26d2:	93 87       	std	Z+11, r25	; 0x0b
    26d4:	82 87       	std	Z+10, r24	; 0x0a
    26d6:	6f b7       	in	r22, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	80 91 81 0f 	lds	r24, 0x0F81
    26de:	90 91 82 0f 	lds	r25, 0x0F82
    26e2:	f0 93 82 0f 	sts	0x0F82, r31
    26e6:	e0 93 81 0f 	sts	0x0F81, r30
    26ea:	23 81       	ldd	r18, Z+3	; 0x03
    26ec:	21 30       	cpi	r18, 0x01	; 1
    26ee:	81 f4       	brne	.+32     	; 0x2710 <spi_new_instance+0xd4>
    26f0:	a0 81       	ld	r26, Z
    26f2:	b1 81       	ldd	r27, Z+1	; 0x01
    26f4:	7c 91       	ld	r23, X
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	9a 01       	movw	r18, r20
    26fc:	02 80       	ldd	r0, Z+2	; 0x02
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <spi_new_instance+0xc8>
    2700:	22 0f       	add	r18, r18
    2702:	33 1f       	adc	r19, r19
    2704:	0a 94       	dec	r0
    2706:	e2 f7       	brpl	.-8      	; 0x2700 <spi_new_instance+0xc4>
    2708:	20 95       	com	r18
    270a:	27 23       	and	r18, r23
    270c:	2c 93       	st	X, r18
    270e:	0e c0       	rjmp	.+28     	; 0x272c <spi_new_instance+0xf0>
    2710:	a0 81       	ld	r26, Z
    2712:	b1 81       	ldd	r27, Z+1	; 0x01
    2714:	7c 91       	ld	r23, X
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	9a 01       	movw	r18, r20
    271c:	02 80       	ldd	r0, Z+2	; 0x02
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <spi_new_instance+0xe8>
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
    2724:	0a 94       	dec	r0
    2726:	e2 f7       	brpl	.-8      	; 0x2720 <spi_new_instance+0xe4>
    2728:	27 2b       	or	r18, r23
    272a:	2c 93       	st	X, r18
    272c:	90 93 82 0f 	sts	0x0F82, r25
    2730:	80 93 81 0f 	sts	0x0F81, r24
    2734:	6f bf       	out	0x3f, r22	; 63
    2736:	cf 01       	movw	r24, r30
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	1f 91       	pop	r17
    273e:	0f 91       	pop	r16
    2740:	ff 90       	pop	r15
    2742:	ef 90       	pop	r14
    2744:	df 90       	pop	r13
    2746:	cf 90       	pop	r12
    2748:	bf 90       	pop	r11
    274a:	af 90       	pop	r10
    274c:	9f 90       	pop	r9
    274e:	8f 90       	pop	r8
    2750:	7f 90       	pop	r7
    2752:	6f 90       	pop	r6
    2754:	08 95       	ret

00002756 <spi_send_string>:
SPI_ILLEGAL_INSTANCE: instance is null.
@param spi to send to.
@param *buf pointer to buffer to be send.
@param len no of bytes to send.
*/
uint8_t spi_send_string(spi_p spi, uint8_t *buf, uint8_t len) {
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	ec 01       	movw	r28, r24
    2766:	8b 01       	movw	r16, r22
    2768:	f4 2e       	mov	r15, r20
	if (spi == 0) {
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	09 f4       	brne	.+2      	; 0x2770 <spi_send_string+0x1a>
    276e:	6b c0       	rjmp	.+214    	; 0x2846 <spi_send_string+0xf0>
		return SPI_ILLEGAL_INSTANCE;
	}

	// Select correct instance
	if (_this != spi ) {
    2770:	80 91 81 0f 	lds	r24, 0x0F81
    2774:	90 91 82 0f 	lds	r25, 0x0F82
    2778:	8c 17       	cp	r24, r28
    277a:	9d 07       	cpc	r25, r29
    277c:	11 f0       	breq	.+4      	; 0x2782 <spi_send_string+0x2c>
		_select_instance(spi);
    277e:	ce 01       	movw	r24, r28
    2780:	23 df       	rcall	.-442    	; 0x25c8 <_select_instance>
	uint8_t tmp = 0;

	// Critical section
	{
		// disable interrupt
		uint8_t c_sreg = SREG;
    2782:	ef b6       	in	r14, 0x3f	; 63
		cli();
    2784:	f8 94       	cli

		// Check if buffer is free
		if ( ((spi->_tx_buf != 0) && (len > (BUFFER_SIZE - spi->_tx_buf->no_in_buffer))) || ((spi->_tx_buf == 0) && (len > 1)) ) {
    2786:	ee 81       	ldd	r30, Y+6	; 0x06
    2788:	ff 81       	ldd	r31, Y+7	; 0x07
    278a:	30 97       	sbiw	r30, 0x00	; 0
    278c:	61 f0       	breq	.+24     	; 0x27a6 <spi_send_string+0x50>
    278e:	2f 2d       	mov	r18, r15
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	42 a5       	ldd	r20, Z+42	; 0x2a
    2794:	88 e2       	ldi	r24, 0x28	; 40
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	84 1b       	sub	r24, r20
    279a:	91 09       	sbc	r25, r1
    279c:	82 17       	cp	r24, r18
    279e:	93 07       	cpc	r25, r19
    27a0:	0c f4       	brge	.+2      	; 0x27a4 <spi_send_string+0x4e>
    27a2:	48 c0       	rjmp	.+144    	; 0x2834 <spi_send_string+0xde>
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <spi_send_string+0x58>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	8f 15       	cp	r24, r15
    27aa:	08 f4       	brcc	.+2      	; 0x27ae <spi_send_string+0x58>
    27ac:	45 c0       	rjmp	.+138    	; 0x2838 <spi_send_string+0xe2>
			result = SPI_NO_ROOM_IN_TX_BUFFER;
			} else {
			// If SPI in idle send the first byte
			if (!_spi_active) {
    27ae:	80 91 83 0f 	lds	r24, 0x0F83
    27b2:	81 11       	cpse	r24, r1
    27b4:	30 c0       	rjmp	.+96     	; 0x2816 <spi_send_string+0xc0>
				_spi_active = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	80 93 83 0f 	sts	0x0F83, r24
	SPDR = byte;
}

// Set the CS according to the instance
static inline void _set_cs(uint8_t state) {
	if (_this->_cs_active_level == 1) {
    27bc:	e0 91 81 0f 	lds	r30, 0x0F81
    27c0:	f0 91 82 0f 	lds	r31, 0x0F82
    27c4:	83 81       	ldd	r24, Z+3	; 0x03
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	79 f4       	brne	.+30     	; 0x27e8 <spi_send_string+0x92>
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
    27ca:	a0 81       	ld	r26, Z
    27cc:	b1 81       	ldd	r27, Z+1	; 0x01
    27ce:	4c 91       	ld	r20, X
    27d0:	21 e0       	ldi	r18, 0x01	; 1
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	c9 01       	movw	r24, r18
    27d6:	02 80       	ldd	r0, Z+2	; 0x02
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <spi_send_string+0x88>
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	0a 94       	dec	r0
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <spi_send_string+0x84>
    27e2:	84 2b       	or	r24, r20
    27e4:	8c 93       	st	X, r24
    27e6:	0e c0       	rjmp	.+28     	; 0x2804 <spi_send_string+0xae>
			} else {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
		}
		} else {
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
    27e8:	a0 81       	ld	r26, Z
    27ea:	b1 81       	ldd	r27, Z+1	; 0x01
    27ec:	2c 91       	ld	r18, X
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	02 80       	ldd	r0, Z+2	; 0x02
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <spi_send_string+0xa4>
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	0a 94       	dec	r0
    27fc:	e2 f7       	brpl	.-8      	; 0x27f6 <spi_send_string+0xa0>
    27fe:	80 95       	com	r24
    2800:	82 23       	and	r24, r18
    2802:	8c 93       	st	X, r24
			// If SPI in idle send the first byte
			if (!_spi_active) {
				_spi_active = 1;
				_set_cs(CS_ACTIVE);
				// Enable SPI interrupt
				SPCR |= _BV(SPIE);
    2804:	8c b5       	in	r24, 0x2c	; 44
    2806:	80 68       	ori	r24, 0x80	; 128
    2808:	8c bd       	out	0x2c, r24	; 44
				// Send first byte
				SPDR =buf[0];
    280a:	f8 01       	movw	r30, r16
    280c:	80 81       	ld	r24, Z
    280e:	8e bd       	out	0x2e, r24	; 46

				tmp = 1;
    2810:	dd 24       	eor	r13, r13
    2812:	d3 94       	inc	r13
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <spi_send_string+0xc2>
	if (_this != spi ) {
		_select_instance(spi);
	}

	uint8_t result = SPI_OK;
	uint8_t tmp = 0;
    2816:	d1 2c       	mov	r13, r1
				SPDR =buf[0];

				tmp = 1;
			}
			// Put in the tx buffer
			for (uint8_t i = tmp; i < len; i++) {
    2818:	df 14       	cp	r13, r15
    281a:	80 f4       	brcc	.+32     	; 0x283c <spi_send_string+0xe6>
				buffer_put_item(spi->_tx_buf, buf[i]);
    281c:	f8 01       	movw	r30, r16
    281e:	ed 0d       	add	r30, r13
    2820:	f1 1d       	adc	r31, r1
    2822:	60 81       	ld	r22, Z
    2824:	8e 81       	ldd	r24, Y+6	; 0x06
    2826:	9f 81       	ldd	r25, Y+7	; 0x07
    2828:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
				SPDR =buf[0];

				tmp = 1;
			}
			// Put in the tx buffer
			for (uint8_t i = tmp; i < len; i++) {
    282c:	d3 94       	inc	r13
    282e:	df 14       	cp	r13, r15
    2830:	a8 f3       	brcs	.-22     	; 0x281c <spi_send_string+0xc6>
    2832:	06 c0       	rjmp	.+12     	; 0x2840 <spi_send_string+0xea>
		uint8_t c_sreg = SREG;
		cli();

		// Check if buffer is free
		if ( ((spi->_tx_buf != 0) && (len > (BUFFER_SIZE - spi->_tx_buf->no_in_buffer))) || ((spi->_tx_buf == 0) && (len > 1)) ) {
			result = SPI_NO_ROOM_IN_TX_BUFFER;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <spi_send_string+0xec>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	03 c0       	rjmp	.+6      	; 0x2842 <spi_send_string+0xec>
	// Select correct instance
	if (_this != spi ) {
		_select_instance(spi);
	}

	uint8_t result = SPI_OK;
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <spi_send_string+0xec>
    2840:	80 e0       	ldi	r24, 0x00	; 0
				buffer_put_item(spi->_tx_buf, buf[i]);
			}
		}

		// restore interrupt state
		SREG = c_sreg;
    2842:	ef be       	out	0x3f, r14	; 63
	}

	return result;
    2844:	01 c0       	rjmp	.+2      	; 0x2848 <spi_send_string+0xf2>
@param *buf pointer to buffer to be send.
@param len no of bytes to send.
*/
uint8_t spi_send_string(spi_p spi, uint8_t *buf, uint8_t len) {
	if (spi == 0) {
		return SPI_ILLEGAL_INSTANCE;
    2846:	83 e0       	ldi	r24, 0x03	; 3
		// restore interrupt state
		SREG = c_sreg;
	}

	return result;
}
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	df 90       	pop	r13
    2856:	08 95       	ret

00002858 <__vector_24>:

/* ======================================================================================================================= */
/**
@todo Documentation
*/
ISR(SPI_STC_vect) {
    2858:	1f 92       	push	r1
    285a:	0f 92       	push	r0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	0b b6       	in	r0, 0x3b	; 59
    2864:	0f 92       	push	r0
    2866:	2f 93       	push	r18
    2868:	3f 93       	push	r19
    286a:	4f 93       	push	r20
    286c:	5f 93       	push	r21
    286e:	6f 93       	push	r22
    2870:	7f 93       	push	r23
    2872:	8f 93       	push	r24
    2874:	9f 93       	push	r25
    2876:	af 93       	push	r26
    2878:	bf 93       	push	r27
    287a:	ef 93       	push	r30
    287c:	ff 93       	push	r31
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	1f 92       	push	r1
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	#if SPI_USE_BUFFER == 1
	// store received byte if receive buffer available

	if (_this->_rx_buf != 0){
    2888:	e0 91 81 0f 	lds	r30, 0x0F81
    288c:	f0 91 82 0f 	lds	r31, 0x0F82
    2890:	80 85       	ldd	r24, Z+8	; 0x08
    2892:	91 85       	ldd	r25, Z+9	; 0x09
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	19 f0       	breq	.+6      	; 0x289e <__vector_24+0x46>
		buffer_put_item(_this->_rx_buf, SPDR);
    2898:	6e b5       	in	r22, 0x2e	; 46
    289a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
	}
	// more bytes to send?
	if ( buffer_get_item(_this->_tx_buf, &item) == BUFFER_OK) {
    289e:	e0 91 81 0f 	lds	r30, 0x0F81
    28a2:	f0 91 82 0f 	lds	r31, 0x0F82
    28a6:	be 01       	movw	r22, r28
    28a8:	6f 5f       	subi	r22, 0xFF	; 255
    28aa:	7f 4f       	sbci	r23, 0xFF	; 255
    28ac:	86 81       	ldd	r24, Z+6	; 0x06
    28ae:	97 81       	ldd	r25, Z+7	; 0x07
    28b0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    28b4:	81 11       	cpse	r24, r1
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <__vector_24+0x66>
		_spi_send_byte(item);
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
// Indexed by SPI_CLOCK_DIVIDER_xx defines
static const uint8_t _prescaler_mask [] = {0b00,0b01,0b10,0b11,0b00,0b01,0b10};

// Send a byte to the SPI-bus
static inline void _spi_send_byte(uint8_t byte) {
	SPDR = byte;
    28ba:	8e bd       	out	0x2e, r24	; 46
    28bc:	29 c0       	rjmp	.+82     	; 0x2910 <__vector_24+0xb8>
	if ( buffer_get_item(_this->_tx_buf, &item) == BUFFER_OK) {
		_spi_send_byte(item);
		} else {
		// No
		// Disable SPI interrupt
		SPCR &= ~_BV(SPIE);
    28be:	8c b5       	in	r24, 0x2c	; 44
    28c0:	8f 77       	andi	r24, 0x7F	; 127
    28c2:	8c bd       	out	0x2c, r24	; 44
		_spi_active = 0;
    28c4:	10 92 83 0f 	sts	0x0F83, r1
	SPDR = byte;
}

// Set the CS according to the instance
static inline void _set_cs(uint8_t state) {
	if (_this->_cs_active_level == 1) {
    28c8:	e0 91 81 0f 	lds	r30, 0x0F81
    28cc:	f0 91 82 0f 	lds	r31, 0x0F82
    28d0:	83 81       	ldd	r24, Z+3	; 0x03
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	79 f4       	brne	.+30     	; 0x28f4 <__vector_24+0x9c>
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
			} else {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
    28d6:	a0 81       	ld	r26, Z
    28d8:	b1 81       	ldd	r27, Z+1	; 0x01
    28da:	2c 91       	ld	r18, X
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 80       	ldd	r0, Z+2	; 0x02
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <__vector_24+0x90>
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	0a 94       	dec	r0
    28ea:	e2 f7       	brpl	.-8      	; 0x28e4 <__vector_24+0x8c>
    28ec:	80 95       	com	r24
    28ee:	82 23       	and	r24, r18
    28f0:	8c 93       	st	X, r24
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <__vector_24+0xb8>
		} else {
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);

			} else {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
    28f4:	a0 81       	ld	r26, Z
    28f6:	b1 81       	ldd	r27, Z+1	; 0x01
    28f8:	4c 91       	ld	r20, X
    28fa:	21 e0       	ldi	r18, 0x01	; 1
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	c9 01       	movw	r24, r18
    2900:	02 80       	ldd	r0, Z+2	; 0x02
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <__vector_24+0xb0>
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	0a 94       	dec	r0
    290a:	e2 f7       	brpl	.-8      	; 0x2904 <__vector_24+0xac>
    290c:	84 2b       	or	r24, r20
    290e:	8c 93       	st	X, r24
	_spi_active = 0;
	_set_cs(CS_INACTIVE);
	#endif

	// If handler defined - call it with instance and received byte.
	if (_this->_call_back)
    2910:	80 91 81 0f 	lds	r24, 0x0F81
    2914:	90 91 82 0f 	lds	r25, 0x0F82
    2918:	dc 01       	movw	r26, r24
    291a:	1a 96       	adiw	r26, 0x0a	; 10
    291c:	ed 91       	ld	r30, X+
    291e:	fc 91       	ld	r31, X
    2920:	1b 97       	sbiw	r26, 0x0b	; 11
    2922:	30 97       	sbiw	r30, 0x00	; 0
    2924:	11 f0       	breq	.+4      	; 0x292a <__vector_24+0xd2>
	{
		_this->_call_back(_this, item);
    2926:	69 81       	ldd	r22, Y+1	; 0x01
    2928:	19 95       	eicall
	}
    292a:	0f 90       	pop	r0
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	ff 91       	pop	r31
    2932:	ef 91       	pop	r30
    2934:	bf 91       	pop	r27
    2936:	af 91       	pop	r26
    2938:	9f 91       	pop	r25
    293a:	8f 91       	pop	r24
    293c:	7f 91       	pop	r23
    293e:	6f 91       	pop	r22
    2940:	5f 91       	pop	r21
    2942:	4f 91       	pop	r20
    2944:	3f 91       	pop	r19
    2946:	2f 91       	pop	r18
    2948:	0f 90       	pop	r0
    294a:	0b be       	out	0x3b, r0	; 59
    294c:	0f 90       	pop	r0
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	0f 90       	pop	r0
    2952:	1f 90       	pop	r1
    2954:	18 95       	reti

00002956 <__divmodhi4>:
    2956:	97 fb       	bst	r25, 7
    2958:	07 2e       	mov	r0, r23
    295a:	16 f4       	brtc	.+4      	; 0x2960 <__divmodhi4+0xa>
    295c:	00 94       	com	r0
    295e:	06 d0       	rcall	.+12     	; 0x296c <__divmodhi4_neg1>
    2960:	77 fd       	sbrc	r23, 7
    2962:	08 d0       	rcall	.+16     	; 0x2974 <__divmodhi4_neg2>
    2964:	5e d0       	rcall	.+188    	; 0x2a22 <__udivmodhi4>
    2966:	07 fc       	sbrc	r0, 7
    2968:	05 d0       	rcall	.+10     	; 0x2974 <__divmodhi4_neg2>
    296a:	3e f4       	brtc	.+14     	; 0x297a <__divmodhi4_exit>

0000296c <__divmodhi4_neg1>:
    296c:	90 95       	com	r25
    296e:	81 95       	neg	r24
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	08 95       	ret

00002974 <__divmodhi4_neg2>:
    2974:	70 95       	com	r23
    2976:	61 95       	neg	r22
    2978:	7f 4f       	sbci	r23, 0xFF	; 255

0000297a <__divmodhi4_exit>:
    297a:	08 95       	ret

0000297c <__udivmodsi4>:
    297c:	a1 e2       	ldi	r26, 0x21	; 33
    297e:	1a 2e       	mov	r1, r26
    2980:	aa 1b       	sub	r26, r26
    2982:	bb 1b       	sub	r27, r27
    2984:	fd 01       	movw	r30, r26
    2986:	0d c0       	rjmp	.+26     	; 0x29a2 <__udivmodsi4_ep>

00002988 <__udivmodsi4_loop>:
    2988:	aa 1f       	adc	r26, r26
    298a:	bb 1f       	adc	r27, r27
    298c:	ee 1f       	adc	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	a2 17       	cp	r26, r18
    2992:	b3 07       	cpc	r27, r19
    2994:	e4 07       	cpc	r30, r20
    2996:	f5 07       	cpc	r31, r21
    2998:	20 f0       	brcs	.+8      	; 0x29a2 <__udivmodsi4_ep>
    299a:	a2 1b       	sub	r26, r18
    299c:	b3 0b       	sbc	r27, r19
    299e:	e4 0b       	sbc	r30, r20
    29a0:	f5 0b       	sbc	r31, r21

000029a2 <__udivmodsi4_ep>:
    29a2:	66 1f       	adc	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	88 1f       	adc	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	1a 94       	dec	r1
    29ac:	69 f7       	brne	.-38     	; 0x2988 <__udivmodsi4_loop>
    29ae:	60 95       	com	r22
    29b0:	70 95       	com	r23
    29b2:	80 95       	com	r24
    29b4:	90 95       	com	r25
    29b6:	9b 01       	movw	r18, r22
    29b8:	ac 01       	movw	r20, r24
    29ba:	bd 01       	movw	r22, r26
    29bc:	cf 01       	movw	r24, r30
    29be:	08 95       	ret

000029c0 <__divmodsi4>:
    29c0:	05 2e       	mov	r0, r21
    29c2:	97 fb       	bst	r25, 7
    29c4:	16 f4       	brtc	.+4      	; 0x29ca <__divmodsi4+0xa>
    29c6:	00 94       	com	r0
    29c8:	0f d0       	rcall	.+30     	; 0x29e8 <__negsi2>
    29ca:	57 fd       	sbrc	r21, 7
    29cc:	05 d0       	rcall	.+10     	; 0x29d8 <__divmodsi4_neg2>
    29ce:	d6 df       	rcall	.-84     	; 0x297c <__udivmodsi4>
    29d0:	07 fc       	sbrc	r0, 7
    29d2:	02 d0       	rcall	.+4      	; 0x29d8 <__divmodsi4_neg2>
    29d4:	46 f4       	brtc	.+16     	; 0x29e6 <__divmodsi4_exit>
    29d6:	08 c0       	rjmp	.+16     	; 0x29e8 <__negsi2>

000029d8 <__divmodsi4_neg2>:
    29d8:	50 95       	com	r21
    29da:	40 95       	com	r20
    29dc:	30 95       	com	r19
    29de:	21 95       	neg	r18
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	4f 4f       	sbci	r20, 0xFF	; 255
    29e4:	5f 4f       	sbci	r21, 0xFF	; 255

000029e6 <__divmodsi4_exit>:
    29e6:	08 95       	ret

000029e8 <__negsi2>:
    29e8:	90 95       	com	r25
    29ea:	80 95       	com	r24
    29ec:	70 95       	com	r23
    29ee:	61 95       	neg	r22
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	8f 4f       	sbci	r24, 0xFF	; 255
    29f4:	9f 4f       	sbci	r25, 0xFF	; 255
    29f6:	08 95       	ret

000029f8 <__tablejump2__>:
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31

000029fc <__tablejump__>:
    29fc:	05 90       	lpm	r0, Z+
    29fe:	f4 91       	lpm	r31, Z
    2a00:	e0 2d       	mov	r30, r0
    2a02:	19 94       	eijmp

00002a04 <__umulhisi3>:
    2a04:	a2 9f       	mul	r26, r18
    2a06:	b0 01       	movw	r22, r0
    2a08:	b3 9f       	mul	r27, r19
    2a0a:	c0 01       	movw	r24, r0
    2a0c:	a3 9f       	mul	r26, r19
    2a0e:	70 0d       	add	r23, r0
    2a10:	81 1d       	adc	r24, r1
    2a12:	11 24       	eor	r1, r1
    2a14:	91 1d       	adc	r25, r1
    2a16:	b2 9f       	mul	r27, r18
    2a18:	70 0d       	add	r23, r0
    2a1a:	81 1d       	adc	r24, r1
    2a1c:	11 24       	eor	r1, r1
    2a1e:	91 1d       	adc	r25, r1
    2a20:	08 95       	ret

00002a22 <__udivmodhi4>:
    2a22:	aa 1b       	sub	r26, r26
    2a24:	bb 1b       	sub	r27, r27
    2a26:	51 e1       	ldi	r21, 0x11	; 17
    2a28:	07 c0       	rjmp	.+14     	; 0x2a38 <__udivmodhi4_ep>

00002a2a <__udivmodhi4_loop>:
    2a2a:	aa 1f       	adc	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	a6 17       	cp	r26, r22
    2a30:	b7 07       	cpc	r27, r23
    2a32:	10 f0       	brcs	.+4      	; 0x2a38 <__udivmodhi4_ep>
    2a34:	a6 1b       	sub	r26, r22
    2a36:	b7 0b       	sbc	r27, r23

00002a38 <__udivmodhi4_ep>:
    2a38:	88 1f       	adc	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	5a 95       	dec	r21
    2a3e:	a9 f7       	brne	.-22     	; 0x2a2a <__udivmodhi4_loop>
    2a40:	80 95       	com	r24
    2a42:	90 95       	com	r25
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	08 95       	ret

00002a4a <malloc>:
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	82 30       	cpi	r24, 0x02	; 2
    2a50:	91 05       	cpc	r25, r1
    2a52:	10 f4       	brcc	.+4      	; 0x2a58 <malloc+0xe>
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	e0 91 86 0f 	lds	r30, 0x0F86
    2a5c:	f0 91 87 0f 	lds	r31, 0x0F87
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	a0 e0       	ldi	r26, 0x00	; 0
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	30 97       	sbiw	r30, 0x00	; 0
    2a6a:	39 f1       	breq	.+78     	; 0x2aba <malloc+0x70>
    2a6c:	40 81       	ld	r20, Z
    2a6e:	51 81       	ldd	r21, Z+1	; 0x01
    2a70:	48 17       	cp	r20, r24
    2a72:	59 07       	cpc	r21, r25
    2a74:	b8 f0       	brcs	.+46     	; 0x2aa4 <malloc+0x5a>
    2a76:	48 17       	cp	r20, r24
    2a78:	59 07       	cpc	r21, r25
    2a7a:	71 f4       	brne	.+28     	; 0x2a98 <malloc+0x4e>
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	10 97       	sbiw	r26, 0x00	; 0
    2a82:	29 f0       	breq	.+10     	; 0x2a8e <malloc+0x44>
    2a84:	13 96       	adiw	r26, 0x03	; 3
    2a86:	9c 93       	st	X, r25
    2a88:	8e 93       	st	-X, r24
    2a8a:	12 97       	sbiw	r26, 0x02	; 2
    2a8c:	2c c0       	rjmp	.+88     	; 0x2ae6 <malloc+0x9c>
    2a8e:	90 93 87 0f 	sts	0x0F87, r25
    2a92:	80 93 86 0f 	sts	0x0F86, r24
    2a96:	27 c0       	rjmp	.+78     	; 0x2ae6 <malloc+0x9c>
    2a98:	21 15       	cp	r18, r1
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	31 f0       	breq	.+12     	; 0x2aaa <malloc+0x60>
    2a9e:	42 17       	cp	r20, r18
    2aa0:	53 07       	cpc	r21, r19
    2aa2:	18 f0       	brcs	.+6      	; 0x2aaa <malloc+0x60>
    2aa4:	a9 01       	movw	r20, r18
    2aa6:	db 01       	movw	r26, r22
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <malloc+0x62>
    2aaa:	ef 01       	movw	r28, r30
    2aac:	9a 01       	movw	r18, r20
    2aae:	bd 01       	movw	r22, r26
    2ab0:	df 01       	movw	r26, r30
    2ab2:	02 80       	ldd	r0, Z+2	; 0x02
    2ab4:	f3 81       	ldd	r31, Z+3	; 0x03
    2ab6:	e0 2d       	mov	r30, r0
    2ab8:	d7 cf       	rjmp	.-82     	; 0x2a68 <malloc+0x1e>
    2aba:	21 15       	cp	r18, r1
    2abc:	31 05       	cpc	r19, r1
    2abe:	f9 f0       	breq	.+62     	; 0x2afe <malloc+0xb4>
    2ac0:	28 1b       	sub	r18, r24
    2ac2:	39 0b       	sbc	r19, r25
    2ac4:	24 30       	cpi	r18, 0x04	; 4
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	80 f4       	brcc	.+32     	; 0x2aea <malloc+0xa0>
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	61 15       	cp	r22, r1
    2ad0:	71 05       	cpc	r23, r1
    2ad2:	21 f0       	breq	.+8      	; 0x2adc <malloc+0x92>
    2ad4:	fb 01       	movw	r30, r22
    2ad6:	93 83       	std	Z+3, r25	; 0x03
    2ad8:	82 83       	std	Z+2, r24	; 0x02
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <malloc+0x9a>
    2adc:	90 93 87 0f 	sts	0x0F87, r25
    2ae0:	80 93 86 0f 	sts	0x0F86, r24
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	32 96       	adiw	r30, 0x02	; 2
    2ae8:	44 c0       	rjmp	.+136    	; 0x2b72 <malloc+0x128>
    2aea:	fe 01       	movw	r30, r28
    2aec:	e2 0f       	add	r30, r18
    2aee:	f3 1f       	adc	r31, r19
    2af0:	81 93       	st	Z+, r24
    2af2:	91 93       	st	Z+, r25
    2af4:	22 50       	subi	r18, 0x02	; 2
    2af6:	31 09       	sbc	r19, r1
    2af8:	39 83       	std	Y+1, r19	; 0x01
    2afa:	28 83       	st	Y, r18
    2afc:	3a c0       	rjmp	.+116    	; 0x2b72 <malloc+0x128>
    2afe:	20 91 84 0f 	lds	r18, 0x0F84
    2b02:	30 91 85 0f 	lds	r19, 0x0F85
    2b06:	23 2b       	or	r18, r19
    2b08:	41 f4       	brne	.+16     	; 0x2b1a <malloc+0xd0>
    2b0a:	20 91 02 02 	lds	r18, 0x0202
    2b0e:	30 91 03 02 	lds	r19, 0x0203
    2b12:	30 93 85 0f 	sts	0x0F85, r19
    2b16:	20 93 84 0f 	sts	0x0F84, r18
    2b1a:	20 91 00 02 	lds	r18, 0x0200
    2b1e:	30 91 01 02 	lds	r19, 0x0201
    2b22:	21 15       	cp	r18, r1
    2b24:	31 05       	cpc	r19, r1
    2b26:	41 f4       	brne	.+16     	; 0x2b38 <malloc+0xee>
    2b28:	2d b7       	in	r18, 0x3d	; 61
    2b2a:	3e b7       	in	r19, 0x3e	; 62
    2b2c:	40 91 04 02 	lds	r20, 0x0204
    2b30:	50 91 05 02 	lds	r21, 0x0205
    2b34:	24 1b       	sub	r18, r20
    2b36:	35 0b       	sbc	r19, r21
    2b38:	e0 91 84 0f 	lds	r30, 0x0F84
    2b3c:	f0 91 85 0f 	lds	r31, 0x0F85
    2b40:	e2 17       	cp	r30, r18
    2b42:	f3 07       	cpc	r31, r19
    2b44:	a0 f4       	brcc	.+40     	; 0x2b6e <malloc+0x124>
    2b46:	2e 1b       	sub	r18, r30
    2b48:	3f 0b       	sbc	r19, r31
    2b4a:	28 17       	cp	r18, r24
    2b4c:	39 07       	cpc	r19, r25
    2b4e:	78 f0       	brcs	.+30     	; 0x2b6e <malloc+0x124>
    2b50:	ac 01       	movw	r20, r24
    2b52:	4e 5f       	subi	r20, 0xFE	; 254
    2b54:	5f 4f       	sbci	r21, 0xFF	; 255
    2b56:	24 17       	cp	r18, r20
    2b58:	35 07       	cpc	r19, r21
    2b5a:	48 f0       	brcs	.+18     	; 0x2b6e <malloc+0x124>
    2b5c:	4e 0f       	add	r20, r30
    2b5e:	5f 1f       	adc	r21, r31
    2b60:	50 93 85 0f 	sts	0x0F85, r21
    2b64:	40 93 84 0f 	sts	0x0F84, r20
    2b68:	81 93       	st	Z+, r24
    2b6a:	91 93       	st	Z+, r25
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <malloc+0x128>
    2b6e:	e0 e0       	ldi	r30, 0x00	; 0
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	cf 01       	movw	r24, r30
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <free>:
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <free+0xa>
    2b82:	87 c0       	rjmp	.+270    	; 0x2c92 <free+0x118>
    2b84:	fc 01       	movw	r30, r24
    2b86:	32 97       	sbiw	r30, 0x02	; 2
    2b88:	13 82       	std	Z+3, r1	; 0x03
    2b8a:	12 82       	std	Z+2, r1	; 0x02
    2b8c:	c0 91 86 0f 	lds	r28, 0x0F86
    2b90:	d0 91 87 0f 	lds	r29, 0x0F87
    2b94:	20 97       	sbiw	r28, 0x00	; 0
    2b96:	81 f4       	brne	.+32     	; 0x2bb8 <free+0x3e>
    2b98:	20 81       	ld	r18, Z
    2b9a:	31 81       	ldd	r19, Z+1	; 0x01
    2b9c:	28 0f       	add	r18, r24
    2b9e:	39 1f       	adc	r19, r25
    2ba0:	80 91 84 0f 	lds	r24, 0x0F84
    2ba4:	90 91 85 0f 	lds	r25, 0x0F85
    2ba8:	82 17       	cp	r24, r18
    2baa:	93 07       	cpc	r25, r19
    2bac:	79 f5       	brne	.+94     	; 0x2c0c <free+0x92>
    2bae:	f0 93 85 0f 	sts	0x0F85, r31
    2bb2:	e0 93 84 0f 	sts	0x0F84, r30
    2bb6:	6d c0       	rjmp	.+218    	; 0x2c92 <free+0x118>
    2bb8:	de 01       	movw	r26, r28
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	ae 17       	cp	r26, r30
    2bc0:	bf 07       	cpc	r27, r31
    2bc2:	50 f4       	brcc	.+20     	; 0x2bd8 <free+0x5e>
    2bc4:	12 96       	adiw	r26, 0x02	; 2
    2bc6:	4d 91       	ld	r20, X+
    2bc8:	5c 91       	ld	r21, X
    2bca:	13 97       	sbiw	r26, 0x03	; 3
    2bcc:	9d 01       	movw	r18, r26
    2bce:	41 15       	cp	r20, r1
    2bd0:	51 05       	cpc	r21, r1
    2bd2:	09 f1       	breq	.+66     	; 0x2c16 <free+0x9c>
    2bd4:	da 01       	movw	r26, r20
    2bd6:	f3 cf       	rjmp	.-26     	; 0x2bbe <free+0x44>
    2bd8:	b3 83       	std	Z+3, r27	; 0x03
    2bda:	a2 83       	std	Z+2, r26	; 0x02
    2bdc:	40 81       	ld	r20, Z
    2bde:	51 81       	ldd	r21, Z+1	; 0x01
    2be0:	84 0f       	add	r24, r20
    2be2:	95 1f       	adc	r25, r21
    2be4:	8a 17       	cp	r24, r26
    2be6:	9b 07       	cpc	r25, r27
    2be8:	71 f4       	brne	.+28     	; 0x2c06 <free+0x8c>
    2bea:	8d 91       	ld	r24, X+
    2bec:	9c 91       	ld	r25, X
    2bee:	11 97       	sbiw	r26, 0x01	; 1
    2bf0:	84 0f       	add	r24, r20
    2bf2:	95 1f       	adc	r25, r21
    2bf4:	02 96       	adiw	r24, 0x02	; 2
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	12 96       	adiw	r26, 0x02	; 2
    2bfc:	8d 91       	ld	r24, X+
    2bfe:	9c 91       	ld	r25, X
    2c00:	13 97       	sbiw	r26, 0x03	; 3
    2c02:	93 83       	std	Z+3, r25	; 0x03
    2c04:	82 83       	std	Z+2, r24	; 0x02
    2c06:	21 15       	cp	r18, r1
    2c08:	31 05       	cpc	r19, r1
    2c0a:	29 f4       	brne	.+10     	; 0x2c16 <free+0x9c>
    2c0c:	f0 93 87 0f 	sts	0x0F87, r31
    2c10:	e0 93 86 0f 	sts	0x0F86, r30
    2c14:	3e c0       	rjmp	.+124    	; 0x2c92 <free+0x118>
    2c16:	d9 01       	movw	r26, r18
    2c18:	13 96       	adiw	r26, 0x03	; 3
    2c1a:	fc 93       	st	X, r31
    2c1c:	ee 93       	st	-X, r30
    2c1e:	12 97       	sbiw	r26, 0x02	; 2
    2c20:	4d 91       	ld	r20, X+
    2c22:	5d 91       	ld	r21, X+
    2c24:	a4 0f       	add	r26, r20
    2c26:	b5 1f       	adc	r27, r21
    2c28:	ea 17       	cp	r30, r26
    2c2a:	fb 07       	cpc	r31, r27
    2c2c:	79 f4       	brne	.+30     	; 0x2c4c <free+0xd2>
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	84 0f       	add	r24, r20
    2c34:	95 1f       	adc	r25, r21
    2c36:	02 96       	adiw	r24, 0x02	; 2
    2c38:	d9 01       	movw	r26, r18
    2c3a:	11 96       	adiw	r26, 0x01	; 1
    2c3c:	9c 93       	st	X, r25
    2c3e:	8e 93       	st	-X, r24
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	13 96       	adiw	r26, 0x03	; 3
    2c46:	9c 93       	st	X, r25
    2c48:	8e 93       	st	-X, r24
    2c4a:	12 97       	sbiw	r26, 0x02	; 2
    2c4c:	e0 e0       	ldi	r30, 0x00	; 0
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	19 f0       	breq	.+6      	; 0x2c5e <free+0xe4>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ec 01       	movw	r28, r24
    2c5c:	f9 cf       	rjmp	.-14     	; 0x2c50 <free+0xd6>
    2c5e:	ce 01       	movw	r24, r28
    2c60:	02 96       	adiw	r24, 0x02	; 2
    2c62:	28 81       	ld	r18, Y
    2c64:	39 81       	ldd	r19, Y+1	; 0x01
    2c66:	82 0f       	add	r24, r18
    2c68:	93 1f       	adc	r25, r19
    2c6a:	20 91 84 0f 	lds	r18, 0x0F84
    2c6e:	30 91 85 0f 	lds	r19, 0x0F85
    2c72:	28 17       	cp	r18, r24
    2c74:	39 07       	cpc	r19, r25
    2c76:	69 f4       	brne	.+26     	; 0x2c92 <free+0x118>
    2c78:	30 97       	sbiw	r30, 0x00	; 0
    2c7a:	29 f4       	brne	.+10     	; 0x2c86 <free+0x10c>
    2c7c:	10 92 87 0f 	sts	0x0F87, r1
    2c80:	10 92 86 0f 	sts	0x0F86, r1
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <free+0x110>
    2c86:	13 82       	std	Z+3, r1	; 0x03
    2c88:	12 82       	std	Z+2, r1	; 0x02
    2c8a:	d0 93 85 0f 	sts	0x0F85, r29
    2c8e:	c0 93 84 0f 	sts	0x0F84, r28
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	08 95       	ret

00002c98 <atoi>:
    2c98:	fc 01       	movw	r30, r24
    2c9a:	88 27       	eor	r24, r24
    2c9c:	99 27       	eor	r25, r25
    2c9e:	e8 94       	clt
    2ca0:	21 91       	ld	r18, Z+
    2ca2:	20 32       	cpi	r18, 0x20	; 32
    2ca4:	e9 f3       	breq	.-6      	; 0x2ca0 <atoi+0x8>
    2ca6:	29 30       	cpi	r18, 0x09	; 9
    2ca8:	10 f0       	brcs	.+4      	; 0x2cae <atoi+0x16>
    2caa:	2e 30       	cpi	r18, 0x0E	; 14
    2cac:	c8 f3       	brcs	.-14     	; 0x2ca0 <atoi+0x8>
    2cae:	2b 32       	cpi	r18, 0x2B	; 43
    2cb0:	39 f0       	breq	.+14     	; 0x2cc0 <atoi+0x28>
    2cb2:	2d 32       	cpi	r18, 0x2D	; 45
    2cb4:	31 f4       	brne	.+12     	; 0x2cc2 <atoi+0x2a>
    2cb6:	68 94       	set
    2cb8:	03 c0       	rjmp	.+6      	; 0x2cc0 <atoi+0x28>
    2cba:	14 d0       	rcall	.+40     	; 0x2ce4 <__mulhi_const_10>
    2cbc:	82 0f       	add	r24, r18
    2cbe:	91 1d       	adc	r25, r1
    2cc0:	21 91       	ld	r18, Z+
    2cc2:	20 53       	subi	r18, 0x30	; 48
    2cc4:	2a 30       	cpi	r18, 0x0A	; 10
    2cc6:	c8 f3       	brcs	.-14     	; 0x2cba <atoi+0x22>
    2cc8:	1e f4       	brtc	.+6      	; 0x2cd0 <atoi+0x38>
    2cca:	90 95       	com	r25
    2ccc:	81 95       	neg	r24
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	08 95       	ret

00002cd2 <memcpy>:
    2cd2:	fb 01       	movw	r30, r22
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <memcpy+0xa>
    2cd8:	01 90       	ld	r0, Z+
    2cda:	0d 92       	st	X+, r0
    2cdc:	41 50       	subi	r20, 0x01	; 1
    2cde:	50 40       	sbci	r21, 0x00	; 0
    2ce0:	d8 f7       	brcc	.-10     	; 0x2cd8 <memcpy+0x6>
    2ce2:	08 95       	ret

00002ce4 <__mulhi_const_10>:
    2ce4:	7a e0       	ldi	r23, 0x0A	; 10
    2ce6:	97 9f       	mul	r25, r23
    2ce8:	90 2d       	mov	r25, r0
    2cea:	87 9f       	mul	r24, r23
    2cec:	80 2d       	mov	r24, r0
    2cee:	91 0d       	add	r25, r1
    2cf0:	11 24       	eor	r1, r1
    2cf2:	08 95       	ret

00002cf4 <sprintf>:
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	2e 97       	sbiw	r28, 0x0e	; 14
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	0e 89       	ldd	r16, Y+22	; 0x16
    2d0e:	1f 89       	ldd	r17, Y+23	; 0x17
    2d10:	86 e0       	ldi	r24, 0x06	; 6
    2d12:	8c 83       	std	Y+4, r24	; 0x04
    2d14:	1a 83       	std	Y+2, r17	; 0x02
    2d16:	09 83       	std	Y+1, r16	; 0x01
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
    2d1a:	9f e7       	ldi	r25, 0x7F	; 127
    2d1c:	9e 83       	std	Y+6, r25	; 0x06
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
    2d20:	ae 01       	movw	r20, r28
    2d22:	46 5e       	subi	r20, 0xE6	; 230
    2d24:	5f 4f       	sbci	r21, 0xFF	; 255
    2d26:	68 8d       	ldd	r22, Y+24	; 0x18
    2d28:	79 8d       	ldd	r23, Y+25	; 0x19
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	10 d0       	rcall	.+32     	; 0x2d50 <vfprintf>
    2d30:	ef 81       	ldd	r30, Y+7	; 0x07
    2d32:	f8 85       	ldd	r31, Y+8	; 0x08
    2d34:	e0 0f       	add	r30, r16
    2d36:	f1 1f       	adc	r31, r17
    2d38:	10 82       	st	Z, r1
    2d3a:	2e 96       	adiw	r28, 0x0e	; 14
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	08 95       	ret

00002d50 <vfprintf>:
    2d50:	2f 92       	push	r2
    2d52:	3f 92       	push	r3
    2d54:	4f 92       	push	r4
    2d56:	5f 92       	push	r5
    2d58:	6f 92       	push	r6
    2d5a:	7f 92       	push	r7
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	cf 92       	push	r12
    2d66:	df 92       	push	r13
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	2c 97       	sbiw	r28, 0x0c	; 12
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	7c 01       	movw	r14, r24
    2d86:	6b 01       	movw	r12, r22
    2d88:	8a 01       	movw	r16, r20
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	17 82       	std	Z+7, r1	; 0x07
    2d8e:	16 82       	std	Z+6, r1	; 0x06
    2d90:	83 81       	ldd	r24, Z+3	; 0x03
    2d92:	81 ff       	sbrs	r24, 1
    2d94:	b0 c1       	rjmp	.+864    	; 0x30f6 <vfprintf+0x3a6>
    2d96:	ce 01       	movw	r24, r28
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	4c 01       	movw	r8, r24
    2d9c:	f7 01       	movw	r30, r14
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	f6 01       	movw	r30, r12
    2da2:	93 fd       	sbrc	r25, 3
    2da4:	85 91       	lpm	r24, Z+
    2da6:	93 ff       	sbrs	r25, 3
    2da8:	81 91       	ld	r24, Z+
    2daa:	6f 01       	movw	r12, r30
    2dac:	88 23       	and	r24, r24
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <vfprintf+0x62>
    2db0:	9e c1       	rjmp	.+828    	; 0x30ee <vfprintf+0x39e>
    2db2:	85 32       	cpi	r24, 0x25	; 37
    2db4:	39 f4       	brne	.+14     	; 0x2dc4 <vfprintf+0x74>
    2db6:	93 fd       	sbrc	r25, 3
    2db8:	85 91       	lpm	r24, Z+
    2dba:	93 ff       	sbrs	r25, 3
    2dbc:	81 91       	ld	r24, Z+
    2dbe:	6f 01       	movw	r12, r30
    2dc0:	85 32       	cpi	r24, 0x25	; 37
    2dc2:	21 f4       	brne	.+8      	; 0x2dcc <vfprintf+0x7c>
    2dc4:	b7 01       	movw	r22, r14
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	c7 d1       	rcall	.+910    	; 0x3158 <fputc>
    2dca:	e8 cf       	rjmp	.-48     	; 0x2d9c <vfprintf+0x4c>
    2dcc:	51 2c       	mov	r5, r1
    2dce:	31 2c       	mov	r3, r1
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	20 32       	cpi	r18, 0x20	; 32
    2dd4:	a0 f4       	brcc	.+40     	; 0x2dfe <vfprintf+0xae>
    2dd6:	8b 32       	cpi	r24, 0x2B	; 43
    2dd8:	69 f0       	breq	.+26     	; 0x2df4 <vfprintf+0xa4>
    2dda:	30 f4       	brcc	.+12     	; 0x2de8 <vfprintf+0x98>
    2ddc:	80 32       	cpi	r24, 0x20	; 32
    2dde:	59 f0       	breq	.+22     	; 0x2df6 <vfprintf+0xa6>
    2de0:	83 32       	cpi	r24, 0x23	; 35
    2de2:	69 f4       	brne	.+26     	; 0x2dfe <vfprintf+0xae>
    2de4:	20 61       	ori	r18, 0x10	; 16
    2de6:	2c c0       	rjmp	.+88     	; 0x2e40 <vfprintf+0xf0>
    2de8:	8d 32       	cpi	r24, 0x2D	; 45
    2dea:	39 f0       	breq	.+14     	; 0x2dfa <vfprintf+0xaa>
    2dec:	80 33       	cpi	r24, 0x30	; 48
    2dee:	39 f4       	brne	.+14     	; 0x2dfe <vfprintf+0xae>
    2df0:	21 60       	ori	r18, 0x01	; 1
    2df2:	26 c0       	rjmp	.+76     	; 0x2e40 <vfprintf+0xf0>
    2df4:	22 60       	ori	r18, 0x02	; 2
    2df6:	24 60       	ori	r18, 0x04	; 4
    2df8:	23 c0       	rjmp	.+70     	; 0x2e40 <vfprintf+0xf0>
    2dfa:	28 60       	ori	r18, 0x08	; 8
    2dfc:	21 c0       	rjmp	.+66     	; 0x2e40 <vfprintf+0xf0>
    2dfe:	27 fd       	sbrc	r18, 7
    2e00:	27 c0       	rjmp	.+78     	; 0x2e50 <vfprintf+0x100>
    2e02:	30 ed       	ldi	r19, 0xD0	; 208
    2e04:	38 0f       	add	r19, r24
    2e06:	3a 30       	cpi	r19, 0x0A	; 10
    2e08:	78 f4       	brcc	.+30     	; 0x2e28 <vfprintf+0xd8>
    2e0a:	26 ff       	sbrs	r18, 6
    2e0c:	06 c0       	rjmp	.+12     	; 0x2e1a <vfprintf+0xca>
    2e0e:	fa e0       	ldi	r31, 0x0A	; 10
    2e10:	5f 9e       	mul	r5, r31
    2e12:	30 0d       	add	r19, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	53 2e       	mov	r5, r19
    2e18:	13 c0       	rjmp	.+38     	; 0x2e40 <vfprintf+0xf0>
    2e1a:	8a e0       	ldi	r24, 0x0A	; 10
    2e1c:	38 9e       	mul	r3, r24
    2e1e:	30 0d       	add	r19, r0
    2e20:	11 24       	eor	r1, r1
    2e22:	33 2e       	mov	r3, r19
    2e24:	20 62       	ori	r18, 0x20	; 32
    2e26:	0c c0       	rjmp	.+24     	; 0x2e40 <vfprintf+0xf0>
    2e28:	8e 32       	cpi	r24, 0x2E	; 46
    2e2a:	21 f4       	brne	.+8      	; 0x2e34 <vfprintf+0xe4>
    2e2c:	26 fd       	sbrc	r18, 6
    2e2e:	5f c1       	rjmp	.+702    	; 0x30ee <vfprintf+0x39e>
    2e30:	20 64       	ori	r18, 0x40	; 64
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <vfprintf+0xf0>
    2e34:	8c 36       	cpi	r24, 0x6C	; 108
    2e36:	11 f4       	brne	.+4      	; 0x2e3c <vfprintf+0xec>
    2e38:	20 68       	ori	r18, 0x80	; 128
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <vfprintf+0xf0>
    2e3c:	88 36       	cpi	r24, 0x68	; 104
    2e3e:	41 f4       	brne	.+16     	; 0x2e50 <vfprintf+0x100>
    2e40:	f6 01       	movw	r30, r12
    2e42:	93 fd       	sbrc	r25, 3
    2e44:	85 91       	lpm	r24, Z+
    2e46:	93 ff       	sbrs	r25, 3
    2e48:	81 91       	ld	r24, Z+
    2e4a:	6f 01       	movw	r12, r30
    2e4c:	81 11       	cpse	r24, r1
    2e4e:	c1 cf       	rjmp	.-126    	; 0x2dd2 <vfprintf+0x82>
    2e50:	98 2f       	mov	r25, r24
    2e52:	9f 7d       	andi	r25, 0xDF	; 223
    2e54:	95 54       	subi	r25, 0x45	; 69
    2e56:	93 30       	cpi	r25, 0x03	; 3
    2e58:	28 f4       	brcc	.+10     	; 0x2e64 <vfprintf+0x114>
    2e5a:	0c 5f       	subi	r16, 0xFC	; 252
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	ff e3       	ldi	r31, 0x3F	; 63
    2e60:	f9 83       	std	Y+1, r31	; 0x01
    2e62:	0d c0       	rjmp	.+26     	; 0x2e7e <vfprintf+0x12e>
    2e64:	83 36       	cpi	r24, 0x63	; 99
    2e66:	31 f0       	breq	.+12     	; 0x2e74 <vfprintf+0x124>
    2e68:	83 37       	cpi	r24, 0x73	; 115
    2e6a:	71 f0       	breq	.+28     	; 0x2e88 <vfprintf+0x138>
    2e6c:	83 35       	cpi	r24, 0x53	; 83
    2e6e:	09 f0       	breq	.+2      	; 0x2e72 <vfprintf+0x122>
    2e70:	57 c0       	rjmp	.+174    	; 0x2f20 <vfprintf+0x1d0>
    2e72:	21 c0       	rjmp	.+66     	; 0x2eb6 <vfprintf+0x166>
    2e74:	f8 01       	movw	r30, r16
    2e76:	80 81       	ld	r24, Z
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	0e 5f       	subi	r16, 0xFE	; 254
    2e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7e:	44 24       	eor	r4, r4
    2e80:	43 94       	inc	r4
    2e82:	51 2c       	mov	r5, r1
    2e84:	54 01       	movw	r10, r8
    2e86:	14 c0       	rjmp	.+40     	; 0x2eb0 <vfprintf+0x160>
    2e88:	38 01       	movw	r6, r16
    2e8a:	f2 e0       	ldi	r31, 0x02	; 2
    2e8c:	6f 0e       	add	r6, r31
    2e8e:	71 1c       	adc	r7, r1
    2e90:	f8 01       	movw	r30, r16
    2e92:	a0 80       	ld	r10, Z
    2e94:	b1 80       	ldd	r11, Z+1	; 0x01
    2e96:	26 ff       	sbrs	r18, 6
    2e98:	03 c0       	rjmp	.+6      	; 0x2ea0 <vfprintf+0x150>
    2e9a:	65 2d       	mov	r22, r5
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <vfprintf+0x154>
    2ea0:	6f ef       	ldi	r22, 0xFF	; 255
    2ea2:	7f ef       	ldi	r23, 0xFF	; 255
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	2c 87       	std	Y+12, r18	; 0x0c
    2ea8:	4c d1       	rcall	.+664    	; 0x3142 <strnlen>
    2eaa:	2c 01       	movw	r4, r24
    2eac:	83 01       	movw	r16, r6
    2eae:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eb0:	2f 77       	andi	r18, 0x7F	; 127
    2eb2:	22 2e       	mov	r2, r18
    2eb4:	16 c0       	rjmp	.+44     	; 0x2ee2 <vfprintf+0x192>
    2eb6:	38 01       	movw	r6, r16
    2eb8:	f2 e0       	ldi	r31, 0x02	; 2
    2eba:	6f 0e       	add	r6, r31
    2ebc:	71 1c       	adc	r7, r1
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	a0 80       	ld	r10, Z
    2ec2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ec4:	26 ff       	sbrs	r18, 6
    2ec6:	03 c0       	rjmp	.+6      	; 0x2ece <vfprintf+0x17e>
    2ec8:	65 2d       	mov	r22, r5
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <vfprintf+0x182>
    2ece:	6f ef       	ldi	r22, 0xFF	; 255
    2ed0:	7f ef       	ldi	r23, 0xFF	; 255
    2ed2:	c5 01       	movw	r24, r10
    2ed4:	2c 87       	std	Y+12, r18	; 0x0c
    2ed6:	2a d1       	rcall	.+596    	; 0x312c <strnlen_P>
    2ed8:	2c 01       	movw	r4, r24
    2eda:	2c 85       	ldd	r18, Y+12	; 0x0c
    2edc:	20 68       	ori	r18, 0x80	; 128
    2ede:	22 2e       	mov	r2, r18
    2ee0:	83 01       	movw	r16, r6
    2ee2:	23 fc       	sbrc	r2, 3
    2ee4:	19 c0       	rjmp	.+50     	; 0x2f18 <vfprintf+0x1c8>
    2ee6:	83 2d       	mov	r24, r3
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	48 16       	cp	r4, r24
    2eec:	59 06       	cpc	r5, r25
    2eee:	a0 f4       	brcc	.+40     	; 0x2f18 <vfprintf+0x1c8>
    2ef0:	b7 01       	movw	r22, r14
    2ef2:	80 e2       	ldi	r24, 0x20	; 32
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	30 d1       	rcall	.+608    	; 0x3158 <fputc>
    2ef8:	3a 94       	dec	r3
    2efa:	f5 cf       	rjmp	.-22     	; 0x2ee6 <vfprintf+0x196>
    2efc:	f5 01       	movw	r30, r10
    2efe:	27 fc       	sbrc	r2, 7
    2f00:	85 91       	lpm	r24, Z+
    2f02:	27 fe       	sbrs	r2, 7
    2f04:	81 91       	ld	r24, Z+
    2f06:	5f 01       	movw	r10, r30
    2f08:	b7 01       	movw	r22, r14
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	25 d1       	rcall	.+586    	; 0x3158 <fputc>
    2f0e:	31 10       	cpse	r3, r1
    2f10:	3a 94       	dec	r3
    2f12:	f1 e0       	ldi	r31, 0x01	; 1
    2f14:	4f 1a       	sub	r4, r31
    2f16:	51 08       	sbc	r5, r1
    2f18:	41 14       	cp	r4, r1
    2f1a:	51 04       	cpc	r5, r1
    2f1c:	79 f7       	brne	.-34     	; 0x2efc <vfprintf+0x1ac>
    2f1e:	de c0       	rjmp	.+444    	; 0x30dc <vfprintf+0x38c>
    2f20:	84 36       	cpi	r24, 0x64	; 100
    2f22:	11 f0       	breq	.+4      	; 0x2f28 <vfprintf+0x1d8>
    2f24:	89 36       	cpi	r24, 0x69	; 105
    2f26:	31 f5       	brne	.+76     	; 0x2f74 <vfprintf+0x224>
    2f28:	f8 01       	movw	r30, r16
    2f2a:	27 ff       	sbrs	r18, 7
    2f2c:	07 c0       	rjmp	.+14     	; 0x2f3c <vfprintf+0x1ec>
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	0c 5f       	subi	r16, 0xFC	; 252
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	08 c0       	rjmp	.+16     	; 0x2f4c <vfprintf+0x1fc>
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	88 27       	eor	r24, r24
    2f42:	77 fd       	sbrc	r23, 7
    2f44:	80 95       	com	r24
    2f46:	98 2f       	mov	r25, r24
    2f48:	0e 5f       	subi	r16, 0xFE	; 254
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	2f 76       	andi	r18, 0x6F	; 111
    2f4e:	b2 2e       	mov	r11, r18
    2f50:	97 ff       	sbrs	r25, 7
    2f52:	09 c0       	rjmp	.+18     	; 0x2f66 <vfprintf+0x216>
    2f54:	90 95       	com	r25
    2f56:	80 95       	com	r24
    2f58:	70 95       	com	r23
    2f5a:	61 95       	neg	r22
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	20 68       	ori	r18, 0x80	; 128
    2f64:	b2 2e       	mov	r11, r18
    2f66:	2a e0       	ldi	r18, 0x0A	; 10
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	a4 01       	movw	r20, r8
    2f6c:	27 d1       	rcall	.+590    	; 0x31bc <__ultoa_invert>
    2f6e:	a8 2e       	mov	r10, r24
    2f70:	a8 18       	sub	r10, r8
    2f72:	43 c0       	rjmp	.+134    	; 0x2ffa <vfprintf+0x2aa>
    2f74:	85 37       	cpi	r24, 0x75	; 117
    2f76:	29 f4       	brne	.+10     	; 0x2f82 <vfprintf+0x232>
    2f78:	2f 7e       	andi	r18, 0xEF	; 239
    2f7a:	b2 2e       	mov	r11, r18
    2f7c:	2a e0       	ldi	r18, 0x0A	; 10
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	25 c0       	rjmp	.+74     	; 0x2fcc <vfprintf+0x27c>
    2f82:	f2 2f       	mov	r31, r18
    2f84:	f9 7f       	andi	r31, 0xF9	; 249
    2f86:	bf 2e       	mov	r11, r31
    2f88:	8f 36       	cpi	r24, 0x6F	; 111
    2f8a:	c1 f0       	breq	.+48     	; 0x2fbc <vfprintf+0x26c>
    2f8c:	18 f4       	brcc	.+6      	; 0x2f94 <vfprintf+0x244>
    2f8e:	88 35       	cpi	r24, 0x58	; 88
    2f90:	79 f0       	breq	.+30     	; 0x2fb0 <vfprintf+0x260>
    2f92:	ad c0       	rjmp	.+346    	; 0x30ee <vfprintf+0x39e>
    2f94:	80 37       	cpi	r24, 0x70	; 112
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <vfprintf+0x24e>
    2f98:	88 37       	cpi	r24, 0x78	; 120
    2f9a:	21 f0       	breq	.+8      	; 0x2fa4 <vfprintf+0x254>
    2f9c:	a8 c0       	rjmp	.+336    	; 0x30ee <vfprintf+0x39e>
    2f9e:	2f 2f       	mov	r18, r31
    2fa0:	20 61       	ori	r18, 0x10	; 16
    2fa2:	b2 2e       	mov	r11, r18
    2fa4:	b4 fe       	sbrs	r11, 4
    2fa6:	0d c0       	rjmp	.+26     	; 0x2fc2 <vfprintf+0x272>
    2fa8:	8b 2d       	mov	r24, r11
    2faa:	84 60       	ori	r24, 0x04	; 4
    2fac:	b8 2e       	mov	r11, r24
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <vfprintf+0x272>
    2fb0:	24 ff       	sbrs	r18, 4
    2fb2:	0a c0       	rjmp	.+20     	; 0x2fc8 <vfprintf+0x278>
    2fb4:	9f 2f       	mov	r25, r31
    2fb6:	96 60       	ori	r25, 0x06	; 6
    2fb8:	b9 2e       	mov	r11, r25
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <vfprintf+0x278>
    2fbc:	28 e0       	ldi	r18, 0x08	; 8
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <vfprintf+0x27c>
    2fc2:	20 e1       	ldi	r18, 0x10	; 16
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <vfprintf+0x27c>
    2fc8:	20 e1       	ldi	r18, 0x10	; 16
    2fca:	32 e0       	ldi	r19, 0x02	; 2
    2fcc:	f8 01       	movw	r30, r16
    2fce:	b7 fe       	sbrs	r11, 7
    2fd0:	07 c0       	rjmp	.+14     	; 0x2fe0 <vfprintf+0x290>
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	0c 5f       	subi	r16, 0xFC	; 252
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	06 c0       	rjmp	.+12     	; 0x2fec <vfprintf+0x29c>
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	0e 5f       	subi	r16, 0xFE	; 254
    2fea:	1f 4f       	sbci	r17, 0xFF	; 255
    2fec:	a4 01       	movw	r20, r8
    2fee:	e6 d0       	rcall	.+460    	; 0x31bc <__ultoa_invert>
    2ff0:	a8 2e       	mov	r10, r24
    2ff2:	a8 18       	sub	r10, r8
    2ff4:	fb 2d       	mov	r31, r11
    2ff6:	ff 77       	andi	r31, 0x7F	; 127
    2ff8:	bf 2e       	mov	r11, r31
    2ffa:	b6 fe       	sbrs	r11, 6
    2ffc:	0b c0       	rjmp	.+22     	; 0x3014 <vfprintf+0x2c4>
    2ffe:	2b 2d       	mov	r18, r11
    3000:	2e 7f       	andi	r18, 0xFE	; 254
    3002:	a5 14       	cp	r10, r5
    3004:	50 f4       	brcc	.+20     	; 0x301a <vfprintf+0x2ca>
    3006:	b4 fe       	sbrs	r11, 4
    3008:	0a c0       	rjmp	.+20     	; 0x301e <vfprintf+0x2ce>
    300a:	b2 fc       	sbrc	r11, 2
    300c:	08 c0       	rjmp	.+16     	; 0x301e <vfprintf+0x2ce>
    300e:	2b 2d       	mov	r18, r11
    3010:	2e 7e       	andi	r18, 0xEE	; 238
    3012:	05 c0       	rjmp	.+10     	; 0x301e <vfprintf+0x2ce>
    3014:	7a 2c       	mov	r7, r10
    3016:	2b 2d       	mov	r18, r11
    3018:	03 c0       	rjmp	.+6      	; 0x3020 <vfprintf+0x2d0>
    301a:	7a 2c       	mov	r7, r10
    301c:	01 c0       	rjmp	.+2      	; 0x3020 <vfprintf+0x2d0>
    301e:	75 2c       	mov	r7, r5
    3020:	24 ff       	sbrs	r18, 4
    3022:	0d c0       	rjmp	.+26     	; 0x303e <vfprintf+0x2ee>
    3024:	fe 01       	movw	r30, r28
    3026:	ea 0d       	add	r30, r10
    3028:	f1 1d       	adc	r31, r1
    302a:	80 81       	ld	r24, Z
    302c:	80 33       	cpi	r24, 0x30	; 48
    302e:	11 f4       	brne	.+4      	; 0x3034 <vfprintf+0x2e4>
    3030:	29 7e       	andi	r18, 0xE9	; 233
    3032:	09 c0       	rjmp	.+18     	; 0x3046 <vfprintf+0x2f6>
    3034:	22 ff       	sbrs	r18, 2
    3036:	06 c0       	rjmp	.+12     	; 0x3044 <vfprintf+0x2f4>
    3038:	73 94       	inc	r7
    303a:	73 94       	inc	r7
    303c:	04 c0       	rjmp	.+8      	; 0x3046 <vfprintf+0x2f6>
    303e:	82 2f       	mov	r24, r18
    3040:	86 78       	andi	r24, 0x86	; 134
    3042:	09 f0       	breq	.+2      	; 0x3046 <vfprintf+0x2f6>
    3044:	73 94       	inc	r7
    3046:	23 fd       	sbrc	r18, 3
    3048:	12 c0       	rjmp	.+36     	; 0x306e <vfprintf+0x31e>
    304a:	20 ff       	sbrs	r18, 0
    304c:	06 c0       	rjmp	.+12     	; 0x305a <vfprintf+0x30a>
    304e:	5a 2c       	mov	r5, r10
    3050:	73 14       	cp	r7, r3
    3052:	18 f4       	brcc	.+6      	; 0x305a <vfprintf+0x30a>
    3054:	53 0c       	add	r5, r3
    3056:	57 18       	sub	r5, r7
    3058:	73 2c       	mov	r7, r3
    305a:	73 14       	cp	r7, r3
    305c:	60 f4       	brcc	.+24     	; 0x3076 <vfprintf+0x326>
    305e:	b7 01       	movw	r22, r14
    3060:	80 e2       	ldi	r24, 0x20	; 32
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	2c 87       	std	Y+12, r18	; 0x0c
    3066:	78 d0       	rcall	.+240    	; 0x3158 <fputc>
    3068:	73 94       	inc	r7
    306a:	2c 85       	ldd	r18, Y+12	; 0x0c
    306c:	f6 cf       	rjmp	.-20     	; 0x305a <vfprintf+0x30a>
    306e:	73 14       	cp	r7, r3
    3070:	10 f4       	brcc	.+4      	; 0x3076 <vfprintf+0x326>
    3072:	37 18       	sub	r3, r7
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <vfprintf+0x328>
    3076:	31 2c       	mov	r3, r1
    3078:	24 ff       	sbrs	r18, 4
    307a:	11 c0       	rjmp	.+34     	; 0x309e <vfprintf+0x34e>
    307c:	b7 01       	movw	r22, r14
    307e:	80 e3       	ldi	r24, 0x30	; 48
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	2c 87       	std	Y+12, r18	; 0x0c
    3084:	69 d0       	rcall	.+210    	; 0x3158 <fputc>
    3086:	2c 85       	ldd	r18, Y+12	; 0x0c
    3088:	22 ff       	sbrs	r18, 2
    308a:	16 c0       	rjmp	.+44     	; 0x30b8 <vfprintf+0x368>
    308c:	21 ff       	sbrs	r18, 1
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <vfprintf+0x346>
    3090:	88 e5       	ldi	r24, 0x58	; 88
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	02 c0       	rjmp	.+4      	; 0x309a <vfprintf+0x34a>
    3096:	88 e7       	ldi	r24, 0x78	; 120
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	b7 01       	movw	r22, r14
    309c:	0c c0       	rjmp	.+24     	; 0x30b6 <vfprintf+0x366>
    309e:	82 2f       	mov	r24, r18
    30a0:	86 78       	andi	r24, 0x86	; 134
    30a2:	51 f0       	breq	.+20     	; 0x30b8 <vfprintf+0x368>
    30a4:	21 fd       	sbrc	r18, 1
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <vfprintf+0x35c>
    30a8:	80 e2       	ldi	r24, 0x20	; 32
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <vfprintf+0x35e>
    30ac:	8b e2       	ldi	r24, 0x2B	; 43
    30ae:	27 fd       	sbrc	r18, 7
    30b0:	8d e2       	ldi	r24, 0x2D	; 45
    30b2:	b7 01       	movw	r22, r14
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	50 d0       	rcall	.+160    	; 0x3158 <fputc>
    30b8:	a5 14       	cp	r10, r5
    30ba:	30 f4       	brcc	.+12     	; 0x30c8 <vfprintf+0x378>
    30bc:	b7 01       	movw	r22, r14
    30be:	80 e3       	ldi	r24, 0x30	; 48
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	4a d0       	rcall	.+148    	; 0x3158 <fputc>
    30c4:	5a 94       	dec	r5
    30c6:	f8 cf       	rjmp	.-16     	; 0x30b8 <vfprintf+0x368>
    30c8:	aa 94       	dec	r10
    30ca:	f4 01       	movw	r30, r8
    30cc:	ea 0d       	add	r30, r10
    30ce:	f1 1d       	adc	r31, r1
    30d0:	80 81       	ld	r24, Z
    30d2:	b7 01       	movw	r22, r14
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	40 d0       	rcall	.+128    	; 0x3158 <fputc>
    30d8:	a1 10       	cpse	r10, r1
    30da:	f6 cf       	rjmp	.-20     	; 0x30c8 <vfprintf+0x378>
    30dc:	33 20       	and	r3, r3
    30de:	09 f4       	brne	.+2      	; 0x30e2 <vfprintf+0x392>
    30e0:	5d ce       	rjmp	.-838    	; 0x2d9c <vfprintf+0x4c>
    30e2:	b7 01       	movw	r22, r14
    30e4:	80 e2       	ldi	r24, 0x20	; 32
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	37 d0       	rcall	.+110    	; 0x3158 <fputc>
    30ea:	3a 94       	dec	r3
    30ec:	f7 cf       	rjmp	.-18     	; 0x30dc <vfprintf+0x38c>
    30ee:	f7 01       	movw	r30, r14
    30f0:	86 81       	ldd	r24, Z+6	; 0x06
    30f2:	97 81       	ldd	r25, Z+7	; 0x07
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <vfprintf+0x3aa>
    30f6:	8f ef       	ldi	r24, 0xFF	; 255
    30f8:	9f ef       	ldi	r25, 0xFF	; 255
    30fa:	2c 96       	adiw	r28, 0x0c	; 12
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	df 90       	pop	r13
    3114:	cf 90       	pop	r12
    3116:	bf 90       	pop	r11
    3118:	af 90       	pop	r10
    311a:	9f 90       	pop	r9
    311c:	8f 90       	pop	r8
    311e:	7f 90       	pop	r7
    3120:	6f 90       	pop	r6
    3122:	5f 90       	pop	r5
    3124:	4f 90       	pop	r4
    3126:	3f 90       	pop	r3
    3128:	2f 90       	pop	r2
    312a:	08 95       	ret

0000312c <strnlen_P>:
    312c:	fc 01       	movw	r30, r24
    312e:	05 90       	lpm	r0, Z+
    3130:	61 50       	subi	r22, 0x01	; 1
    3132:	70 40       	sbci	r23, 0x00	; 0
    3134:	01 10       	cpse	r0, r1
    3136:	d8 f7       	brcc	.-10     	; 0x312e <strnlen_P+0x2>
    3138:	80 95       	com	r24
    313a:	90 95       	com	r25
    313c:	8e 0f       	add	r24, r30
    313e:	9f 1f       	adc	r25, r31
    3140:	08 95       	ret

00003142 <strnlen>:
    3142:	fc 01       	movw	r30, r24
    3144:	61 50       	subi	r22, 0x01	; 1
    3146:	70 40       	sbci	r23, 0x00	; 0
    3148:	01 90       	ld	r0, Z+
    314a:	01 10       	cpse	r0, r1
    314c:	d8 f7       	brcc	.-10     	; 0x3144 <strnlen+0x2>
    314e:	80 95       	com	r24
    3150:	90 95       	com	r25
    3152:	8e 0f       	add	r24, r30
    3154:	9f 1f       	adc	r25, r31
    3156:	08 95       	ret

00003158 <fputc>:
    3158:	0f 93       	push	r16
    315a:	1f 93       	push	r17
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	18 2f       	mov	r17, r24
    3162:	09 2f       	mov	r16, r25
    3164:	eb 01       	movw	r28, r22
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	81 fd       	sbrc	r24, 1
    316a:	03 c0       	rjmp	.+6      	; 0x3172 <fputc+0x1a>
    316c:	8f ef       	ldi	r24, 0xFF	; 255
    316e:	9f ef       	ldi	r25, 0xFF	; 255
    3170:	20 c0       	rjmp	.+64     	; 0x31b2 <fputc+0x5a>
    3172:	82 ff       	sbrs	r24, 2
    3174:	10 c0       	rjmp	.+32     	; 0x3196 <fputc+0x3e>
    3176:	4e 81       	ldd	r20, Y+6	; 0x06
    3178:	5f 81       	ldd	r21, Y+7	; 0x07
    317a:	2c 81       	ldd	r18, Y+4	; 0x04
    317c:	3d 81       	ldd	r19, Y+5	; 0x05
    317e:	42 17       	cp	r20, r18
    3180:	53 07       	cpc	r21, r19
    3182:	7c f4       	brge	.+30     	; 0x31a2 <fputc+0x4a>
    3184:	e8 81       	ld	r30, Y
    3186:	f9 81       	ldd	r31, Y+1	; 0x01
    3188:	9f 01       	movw	r18, r30
    318a:	2f 5f       	subi	r18, 0xFF	; 255
    318c:	3f 4f       	sbci	r19, 0xFF	; 255
    318e:	39 83       	std	Y+1, r19	; 0x01
    3190:	28 83       	st	Y, r18
    3192:	10 83       	st	Z, r17
    3194:	06 c0       	rjmp	.+12     	; 0x31a2 <fputc+0x4a>
    3196:	e8 85       	ldd	r30, Y+8	; 0x08
    3198:	f9 85       	ldd	r31, Y+9	; 0x09
    319a:	81 2f       	mov	r24, r17
    319c:	19 95       	eicall
    319e:	89 2b       	or	r24, r25
    31a0:	29 f7       	brne	.-54     	; 0x316c <fputc+0x14>
    31a2:	2e 81       	ldd	r18, Y+6	; 0x06
    31a4:	3f 81       	ldd	r19, Y+7	; 0x07
    31a6:	2f 5f       	subi	r18, 0xFF	; 255
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	3f 83       	std	Y+7, r19	; 0x07
    31ac:	2e 83       	std	Y+6, r18	; 0x06
    31ae:	81 2f       	mov	r24, r17
    31b0:	90 2f       	mov	r25, r16
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

000031bc <__ultoa_invert>:
    31bc:	fa 01       	movw	r30, r20
    31be:	aa 27       	eor	r26, r26
    31c0:	28 30       	cpi	r18, 0x08	; 8
    31c2:	51 f1       	breq	.+84     	; 0x3218 <__ultoa_invert+0x5c>
    31c4:	20 31       	cpi	r18, 0x10	; 16
    31c6:	81 f1       	breq	.+96     	; 0x3228 <__ultoa_invert+0x6c>
    31c8:	e8 94       	clt
    31ca:	6f 93       	push	r22
    31cc:	6e 7f       	andi	r22, 0xFE	; 254
    31ce:	6e 5f       	subi	r22, 0xFE	; 254
    31d0:	7f 4f       	sbci	r23, 0xFF	; 255
    31d2:	8f 4f       	sbci	r24, 0xFF	; 255
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	af 4f       	sbci	r26, 0xFF	; 255
    31d8:	b1 e0       	ldi	r27, 0x01	; 1
    31da:	3e d0       	rcall	.+124    	; 0x3258 <__ultoa_invert+0x9c>
    31dc:	b4 e0       	ldi	r27, 0x04	; 4
    31de:	3c d0       	rcall	.+120    	; 0x3258 <__ultoa_invert+0x9c>
    31e0:	67 0f       	add	r22, r23
    31e2:	78 1f       	adc	r23, r24
    31e4:	89 1f       	adc	r24, r25
    31e6:	9a 1f       	adc	r25, r26
    31e8:	a1 1d       	adc	r26, r1
    31ea:	68 0f       	add	r22, r24
    31ec:	79 1f       	adc	r23, r25
    31ee:	8a 1f       	adc	r24, r26
    31f0:	91 1d       	adc	r25, r1
    31f2:	a1 1d       	adc	r26, r1
    31f4:	6a 0f       	add	r22, r26
    31f6:	71 1d       	adc	r23, r1
    31f8:	81 1d       	adc	r24, r1
    31fa:	91 1d       	adc	r25, r1
    31fc:	a1 1d       	adc	r26, r1
    31fe:	20 d0       	rcall	.+64     	; 0x3240 <__ultoa_invert+0x84>
    3200:	09 f4       	brne	.+2      	; 0x3204 <__ultoa_invert+0x48>
    3202:	68 94       	set
    3204:	3f 91       	pop	r19
    3206:	2a e0       	ldi	r18, 0x0A	; 10
    3208:	26 9f       	mul	r18, r22
    320a:	11 24       	eor	r1, r1
    320c:	30 19       	sub	r19, r0
    320e:	30 5d       	subi	r19, 0xD0	; 208
    3210:	31 93       	st	Z+, r19
    3212:	de f6       	brtc	.-74     	; 0x31ca <__ultoa_invert+0xe>
    3214:	cf 01       	movw	r24, r30
    3216:	08 95       	ret
    3218:	46 2f       	mov	r20, r22
    321a:	47 70       	andi	r20, 0x07	; 7
    321c:	40 5d       	subi	r20, 0xD0	; 208
    321e:	41 93       	st	Z+, r20
    3220:	b3 e0       	ldi	r27, 0x03	; 3
    3222:	0f d0       	rcall	.+30     	; 0x3242 <__ultoa_invert+0x86>
    3224:	c9 f7       	brne	.-14     	; 0x3218 <__ultoa_invert+0x5c>
    3226:	f6 cf       	rjmp	.-20     	; 0x3214 <__ultoa_invert+0x58>
    3228:	46 2f       	mov	r20, r22
    322a:	4f 70       	andi	r20, 0x0F	; 15
    322c:	40 5d       	subi	r20, 0xD0	; 208
    322e:	4a 33       	cpi	r20, 0x3A	; 58
    3230:	18 f0       	brcs	.+6      	; 0x3238 <__ultoa_invert+0x7c>
    3232:	49 5d       	subi	r20, 0xD9	; 217
    3234:	31 fd       	sbrc	r19, 1
    3236:	40 52       	subi	r20, 0x20	; 32
    3238:	41 93       	st	Z+, r20
    323a:	02 d0       	rcall	.+4      	; 0x3240 <__ultoa_invert+0x84>
    323c:	a9 f7       	brne	.-22     	; 0x3228 <__ultoa_invert+0x6c>
    323e:	ea cf       	rjmp	.-44     	; 0x3214 <__ultoa_invert+0x58>
    3240:	b4 e0       	ldi	r27, 0x04	; 4
    3242:	a6 95       	lsr	r26
    3244:	97 95       	ror	r25
    3246:	87 95       	ror	r24
    3248:	77 95       	ror	r23
    324a:	67 95       	ror	r22
    324c:	ba 95       	dec	r27
    324e:	c9 f7       	brne	.-14     	; 0x3242 <__ultoa_invert+0x86>
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	61 05       	cpc	r22, r1
    3254:	71 05       	cpc	r23, r1
    3256:	08 95       	ret
    3258:	9b 01       	movw	r18, r22
    325a:	ac 01       	movw	r20, r24
    325c:	0a 2e       	mov	r0, r26
    325e:	06 94       	lsr	r0
    3260:	57 95       	ror	r21
    3262:	47 95       	ror	r20
    3264:	37 95       	ror	r19
    3266:	27 95       	ror	r18
    3268:	ba 95       	dec	r27
    326a:	c9 f7       	brne	.-14     	; 0x325e <__ultoa_invert+0xa2>
    326c:	62 0f       	add	r22, r18
    326e:	73 1f       	adc	r23, r19
    3270:	84 1f       	adc	r24, r20
    3272:	95 1f       	adc	r25, r21
    3274:	a0 1d       	adc	r26, r0
    3276:	08 95       	ret

00003278 <_exit>:
    3278:	f8 94       	cli

0000327a <__stop_program>:
    327a:	ff cf       	rjmp	.-2      	; 0x327a <__stop_program>
