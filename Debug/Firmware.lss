
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800200  000032ac  00003340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b1b  008002f0  008002f0  00003430  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004f8  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000063a3  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001674  00000000  00000000  00009d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003859  00000000  00000000  0000b39b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001134  00000000  00000000  0000ebf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bc6  00000000  00000000  0000fd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000056f0  00000000  00000000  000118ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  00016fde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c5 c0       	rjmp	.+394    	; 0x18c <__ctors_end>
       2:	00 00       	nop
       4:	df c3       	rjmp	.+1982   	; 0x7c4 <__vector_1>
       6:	00 00       	nop
       8:	e2 c0       	rjmp	.+452    	; 0x1ce <__bad_interrupt>
       a:	00 00       	nop
       c:	e0 c0       	rjmp	.+448    	; 0x1ce <__bad_interrupt>
       e:	00 00       	nop
      10:	de c0       	rjmp	.+444    	; 0x1ce <__bad_interrupt>
      12:	00 00       	nop
      14:	dc c0       	rjmp	.+440    	; 0x1ce <__bad_interrupt>
      16:	00 00       	nop
      18:	da c0       	rjmp	.+436    	; 0x1ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d8 c0       	rjmp	.+432    	; 0x1ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	d6 c0       	rjmp	.+428    	; 0x1ce <__bad_interrupt>
      22:	00 00       	nop
      24:	d4 c0       	rjmp	.+424    	; 0x1ce <__bad_interrupt>
      26:	00 00       	nop
      28:	d2 c0       	rjmp	.+420    	; 0x1ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d0 c0       	rjmp	.+416    	; 0x1ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	ce c0       	rjmp	.+412    	; 0x1ce <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c3       	rjmp	.+2040   	; 0x82e <__vector_13>
      36:	00 00       	nop
      38:	ca c0       	rjmp	.+404    	; 0x1ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c8 c0       	rjmp	.+400    	; 0x1ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	c6 c0       	rjmp	.+396    	; 0x1ce <__bad_interrupt>
      42:	00 00       	nop
      44:	c4 c0       	rjmp	.+392    	; 0x1ce <__bad_interrupt>
      46:	00 00       	nop
      48:	c2 c0       	rjmp	.+388    	; 0x1ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c0 c0       	rjmp	.+384    	; 0x1ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	be c0       	rjmp	.+380    	; 0x1ce <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_21>
      58:	ba c0       	rjmp	.+372    	; 0x1ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b8 c0       	rjmp	.+368    	; 0x1ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__vector_24>
      64:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__vector_25>
      68:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__vector_26>
      6c:	b0 c0       	rjmp	.+352    	; 0x1ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	ae c0       	rjmp	.+348    	; 0x1ce <__bad_interrupt>
      72:	00 00       	nop
      74:	ac c0       	rjmp	.+344    	; 0x1ce <__bad_interrupt>
      76:	00 00       	nop
      78:	aa c0       	rjmp	.+340    	; 0x1ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a8 c0       	rjmp	.+336    	; 0x1ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	a6 c0       	rjmp	.+332    	; 0x1ce <__bad_interrupt>
      82:	00 00       	nop
      84:	a4 c0       	rjmp	.+328    	; 0x1ce <__bad_interrupt>
      86:	00 00       	nop
      88:	a2 c0       	rjmp	.+324    	; 0x1ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a0 c0       	rjmp	.+320    	; 0x1ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__vector_36>
      94:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_37>
      98:	9a c0       	rjmp	.+308    	; 0x1ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	98 c0       	rjmp	.+304    	; 0x1ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	96 c0       	rjmp	.+300    	; 0x1ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	94 c0       	rjmp	.+296    	; 0x1ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	92 c0       	rjmp	.+292    	; 0x1ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	90 c0       	rjmp	.+288    	; 0x1ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8e c0       	rjmp	.+284    	; 0x1ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8c c0       	rjmp	.+280    	; 0x1ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	8a c0       	rjmp	.+276    	; 0x1ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	88 c0       	rjmp	.+272    	; 0x1ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	86 c0       	rjmp	.+268    	; 0x1ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	84 c0       	rjmp	.+264    	; 0x1ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	82 c0       	rjmp	.+260    	; 0x1ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d0 0f       	add	r29, r16
      ce:	d8 0f       	add	r29, r24
      d0:	e0 0f       	add	r30, r16
      d2:	e8 0f       	add	r30, r24
      d4:	f0 0f       	add	r31, r16
      d6:	f4 0f       	add	r31, r20
      d8:	38 10       	cpse	r3, r8
      da:	88 10       	cpse	r8, r8
      dc:	88 10       	cpse	r8, r8
      de:	88 10       	cpse	r8, r8
      e0:	88 10       	cpse	r8, r8
      e2:	88 10       	cpse	r8, r8
      e4:	88 10       	cpse	r8, r8
      e6:	63 10       	cpse	r6, r3
      e8:	88 10       	cpse	r8, r8
      ea:	86 10       	cpse	r8, r6
      ec:	88 10       	cpse	r8, r8
      ee:	88 10       	cpse	r8, r8
      f0:	88 10       	cpse	r8, r8
      f2:	88 10       	cpse	r8, r8
      f4:	88 10       	cpse	r8, r8
      f6:	88 10       	cpse	r8, r8
      f8:	88 10       	cpse	r8, r8
      fa:	88 10       	cpse	r8, r8
      fc:	88 10       	cpse	r8, r8
      fe:	88 10       	cpse	r8, r8
     100:	88 10       	cpse	r8, r8
     102:	88 10       	cpse	r8, r8
     104:	88 10       	cpse	r8, r8
     106:	88 10       	cpse	r8, r8
     108:	88 10       	cpse	r8, r8
     10a:	88 10       	cpse	r8, r8
     10c:	cc 0f       	add	r28, r28
     10e:	d4 0f       	add	r29, r20
     110:	dc 0f       	add	r29, r28
     112:	e4 0f       	add	r30, r20
     114:	ec 0f       	add	r30, r28
     116:	36 10       	cpse	r3, r6

00000118 <prvIdleTask>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     118:	0f 2e       	mov	r0, r31
     11a:	fb ec       	ldi	r31, 0xCB	; 203
     11c:	ef 2e       	mov	r14, r31
     11e:	fd e0       	ldi	r31, 0x0D	; 13
     120:	ff 2e       	mov	r15, r31
     122:	f0 2d       	mov	r31, r0
     124:	c3 ea       	ldi	r28, 0xA3	; 163
     126:	dd e0       	ldi	r29, 0x0D	; 13
     128:	27 c0       	rjmp	.+78     	; 0x178 <prvIdleTask+0x60>
     12a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vTaskSuspendAll>
     12e:	18 81       	ld	r17, Y
     130:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <xTaskResumeAll>
     134:	11 23       	and	r17, r17
     136:	01 f1       	breq	.+64     	; 0x178 <prvIdleTask+0x60>
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	0f 92       	push	r0
     13e:	e0 91 a8 0d 	lds	r30, 0x0DA8
     142:	f0 91 a9 0d 	lds	r31, 0x0DA9
     146:	06 81       	ldd	r16, Z+6	; 0x06
     148:	17 81       	ldd	r17, Z+7	; 0x07
     14a:	c8 01       	movw	r24, r16
     14c:	02 96       	adiw	r24, 0x02	; 2
     14e:	4e d6       	rcall	.+3228   	; 0xdec <uxListRemove>
     150:	80 91 a1 0d 	lds	r24, 0x0DA1
     154:	81 50       	subi	r24, 0x01	; 1
     156:	80 93 a1 0d 	sts	0x0DA1, r24
     15a:	80 91 a2 0d 	lds	r24, 0x0DA2
     15e:	81 50       	subi	r24, 0x01	; 1
     160:	80 93 a2 0d 	sts	0x0DA2, r24
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	f8 01       	movw	r30, r16
     16a:	87 89       	ldd	r24, Z+23	; 0x17
     16c:	90 8d       	ldd	r25, Z+24	; 0x18
     16e:	0e 94 de 08 	call	0x11bc	; 0x11bc <vPortFree>
     172:	c8 01       	movw	r24, r16
     174:	0e 94 de 08 	call	0x11bc	; 0x11bc <vPortFree>
     178:	80 91 a2 0d 	lds	r24, 0x0DA2
     17c:	81 11       	cpse	r24, r1
     17e:	d5 cf       	rjmp	.-86     	; 0x12a <prvIdleTask+0x12>
     180:	f7 01       	movw	r30, r14
     182:	80 81       	ld	r24, Z
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	c0 f3       	brcs	.-16     	; 0x178 <prvIdleTask+0x60>
     188:	0f d7       	rcall	.+3614   	; 0xfa8 <vPortYield>
     18a:	f6 cf       	rjmp	.-20     	; 0x178 <prvIdleTask+0x60>

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	d1 e2       	ldi	r29, 0x21	; 33
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	0c bf       	out	0x3c, r16	; 60

0000019c <__do_copy_data>:
     19c:	12 e0       	ldi	r17, 0x02	; 2
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	ec ea       	ldi	r30, 0xAC	; 172
     1a4:	f2 e3       	ldi	r31, 0x32	; 50
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	0b bf       	out	0x3b, r16	; 59
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x14>
     1ac:	07 90       	elpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	a0 3f       	cpi	r26, 0xF0	; 240
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0x10>

000001b6 <__do_clear_bss>:
     1b6:	2e e0       	ldi	r18, 0x0E	; 14
     1b8:	a0 ef       	ldi	r26, 0xF0	; 240
     1ba:	b2 e0       	ldi	r27, 0x02	; 2
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	ab 30       	cpi	r26, 0x0B	; 11
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 05 11 	call	0x220a	; 0x220a <main>
     1ca:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <_exit>

000001ce <__bad_interrupt>:
     1ce:	18 cf       	rjmp	.-464    	; 0x0 <__vectors>

000001d0 <_bt_status_call_back>:
	uint8_t _sreg = SREG;
	cli();
	int16_t _tmp = _z_gyro;
	SREG = _sreg;
	return _tmp;
}
     1d0:	10 92 50 03 	sts	0x0350, r1
     1d4:	e0 91 4e 03 	lds	r30, 0x034E
     1d8:	f0 91 4f 03 	lds	r31, 0x034F
     1dc:	30 97       	sbiw	r30, 0x00	; 0
     1de:	09 f0       	breq	.+2      	; 0x1e2 <_bt_status_call_back+0x12>
     1e0:	19 95       	eicall
     1e2:	08 95       	ret

000001e4 <_bt_call_back>:
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	1f 92       	push	r1
     1ea:	1f 92       	push	r1
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	6a 83       	std	Y+2, r22	; 0x02
     1f2:	80 91 50 03 	lds	r24, 0x0350
     1f6:	88 23       	and	r24, r24
     1f8:	19 f0       	breq	.+6      	; 0x200 <_bt_call_back+0x1c>
     1fa:	86 2f       	mov	r24, r22
     1fc:	a0 d4       	rcall	.+2368   	; 0xb3e <dialog_byte_received>
     1fe:	13 c0       	rjmp	.+38     	; 0x226 <_bt_call_back+0x42>
     200:	80 91 4c 03 	lds	r24, 0x034C
     204:	90 91 4d 03 	lds	r25, 0x034D
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	69 f0       	breq	.+26     	; 0x226 <_bt_call_back+0x42>
     20c:	19 82       	std	Y+1, r1	; 0x01
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	ae 01       	movw	r20, r28
     212:	4f 5f       	subi	r20, 0xFF	; 255
     214:	5f 4f       	sbci	r21, 0xFF	; 255
     216:	be 01       	movw	r22, r28
     218:	6e 5f       	subi	r22, 0xFE	; 254
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <xQueueGenericSendFromISR>
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	81 11       	cpse	r24, r1
     224:	c1 d6       	rcall	.+3458   	; 0xfa8 <vPortYield>
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <_mpu9250_read_reg>:
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	d6 2e       	mov	r13, r22
     244:	ed b6       	in	r14, 0x3d	; 61
     246:	fe b6       	in	r15, 0x3e	; 62
     248:	26 2f       	mov	r18, r22
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	2f 5f       	subi	r18, 0xFF	; 255
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	4d b7       	in	r20, 0x3d	; 61
     252:	5e b7       	in	r21, 0x3e	; 62
     254:	42 1b       	sub	r20, r18
     256:	53 0b       	sbc	r21, r19
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	5e bf       	out	0x3e, r21	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	4d bf       	out	0x3d, r20	; 61
     262:	0d b7       	in	r16, 0x3d	; 61
     264:	1e b7       	in	r17, 0x3e	; 62
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
     26a:	98 01       	movw	r18, r16
     26c:	80 68       	ori	r24, 0x80	; 128
     26e:	ed b7       	in	r30, 0x3d	; 61
     270:	fe b7       	in	r31, 0x3e	; 62
     272:	81 83       	std	Z+1, r24	; 0x01
     274:	66 23       	and	r22, r22
     276:	41 f0       	breq	.+16     	; 0x288 <_mpu9250_read_reg+0x58>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	f9 01       	movw	r30, r18
     27c:	e8 0f       	add	r30, r24
     27e:	f1 1d       	adc	r31, r1
     280:	10 82       	st	Z, r1
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	d8 16       	cp	r13, r24
     286:	c8 f7       	brcc	.-14     	; 0x27a <_mpu9250_read_reg+0x4a>
     288:	88 e8       	ldi	r24, 0x88	; 136
     28a:	93 e0       	ldi	r25, 0x03	; 3
     28c:	3d d3       	rcall	.+1658   	; 0x908 <buffer_clear>
     28e:	41 e0       	ldi	r20, 0x01	; 1
     290:	4d 0d       	add	r20, r13
     292:	b8 01       	movw	r22, r16
     294:	80 91 b5 03 	lds	r24, 0x03B5
     298:	90 91 b6 03 	lds	r25, 0x03B6
     29c:	0e 94 c3 13 	call	0x2786	; 0x2786 <spi_send_string>
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	fe be       	out	0x3e, r15	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	ed be       	out	0x3d, r14	; 61
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	08 95       	ret

000002ba <_send_bytes_to_bt>:
     2ba:	46 2f       	mov	r20, r22
     2bc:	bc 01       	movw	r22, r24
     2be:	80 91 b3 03 	lds	r24, 0x03B3
     2c2:	90 91 b4 03 	lds	r25, 0x03B4
     2c6:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <serial_send_bytes>
     2ca:	08 95       	ret

000002cc <_mpu9250_call_back>:
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <_mpu9250_call_back+0x8>
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	80 91 f3 02 	lds	r24, 0x02F3
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	c1 f1       	breq	.+112    	; 0x352 <_mpu9250_call_back+0x86>
     2e2:	28 f4       	brcc	.+10     	; 0x2ee <_mpu9250_call_back+0x22>
     2e4:	88 23       	and	r24, r24
     2e6:	51 f0       	breq	.+20     	; 0x2fc <_mpu9250_call_back+0x30>
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	c9 f0       	breq	.+50     	; 0x31e <_mpu9250_call_back+0x52>
     2ec:	f1 c0       	rjmp	.+482    	; 0x4d0 <_mpu9250_call_back+0x204>
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <_mpu9250_call_back+0x28>
     2f2:	3f c0       	rjmp	.+126    	; 0x372 <_mpu9250_call_back+0xa6>
     2f4:	85 30       	cpi	r24, 0x05	; 5
     2f6:	09 f4       	brne	.+2      	; 0x2fa <_mpu9250_call_back+0x2e>
     2f8:	94 c0       	rjmp	.+296    	; 0x422 <_mpu9250_call_back+0x156>
     2fa:	ea c0       	rjmp	.+468    	; 0x4d0 <_mpu9250_call_back+0x204>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 f3 02 	sts	0x02F3, r24
     302:	8c e1       	ldi	r24, 0x1C	; 28
     304:	8b 83       	std	Y+3, r24	; 0x03
     306:	1c 82       	std	Y+4, r1	; 0x04
     308:	42 e0       	ldi	r20, 0x02	; 2
     30a:	be 01       	movw	r22, r28
     30c:	6d 5f       	subi	r22, 0xFD	; 253
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	80 91 b5 03 	lds	r24, 0x03B5
     314:	90 91 b6 03 	lds	r25, 0x03B6
     318:	0e 94 c3 13 	call	0x2786	; 0x2786 <spi_send_string>
     31c:	d9 c0       	rjmp	.+434    	; 0x4d0 <_mpu9250_call_back+0x204>
     31e:	88 e8       	ldi	r24, 0x88	; 136
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	ef d2       	rcall	.+1502   	; 0x902 <buffer_no_of_items>
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	09 f0       	breq	.+2      	; 0x32a <_mpu9250_call_back+0x5e>
     328:	d3 c0       	rjmp	.+422    	; 0x4d0 <_mpu9250_call_back+0x204>
     32a:	80 93 f3 02 	sts	0x02F3, r24
     32e:	88 e8       	ldi	r24, 0x88	; 136
     330:	93 e0       	ldi	r25, 0x03	; 3
     332:	ea d2       	rcall	.+1492   	; 0x908 <buffer_clear>
     334:	8b e1       	ldi	r24, 0x1B	; 27
     336:	8b 83       	std	Y+3, r24	; 0x03
     338:	88 e0       	ldi	r24, 0x08	; 8
     33a:	8c 83       	std	Y+4, r24	; 0x04
     33c:	42 e0       	ldi	r20, 0x02	; 2
     33e:	be 01       	movw	r22, r28
     340:	6d 5f       	subi	r22, 0xFD	; 253
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	80 91 b5 03 	lds	r24, 0x03B5
     348:	90 91 b6 03 	lds	r25, 0x03B6
     34c:	0e 94 c3 13 	call	0x2786	; 0x2786 <spi_send_string>
     350:	bf c0       	rjmp	.+382    	; 0x4d0 <_mpu9250_call_back+0x204>
     352:	88 e8       	ldi	r24, 0x88	; 136
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	d5 d2       	rcall	.+1450   	; 0x902 <buffer_no_of_items>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	09 f0       	breq	.+2      	; 0x35e <_mpu9250_call_back+0x92>
     35c:	b9 c0       	rjmp	.+370    	; 0x4d0 <_mpu9250_call_back+0x204>
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	80 93 f3 02 	sts	0x02F3, r24
     364:	88 e8       	ldi	r24, 0x88	; 136
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	cf d2       	rcall	.+1438   	; 0x908 <buffer_clear>
     36a:	66 e0       	ldi	r22, 0x06	; 6
     36c:	8b e3       	ldi	r24, 0x3B	; 59
     36e:	60 df       	rcall	.-320    	; 0x230 <_mpu9250_read_reg>
     370:	af c0       	rjmp	.+350    	; 0x4d0 <_mpu9250_call_back+0x204>
     372:	88 e8       	ldi	r24, 0x88	; 136
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	c5 d2       	rcall	.+1418   	; 0x902 <buffer_no_of_items>
     378:	87 30       	cpi	r24, 0x07	; 7
     37a:	09 f0       	breq	.+2      	; 0x37e <_mpu9250_call_back+0xb2>
     37c:	a9 c0       	rjmp	.+338    	; 0x4d0 <_mpu9250_call_back+0x204>
     37e:	1f b7       	in	r17, 0x3f	; 63
     380:	f8 94       	cli
     382:	be 01       	movw	r22, r28
     384:	6f 5f       	subi	r22, 0xFF	; 255
     386:	7f 4f       	sbci	r23, 0xFF	; 255
     388:	88 e8       	ldi	r24, 0x88	; 136
     38a:	93 e0       	ldi	r25, 0x03	; 3
     38c:	8a d2       	rcall	.+1300   	; 0x8a2 <buffer_get_item>
     38e:	be 01       	movw	r22, r28
     390:	6e 5f       	subi	r22, 0xFE	; 254
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	88 e8       	ldi	r24, 0x88	; 136
     396:	93 e0       	ldi	r25, 0x03	; 3
     398:	84 d2       	rcall	.+1288   	; 0x8a2 <buffer_get_item>
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	88 e8       	ldi	r24, 0x88	; 136
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	7e d2       	rcall	.+1276   	; 0x8a2 <buffer_get_item>
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	98 2f       	mov	r25, r24
     3ac:	88 27       	eor	r24, r24
     3ae:	29 81       	ldd	r18, Y+1	; 0x01
     3b0:	82 2b       	or	r24, r18
     3b2:	90 93 5c 03 	sts	0x035C, r25
     3b6:	80 93 5b 03 	sts	0x035B, r24
     3ba:	be 01       	movw	r22, r28
     3bc:	6e 5f       	subi	r22, 0xFE	; 254
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	88 e8       	ldi	r24, 0x88	; 136
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	6e d2       	rcall	.+1244   	; 0x8a2 <buffer_get_item>
     3c6:	be 01       	movw	r22, r28
     3c8:	6f 5f       	subi	r22, 0xFF	; 255
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	88 e8       	ldi	r24, 0x88	; 136
     3ce:	93 e0       	ldi	r25, 0x03	; 3
     3d0:	68 d2       	rcall	.+1232   	; 0x8a2 <buffer_get_item>
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	29 81       	ldd	r18, Y+1	; 0x01
     3dc:	82 2b       	or	r24, r18
     3de:	90 93 5a 03 	sts	0x035A, r25
     3e2:	80 93 59 03 	sts	0x0359, r24
     3e6:	be 01       	movw	r22, r28
     3e8:	6e 5f       	subi	r22, 0xFE	; 254
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	88 e8       	ldi	r24, 0x88	; 136
     3ee:	93 e0       	ldi	r25, 0x03	; 3
     3f0:	58 d2       	rcall	.+1200   	; 0x8a2 <buffer_get_item>
     3f2:	be 01       	movw	r22, r28
     3f4:	6f 5f       	subi	r22, 0xFF	; 255
     3f6:	7f 4f       	sbci	r23, 0xFF	; 255
     3f8:	88 e8       	ldi	r24, 0x88	; 136
     3fa:	93 e0       	ldi	r25, 0x03	; 3
     3fc:	52 d2       	rcall	.+1188   	; 0x8a2 <buffer_get_item>
     3fe:	1f bf       	out	0x3f, r17	; 63
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	98 2f       	mov	r25, r24
     406:	88 27       	eor	r24, r24
     408:	29 81       	ldd	r18, Y+1	; 0x01
     40a:	82 2b       	or	r24, r18
     40c:	90 93 58 03 	sts	0x0358, r25
     410:	80 93 57 03 	sts	0x0357, r24
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	80 93 f3 02 	sts	0x02F3, r24
     41a:	66 e0       	ldi	r22, 0x06	; 6
     41c:	83 e4       	ldi	r24, 0x43	; 67
     41e:	08 df       	rcall	.-496    	; 0x230 <_mpu9250_read_reg>
     420:	57 c0       	rjmp	.+174    	; 0x4d0 <_mpu9250_call_back+0x204>
     422:	88 e8       	ldi	r24, 0x88	; 136
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	6d d2       	rcall	.+1242   	; 0x902 <buffer_no_of_items>
     428:	87 30       	cpi	r24, 0x07	; 7
     42a:	09 f0       	breq	.+2      	; 0x42e <_mpu9250_call_back+0x162>
     42c:	51 c0       	rjmp	.+162    	; 0x4d0 <_mpu9250_call_back+0x204>
     42e:	1f b7       	in	r17, 0x3f	; 63
     430:	f8 94       	cli
     432:	be 01       	movw	r22, r28
     434:	6f 5f       	subi	r22, 0xFF	; 255
     436:	7f 4f       	sbci	r23, 0xFF	; 255
     438:	88 e8       	ldi	r24, 0x88	; 136
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	32 d2       	rcall	.+1124   	; 0x8a2 <buffer_get_item>
     43e:	be 01       	movw	r22, r28
     440:	6e 5f       	subi	r22, 0xFE	; 254
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	88 e8       	ldi	r24, 0x88	; 136
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	2c d2       	rcall	.+1112   	; 0x8a2 <buffer_get_item>
     44a:	be 01       	movw	r22, r28
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	88 e8       	ldi	r24, 0x88	; 136
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	26 d2       	rcall	.+1100   	; 0x8a2 <buffer_get_item>
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	98 2f       	mov	r25, r24
     45c:	88 27       	eor	r24, r24
     45e:	29 81       	ldd	r18, Y+1	; 0x01
     460:	82 2b       	or	r24, r18
     462:	90 93 56 03 	sts	0x0356, r25
     466:	80 93 55 03 	sts	0x0355, r24
     46a:	be 01       	movw	r22, r28
     46c:	6e 5f       	subi	r22, 0xFE	; 254
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	88 e8       	ldi	r24, 0x88	; 136
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	16 d2       	rcall	.+1068   	; 0x8a2 <buffer_get_item>
     476:	be 01       	movw	r22, r28
     478:	6f 5f       	subi	r22, 0xFF	; 255
     47a:	7f 4f       	sbci	r23, 0xFF	; 255
     47c:	88 e8       	ldi	r24, 0x88	; 136
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	10 d2       	rcall	.+1056   	; 0x8a2 <buffer_get_item>
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	98 2f       	mov	r25, r24
     488:	88 27       	eor	r24, r24
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	82 2b       	or	r24, r18
     48e:	90 93 54 03 	sts	0x0354, r25
     492:	80 93 53 03 	sts	0x0353, r24
     496:	be 01       	movw	r22, r28
     498:	6e 5f       	subi	r22, 0xFE	; 254
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	88 e8       	ldi	r24, 0x88	; 136
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	00 d2       	rcall	.+1024   	; 0x8a2 <buffer_get_item>
     4a2:	be 01       	movw	r22, r28
     4a4:	6f 5f       	subi	r22, 0xFF	; 255
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	88 e8       	ldi	r24, 0x88	; 136
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	fa d1       	rcall	.+1012   	; 0x8a2 <buffer_get_item>
     4ae:	1f bf       	out	0x3f, r17	; 63
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	98 2f       	mov	r25, r24
     4b6:	88 27       	eor	r24, r24
     4b8:	29 81       	ldd	r18, Y+1	; 0x01
     4ba:	82 2b       	or	r24, r18
     4bc:	90 93 52 03 	sts	0x0352, r25
     4c0:	80 93 51 03 	sts	0x0351, r24
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	80 93 f3 02 	sts	0x02F3, r24
     4ca:	66 e0       	ldi	r22, 0x06	; 6
     4cc:	8b e3       	ldi	r24, 0x3B	; 59
     4ce:	b0 de       	rcall	.-672    	; 0x230 <_mpu9250_read_reg>
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	08 95       	ret

000004e0 <set_horn>:
     4e0:	88 23       	and	r24, r24
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <set_horn+0x8>
     4e4:	43 9a       	sbi	0x08, 3	; 8
     4e6:	08 95       	ret
     4e8:	43 98       	cbi	0x08, 3	; 8
     4ea:	08 95       	ret

000004ec <set_head_light>:
     4ec:	88 23       	and	r24, r24
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <set_head_light+0x8>
     4f0:	42 9a       	sbi	0x08, 2	; 8
     4f2:	08 95       	ret
     4f4:	42 98       	cbi	0x08, 2	; 8
     4f6:	08 95       	ret

000004f8 <set_brake_light>:
     4f8:	88 23       	and	r24, r24
     4fa:	11 f0       	breq	.+4      	; 0x500 <set_brake_light+0x8>
     4fc:	41 9a       	sbi	0x08, 1	; 8
     4fe:	08 95       	ret
     500:	41 98       	cbi	0x08, 1	; 8
     502:	08 95       	ret

00000504 <set_motor_speed>:
     504:	85 36       	cpi	r24, 0x65	; 101
     506:	08 f0       	brcs	.+2      	; 0x50a <set_motor_speed+0x6>
     508:	84 e6       	ldi	r24, 0x64	; 100
     50a:	88 23       	and	r24, r24
     50c:	a9 f0       	breq	.+42     	; 0x538 <set_motor_speed+0x34>
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	af e7       	ldi	r26, 0x7F	; 127
     514:	bc e0       	ldi	r27, 0x0C	; 12
     516:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
     51a:	24 e6       	ldi	r18, 0x64	; 100
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__divmodsi4>
     526:	30 93 99 00 	sts	0x0099, r19
     52a:	20 93 98 00 	sts	0x0098, r18
     52e:	30 93 9b 00 	sts	0x009B, r19
     532:	20 93 9a 00 	sts	0x009A, r18
     536:	08 95       	ret
     538:	10 92 99 00 	sts	0x0099, r1
     53c:	10 92 98 00 	sts	0x0098, r1
     540:	10 92 9b 00 	sts	0x009B, r1
     544:	10 92 9a 00 	sts	0x009A, r1
     548:	08 95       	ret

0000054a <init_main_board>:
     54a:	8f 92       	push	r8
     54c:	9f 92       	push	r9
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	3b 9a       	sbi	0x07, 3	; 7
     55e:	3a 9a       	sbi	0x07, 2	; 7
     560:	39 9a       	sbi	0x07, 1	; 7
     562:	38 9a       	sbi	0x07, 0	; 7
     564:	e0 e9       	ldi	r30, 0x90	; 144
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	82 60       	ori	r24, 0x02	; 2
     56c:	80 83       	st	Z, r24
     56e:	a1 e9       	ldi	r26, 0x91	; 145
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	8c 91       	ld	r24, X
     574:	88 61       	ori	r24, 0x18	; 24
     576:	8c 93       	st	X, r24
     578:	8f e7       	ldi	r24, 0x7F	; 127
     57a:	9c e0       	ldi	r25, 0x0C	; 12
     57c:	90 93 99 00 	sts	0x0099, r25
     580:	80 93 98 00 	sts	0x0098, r24
     584:	20 81       	ld	r18, Z
     586:	20 6c       	ori	r18, 0xC0	; 192
     588:	20 83       	st	Z, r18
     58a:	6b 9a       	sbi	0x0d, 3	; 13
     58c:	90 93 9b 00 	sts	0x009B, r25
     590:	80 93 9a 00 	sts	0x009A, r24
     594:	20 81       	ld	r18, Z
     596:	20 63       	ori	r18, 0x30	; 48
     598:	20 83       	st	Z, r18
     59a:	6c 9a       	sbi	0x0d, 4	; 13
     59c:	90 93 97 00 	sts	0x0097, r25
     5a0:	80 93 96 00 	sts	0x0096, r24
     5a4:	8c 91       	ld	r24, X
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	8c 93       	st	X, r24
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	ab df       	rcall	.-170    	; 0x504 <set_motor_speed>
     5ae:	e1 e8       	ldi	r30, 0x81	; 129
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	86 60       	ori	r24, 0x06	; 6
     5b6:	80 83       	st	Z, r24
     5b8:	6a 98       	cbi	0x0d, 2	; 13
     5ba:	6d 9a       	sbi	0x0d, 5	; 13
     5bc:	75 98       	cbi	0x0e, 5	; 14
     5be:	08 9a       	sbi	0x01, 0	; 1
     5c0:	10 98       	cbi	0x02, 0	; 2
     5c2:	09 9a       	sbi	0x01, 1	; 1
     5c4:	11 98       	cbi	0x02, 1	; 2
     5c6:	0a 9a       	sbi	0x01, 2	; 1
     5c8:	12 98       	cbi	0x02, 2	; 2
     5ca:	e9 e6       	ldi	r30, 0x69	; 105
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	80 83       	st	Z, r24
     5d4:	e8 9a       	sbi	0x1d, 0	; 29
     5d6:	8f e1       	ldi	r24, 0x1F	; 31
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	5e d1       	rcall	.+700    	; 0x898 <buffer_init>
     5dc:	84 ef       	ldi	r24, 0xF4	; 244
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	5b d1       	rcall	.+694    	; 0x898 <buffer_init>
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f2 ef       	ldi	r31, 0xF2	; 242
     5e6:	8f 2e       	mov	r8, r31
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	9f 2e       	mov	r9, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f4 ef       	ldi	r31, 0xF4	; 244
     5f2:	af 2e       	mov	r10, r31
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	bf 2e       	mov	r11, r31
     5f8:	f0 2d       	mov	r31, r0
     5fa:	0f 2e       	mov	r0, r31
     5fc:	ff e1       	ldi	r31, 0x1F	; 31
     5fe:	cf 2e       	mov	r12, r31
     600:	f3 e0       	ldi	r31, 0x03	; 3
     602:	df 2e       	mov	r13, r31
     604:	f0 2d       	mov	r31, r0
     606:	e1 2c       	mov	r14, r1
     608:	00 e0       	ldi	r16, 0x00	; 0
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	40 e8       	ldi	r20, 0x80	; 128
     60e:	55 e2       	ldi	r21, 0x25	; 37
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 2a 11 	call	0x2254	; 0x2254 <serial_new_instance>
     61a:	90 93 b4 03 	sts	0x03B4, r25
     61e:	80 93 b3 03 	sts	0x03B3, r24
     622:	88 e8       	ldi	r24, 0x88	; 136
     624:	93 e0       	ldi	r25, 0x03	; 3
     626:	38 d1       	rcall	.+624    	; 0x898 <buffer_init>
     628:	8d e5       	ldi	r24, 0x5D	; 93
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	35 d1       	rcall	.+618    	; 0x898 <buffer_init>
     62e:	86 e6       	ldi	r24, 0x66	; 102
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0f 2e       	mov	r0, r31
     638:	fd e5       	ldi	r31, 0x5D	; 93
     63a:	8f 2e       	mov	r8, r31
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	9f 2e       	mov	r9, r31
     640:	f0 2d       	mov	r31, r0
     642:	0f 2e       	mov	r0, r31
     644:	f8 e8       	ldi	r31, 0x88	; 136
     646:	af 2e       	mov	r10, r31
     648:	f3 e0       	ldi	r31, 0x03	; 3
     64a:	bf 2e       	mov	r11, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	c1 2c       	mov	r12, r1
     650:	05 e2       	ldi	r16, 0x25	; 37
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	43 e0       	ldi	r20, 0x03	; 3
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	80 e1       	ldi	r24, 0x10	; 16
     65c:	0e 94 36 13 	call	0x266c	; 0x266c <spi_new_instance>
     660:	90 93 b6 03 	sts	0x03B6, r25
     664:	80 93 b5 03 	sts	0x03B5, r24
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	2e de       	rcall	.-932    	; 0x2cc <_mpu9250_call_back>
     670:	8b e9       	ldi	r24, 0x9B	; 155
     672:	80 93 b3 00 	sts	0x00B3, r24
     676:	e1 eb       	ldi	r30, 0xB1	; 177
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	82 60       	ori	r24, 0x02	; 2
     67e:	80 83       	st	Z, r24
     680:	a0 e7       	ldi	r26, 0x70	; 112
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	8c 91       	ld	r24, X
     686:	82 60       	ori	r24, 0x02	; 2
     688:	8c 93       	st	X, r24
     68a:	80 81       	ld	r24, Z
     68c:	85 60       	ori	r24, 0x05	; 5
     68e:	80 83       	st	Z, r24
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	08 95       	ret

000006a8 <set_brake>:
     6a8:	85 36       	cpi	r24, 0x65	; 101
     6aa:	08 f0       	brcs	.+2      	; 0x6ae <set_brake+0x6>
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	88 23       	and	r24, r24
     6b0:	a9 f0       	breq	.+42     	; 0x6dc <set_brake+0x34>
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	af e7       	ldi	r26, 0x7F	; 127
     6b8:	bc e0       	ldi	r27, 0x0C	; 12
     6ba:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
     6be:	24 e6       	ldi	r18, 0x64	; 100
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__divmodsi4>
     6ca:	30 93 99 00 	sts	0x0099, r19
     6ce:	20 93 98 00 	sts	0x0098, r18
     6d2:	10 92 9b 00 	sts	0x009B, r1
     6d6:	10 92 9a 00 	sts	0x009A, r1
     6da:	08 95       	ret
     6dc:	10 92 99 00 	sts	0x0099, r1
     6e0:	10 92 98 00 	sts	0x0098, r1
     6e4:	10 92 9b 00 	sts	0x009B, r1
     6e8:	10 92 9a 00 	sts	0x009A, r1
     6ec:	08 95       	ret

000006ee <get_raw_x_accel>:
     6ee:	2f b7       	in	r18, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	80 91 5b 03 	lds	r24, 0x035B
     6f6:	90 91 5c 03 	lds	r25, 0x035C
     6fa:	2f bf       	out	0x3f, r18	; 63
     6fc:	08 95       	ret

000006fe <get_raw_y_accel>:
     6fe:	2f b7       	in	r18, 0x3f	; 63
     700:	f8 94       	cli
     702:	80 91 59 03 	lds	r24, 0x0359
     706:	90 91 5a 03 	lds	r25, 0x035A
     70a:	2f bf       	out	0x3f, r18	; 63
     70c:	08 95       	ret

0000070e <get_raw_z_accel>:
     70e:	2f b7       	in	r18, 0x3f	; 63
     710:	f8 94       	cli
     712:	80 91 57 03 	lds	r24, 0x0357
     716:	90 91 58 03 	lds	r25, 0x0358
     71a:	2f bf       	out	0x3f, r18	; 63
     71c:	08 95       	ret

0000071e <get_raw_x_rotation>:
     71e:	2f b7       	in	r18, 0x3f	; 63
     720:	f8 94       	cli
     722:	80 91 55 03 	lds	r24, 0x0355
     726:	90 91 56 03 	lds	r25, 0x0356
     72a:	2f bf       	out	0x3f, r18	; 63
     72c:	08 95       	ret

0000072e <get_raw_y_rotation>:
     72e:	2f b7       	in	r18, 0x3f	; 63
     730:	f8 94       	cli
     732:	80 91 53 03 	lds	r24, 0x0353
     736:	90 91 54 03 	lds	r25, 0x0354
     73a:	2f bf       	out	0x3f, r18	; 63
     73c:	08 95       	ret

0000073e <get_tacho_count>:

// ----------------------------------------------------------------------------------------------------------------------
uint16_t get_tacho_count() {
	static uint16_t _last_reading = 0;
	
	uint16_t _tmp = TACHO_TCNT_reg;
     73e:	20 91 84 00 	lds	r18, 0x0084
     742:	30 91 85 00 	lds	r19, 0x0085
	uint16_t _tmp_last = _tmp;
	
	if (_tmp < _last_reading) {
     746:	80 91 f1 02 	lds	r24, 0x02F1
     74a:	90 91 f2 02 	lds	r25, 0x02F2
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	30 f4       	brcc	.+12     	; 0x760 <get_tacho_count+0x22>
		_tmp = (UINT16_MAX - _last_reading + _tmp);
     754:	a9 01       	movw	r20, r18
     756:	48 1b       	sub	r20, r24
     758:	59 0b       	sbc	r21, r25
     75a:	ca 01       	movw	r24, r20
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	04 c0       	rjmp	.+8      	; 0x768 <get_tacho_count+0x2a>
		} else {
		_tmp = _tmp-_last_reading;
     760:	a9 01       	movw	r20, r18
     762:	48 1b       	sub	r20, r24
     764:	59 0b       	sbc	r21, r25
     766:	ca 01       	movw	r24, r20
	}
	_last_reading = _tmp_last;
     768:	30 93 f2 02 	sts	0x02F2, r19
     76c:	20 93 f1 02 	sts	0x02F1, r18
	
	return _tmp;
}
     770:	08 95       	ret

00000772 <set_bt_reset>:

// ----------------------------------------------------------------------------------------------------------------------
void set_bt_reset(uint8_t state) {
	if (state) {
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <set_bt_reset+0x8>
		BT_RESET_PORT &= ~_BV(BT_RESET_PIN); // Set RESET low/active
     776:	10 98       	cbi	0x02, 0	; 2
     778:	08 95       	ret
		} else {
		BT_RESET_PORT |= _BV(BT_RESET_PIN); // Set RESET high/in-active
     77a:	10 9a       	sbi	0x02, 0	; 2
     77c:	08 95       	ret

0000077e <bt_send_bytes>:
static void _send_bytes_to_bt(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_bt_serial_instance, bytes, len);
}

// ----------------------------------------------------------------------------------------------------------------------
uint8_t bt_send_bytes(uint8_t *bytes, uint8_t len) {
     77e:	46 2f       	mov	r20, r22
	return serial_send_bytes(_bt_serial_instance, bytes, len);
     780:	bc 01       	movw	r22, r24
     782:	80 91 b3 03 	lds	r24, 0x03B3
     786:	90 91 b4 03 	lds	r25, 0x03B4
     78a:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <serial_send_bytes>
}
     78e:	08 95       	ret

00000790 <init_bt_module>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_bt_module(void (*bt_status_call_back)(uint8_t result), QueueHandle_t RX_Que) {
	_xRxedCharsQ = RX_Que;
     790:	70 93 4d 03 	sts	0x034D, r23
     794:	60 93 4c 03 	sts	0x034C, r22
	_app_bt_status_call_back = bt_status_call_back;
     798:	90 93 4f 03 	sts	0x034F, r25
     79c:	80 93 4e 03 	sts	0x034E, r24
	_bt_dialog_active = 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 50 03 	sts	0x0350, r24
	dialog_start(_dialog_bt_init_seq, _send_bytes_to_bt, _bt_status_call_back);
     7a6:	48 ee       	ldi	r20, 0xE8	; 232
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	6d e5       	ldi	r22, 0x5D	; 93
     7ac:	71 e0       	ldi	r23, 0x01	; 1
     7ae:	87 e0       	ldi	r24, 0x07	; 7
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	9d c1       	rjmp	.+826    	; 0xaee <dialog_start>
     7b4:	08 95       	ret

000007b6 <set_goal_line_semaphore>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void set_goal_line_semaphore(SemaphoreHandle_t goal_line_semaphore) {
	if (goal_line_semaphore) {
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <set_goal_line_semaphore+0xc>
		_goal_line_semaphore = goal_line_semaphore;
     7ba:	90 93 4b 03 	sts	0x034B, r25
     7be:	80 93 4a 03 	sts	0x034A, r24
     7c2:	08 95       	ret

000007c4 <__vector_1>:
	}
}

ISR(INT0_vect) {
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	0b b6       	in	r0, 0x3b	; 59
     7d0:	0f 92       	push	r0
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	static signed portBASE_TYPE _higher_priority_task_woken;
	if (_goal_line_semaphore) {
     7ea:	80 91 4a 03 	lds	r24, 0x034A
     7ee:	90 91 4b 03 	lds	r25, 0x034B
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	49 f0       	breq	.+18     	; 0x808 <__vector_1+0x44>
		_higher_priority_task_woken = pdFALSE;
     7f6:	10 92 f0 02 	sts	0x02F0, r1

		xSemaphoreGiveFromISR(_goal_line_semaphore, &_higher_priority_task_woken);
     7fa:	60 ef       	ldi	r22, 0xF0	; 240
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	22 d6       	rcall	.+3140   	; 0x1444 <xQueueGiveFromISR>
		
		if (_higher_priority_task_woken != pdFALSE) {
     800:	80 91 f0 02 	lds	r24, 0x02F0
     804:	81 11       	cpse	r24, r1
			portYIELD();
     806:	d0 d3       	rcall	.+1952   	; 0xfa8 <vPortYield>
		}
	}
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0b be       	out	0x3b, r0	; 59
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_13>:
	#elif ((DIALOG_HANDLER_PRESCALER == 1024))
	DIALOG_HANDLER_TCCRB_reg |= _BV(DIALOG_HANDLER_CS0_bit) | _BV(DIALOG_HANDLER_CS2_bit); ;    // Prescaler 1024 and Start Timer
	#endif
}

ISR(TIMER2_COMPA_vect) {
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	static uint8_t _count = 10;
	if (_bt_dialog_active) {
     854:	80 91 50 03 	lds	r24, 0x0350
     858:	88 23       	and	r24, r24
     85a:	59 f0       	breq	.+22     	; 0x872 <__vector_13+0x44>
		if (--_count == 0) {
     85c:	80 91 06 02 	lds	r24, 0x0206
     860:	81 50       	subi	r24, 0x01	; 1
     862:	19 f0       	breq	.+6      	; 0x86a <__vector_13+0x3c>
     864:	80 93 06 02 	sts	0x0206, r24
     868:	04 c0       	rjmp	.+8      	; 0x872 <__vector_13+0x44>
			_count = 10;
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	80 93 06 02 	sts	0x0206, r24
			dialog_tick();
     870:	4f d1       	rcall	.+670    	; 0xb10 <dialog_tick>
		}
	}
}
     872:	ff 91       	pop	r31
     874:	ef 91       	pop	r30
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	0f 90       	pop	r0
     88c:	0b be       	out	0x3b, r0	; 59
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <buffer_init>:
 @return true if buffer is empty.
 @param *buffer pointer to the buffer structure.
 ***********************************************/
uint8_t buffer_is_empty(buffer_struct_t *buffer) {
	return (buffer->no_in_buffer == 0);
}
     898:	fc 01       	movw	r30, r24
     89a:	10 a6       	std	Z+40, r1	; 0x28
     89c:	11 a6       	std	Z+41, r1	; 0x29
     89e:	12 a6       	std	Z+42, r1	; 0x2a
     8a0:	08 95       	ret

000008a2 <buffer_get_item>:
     8a2:	fc 01       	movw	r30, r24
     8a4:	82 a5       	ldd	r24, Z+42	; 0x2a
     8a6:	88 23       	and	r24, r24
     8a8:	a1 f0       	breq	.+40     	; 0x8d2 <buffer_get_item+0x30>
     8aa:	81 a5       	ldd	r24, Z+41	; 0x29
     8ac:	df 01       	movw	r26, r30
     8ae:	a8 0f       	add	r26, r24
     8b0:	b1 1d       	adc	r27, r1
     8b2:	8c 91       	ld	r24, X
     8b4:	db 01       	movw	r26, r22
     8b6:	8c 93       	st	X, r24
     8b8:	81 a5       	ldd	r24, Z+41	; 0x29
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	68 e2       	ldi	r22, 0x28	; 40
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 c3 14 	call	0x2986	; 0x2986 <__divmodhi4>
     8c6:	81 a7       	std	Z+41, r24	; 0x29
     8c8:	82 a5       	ldd	r24, Z+42	; 0x2a
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	82 a7       	std	Z+42, r24	; 0x2a
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret

000008d6 <buffer_put_item>:
     8d6:	fc 01       	movw	r30, r24
     8d8:	22 a5       	ldd	r18, Z+42	; 0x2a
     8da:	28 32       	cpi	r18, 0x28	; 40
     8dc:	80 f4       	brcc	.+32     	; 0x8fe <buffer_put_item+0x28>
     8de:	80 a5       	ldd	r24, Z+40	; 0x28
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	df 01       	movw	r26, r30
     8e4:	a8 0f       	add	r26, r24
     8e6:	b9 1f       	adc	r27, r25
     8e8:	6c 93       	st	X, r22
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	68 e2       	ldi	r22, 0x28	; 40
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	0e 94 c3 14 	call	0x2986	; 0x2986 <__divmodhi4>
     8f4:	80 a7       	std	Z+40, r24	; 0x28
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	22 a7       	std	Z+42, r18	; 0x2a
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	08 95       	ret

00000902 <buffer_no_of_items>:
 @return no of items in the buffer.
 @param *buffer pointer to the buffer structure.
 ***********************************************/
uint8_t buffer_no_of_items(buffer_struct_t *buffer) {
	return buffer->no_in_buffer;
}
     902:	fc 01       	movw	r30, r24
     904:	82 a5       	ldd	r24, Z+42	; 0x2a
     906:	08 95       	ret

00000908 <buffer_clear>:
 @ingroup buffer_function
 @brief Clear the content of the buffer.

 @param *buffer pointer to the buffer structure.
 **********************************************************************/
void buffer_clear(buffer_struct_t *buffer) {
     908:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     90a:	10 a6       	std	Z+40, r1	; 0x28
	buffer->out_i = 0;
     90c:	11 a6       	std	Z+41, r1	; 0x29
	buffer->no_in_buffer = 0;
     90e:	12 a6       	std	Z+42, r1	; 0x2a
     910:	08 95       	ret

00000912 <_dialog_prepare_for_next_byte>:

 When the function returns it has setup the state variable _dialog_await_state that will be used in dialog_char_received(), and the needed argument counters etc.
 */
static void _dialog_prepare_for_next_byte() {
  // esc char?
  if (*(_dialog_format.response_p) == '%') {
     912:	e0 91 c4 03 	lds	r30, 0x03C4
     916:	f0 91 c5 03 	lds	r31, 0x03C5
     91a:	80 81       	ld	r24, Z
     91c:	85 32       	cpi	r24, 0x25	; 37
     91e:	09 f0       	breq	.+2      	; 0x922 <_dialog_prepare_for_next_byte+0x10>
     920:	85 c0       	rjmp	.+266    	; 0xa2c <_dialog_prepare_for_next_byte+0x11a>
    _dialog_format.response_p++;
     922:	cf 01       	movw	r24, r30
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	90 93 c5 03 	sts	0x03C5, r25
     92a:	80 93 c4 03 	sts	0x03C4, r24

    if (*(_dialog_format.response_p) == '%') {
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	85 32       	cpi	r24, 0x25	; 37
     932:	19 f4       	brne	.+6      	; 0x93a <_dialog_prepare_for_next_byte+0x28>
      //Byte stuffing
      _dialog_await_state = NORMAL_STATE;
     934:	10 92 bb 03 	sts	0x03BB, r1
     938:	08 95       	ret
    } else if (*_dialog_format.response_p == '*') {
     93a:	8a 32       	cpi	r24, 0x2A	; 42
     93c:	e1 f5       	brne	.+120    	; 0x9b6 <_dialog_prepare_for_next_byte+0xa4>
      // Max args: %*nnB
      _dialog_format.response_p++;
     93e:	cf 01       	movw	r24, r30
     940:	02 96       	adiw	r24, 0x02	; 2
     942:	90 93 c5 03 	sts	0x03C5, r25
     946:	80 93 c4 03 	sts	0x03C4, r24
     94a:	33 96       	adiw	r30, 0x03	; 3
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	dc 01       	movw	r26, r24
     950:	01 96       	adiw	r24, 0x01	; 1
      // Find the arg. cnt
      _dialog_format.arg_cnt = 0;
      do {
        _dialog_format.arg_cnt *= 10;
     952:	22 0f       	add	r18, r18
     954:	32 2f       	mov	r19, r18
     956:	33 0f       	add	r19, r19
     958:	33 0f       	add	r19, r19
     95a:	23 0f       	add	r18, r19
        _dialog_format.arg_cnt += (*_dialog_format.response_p) - '0';
     95c:	20 53       	subi	r18, 0x30	; 48
     95e:	3c 91       	ld	r19, X
     960:	23 0f       	add	r18, r19
      } while (*(++_dialog_format.response_p) != 'B');
     962:	31 91       	ld	r19, Z+
     964:	32 34       	cpi	r19, 0x42	; 66
     966:	99 f7       	brne	.-26     	; 0x94e <_dialog_prepare_for_next_byte+0x3c>
     968:	20 93 c6 03 	sts	0x03C6, r18
      _dialog_format.response_p++;
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	b0 93 c5 03 	sts	0x03C5, r27
     972:	a0 93 c4 03 	sts	0x03C4, r26
      // Are argument buffers allocated?
      if (_dialog_format.arg_buffers != 0) {
     976:	80 91 c8 03 	lds	r24, 0x03C8
     97a:	90 91 c9 03 	lds	r25, 0x03C9
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	b1 f0       	breq	.+44     	; 0x9ae <_dialog_prepare_for_next_byte+0x9c>
        _dialog_format.arg_index++;
     982:	e7 ec       	ldi	r30, 0xC7	; 199
     984:	f3 e0       	ldi	r31, 0x03	; 3
     986:	20 81       	ld	r18, Z
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	20 83       	st	Z, r18
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len = 0;
     98c:	33 27       	eor	r19, r19
     98e:	27 fd       	sbrc	r18, 7
     990:	30 95       	com	r19
     992:	f9 01       	movw	r30, r18
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e2 0f       	add	r30, r18
     99a:	f3 1f       	adc	r31, r19
     99c:	e8 0f       	add	r30, r24
     99e:	f9 1f       	adc	r31, r25
     9a0:	12 82       	std	Z+2, r1	; 0x02
        _dialog_format.arg_buf_p = _dialog_format.arg_buffers[_dialog_format.arg_index].arg_buf;
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	90 93 cb 03 	sts	0x03CB, r25
     9aa:	80 93 ca 03 	sts	0x03CA, r24
      }
      _dialog_await_state = ARG_MAX_STATE;
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	80 93 bb 03 	sts	0x03BB, r24
     9b4:	08 95       	ret
     9b6:	80 91 c4 03 	lds	r24, 0x03C4
     9ba:	90 91 c5 03 	lds	r25, 0x03C5
     9be:	dc 01       	movw	r26, r24
     9c0:	11 96       	adiw	r26, 0x01	; 1
    _dialog_format.response_p++;

    if (*(_dialog_format.response_p) == '%') {
      //Byte stuffing
      _dialog_await_state = NORMAL_STATE;
    } else if (*_dialog_format.response_p == '*') {
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	01 96       	adiw	r24, 0x01	; 1
    } else {
      // args: %nnB
      // Find the arg. cnt
      _dialog_format.arg_cnt = 0;
      do {
        _dialog_format.arg_cnt *= 10;
     9c8:	22 0f       	add	r18, r18
     9ca:	32 2f       	mov	r19, r18
     9cc:	33 0f       	add	r19, r19
     9ce:	33 0f       	add	r19, r19
     9d0:	23 0f       	add	r18, r19
        _dialog_format.arg_cnt += (*_dialog_format.response_p) - '0';
     9d2:	20 53       	subi	r18, 0x30	; 48
     9d4:	30 81       	ld	r19, Z
     9d6:	23 0f       	add	r18, r19
      } while (*(++_dialog_format.response_p) != 'B');
     9d8:	3d 91       	ld	r19, X+
     9da:	32 34       	cpi	r19, 0x42	; 66
     9dc:	99 f7       	brne	.-26     	; 0x9c4 <_dialog_prepare_for_next_byte+0xb2>
     9de:	20 93 c6 03 	sts	0x03C6, r18
      _dialog_format.response_p++;
     9e2:	32 96       	adiw	r30, 0x02	; 2
     9e4:	f0 93 c5 03 	sts	0x03C5, r31
     9e8:	e0 93 c4 03 	sts	0x03C4, r30
      // Are argument buffers allocated?
      if (_dialog_format.arg_buffers != 0) {
     9ec:	80 91 c8 03 	lds	r24, 0x03C8
     9f0:	90 91 c9 03 	lds	r25, 0x03C9
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	b1 f0       	breq	.+44     	; 0xa24 <_dialog_prepare_for_next_byte+0x112>
        _dialog_format.arg_index++;
     9f8:	a7 ec       	ldi	r26, 0xC7	; 199
     9fa:	b3 e0       	ldi	r27, 0x03	; 3
     9fc:	ec 91       	ld	r30, X
     9fe:	ef 5f       	subi	r30, 0xFF	; 255
     a00:	ec 93       	st	X, r30
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len = 0;
     a02:	ff 27       	eor	r31, r31
     a04:	e7 fd       	sbrc	r30, 7
     a06:	f0 95       	com	r31
     a08:	9f 01       	movw	r18, r30
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	e2 0f       	add	r30, r18
     a10:	f3 1f       	adc	r31, r19
     a12:	e8 0f       	add	r30, r24
     a14:	f9 1f       	adc	r31, r25
     a16:	12 82       	std	Z+2, r1	; 0x02
        _dialog_format.arg_buf_p = _dialog_format.arg_buffers[_dialog_format.arg_index].arg_buf;
     a18:	80 81       	ld	r24, Z
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	90 93 cb 03 	sts	0x03CB, r25
     a20:	80 93 ca 03 	sts	0x03CA, r24
      }
      _dialog_await_state = ARG_STATE;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 bb 03 	sts	0x03BB, r24
     a2a:	08 95       	ret
    }
  } else {
    _dialog_await_state = NORMAL_STATE;
     a2c:	10 92 bb 03 	sts	0x03BB, r1
     a30:	08 95       	ret

00000a32 <_dialog_goto_state>:
 IF the new state is either DIALOG_OK_STOP or DIALOG_ERROR_STOP then the call_back function will be called.
 ELSE the new State will be setup.

 @param[in] new_state the new state to goto.
 */
static void _dialog_goto_state(const uint8_t new_state) {
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
  _dialog_second_counter = 0;
     a36:	10 92 bf 03 	sts	0x03BF, r1
  _dialog_current_state = new_state;
     a3a:	80 93 be 03 	sts	0x03BE, r24
  if (new_state == DIALOG_ERROR_STOP || new_state == DIALOG_OK_STOP) {
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	98 0f       	add	r25, r24
     a42:	92 30       	cpi	r25, 0x02	; 2
     a44:	30 f4       	brcc	.+12     	; 0xa52 <_dialog_goto_state+0x20>
    (*_dialog_pf_call_back)(new_state);
     a46:	e0 91 b7 03 	lds	r30, 0x03B7
     a4a:	f0 91 b8 03 	lds	r31, 0x03B8
     a4e:	19 95       	eicall
     a50:	4b c0       	rjmp	.+150    	; 0xae8 <_dialog_goto_state+0xb6>
  } else {
    // Send command if any
    if (_dialog_seq[new_state].command_length != 0) {
     a52:	9b e0       	ldi	r25, 0x0B	; 11
     a54:	89 9f       	mul	r24, r25
     a56:	e0 01       	movw	r28, r0
     a58:	11 24       	eor	r1, r1
     a5a:	a0 91 bc 03 	lds	r26, 0x03BC
     a5e:	b0 91 bd 03 	lds	r27, 0x03BD
     a62:	ac 0f       	add	r26, r28
     a64:	bd 1f       	adc	r27, r29
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	6c 91       	ld	r22, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
     a6c:	66 23       	and	r22, r22
     a6e:	39 f0       	breq	.+14     	; 0xa7e <_dialog_goto_state+0x4c>
      (*_dialog_pf_send)(_dialog_seq[new_state].command,
     a70:	e0 91 b9 03 	lds	r30, 0x03B9
     a74:	f0 91 ba 03 	lds	r31, 0x03BA
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	19 95       	eicall
      _dialog_seq[new_state].command_length);
    }

    // Any response to wait for?
    if (_dialog_seq[new_state].responce_format_length > 0) {
     a7e:	80 91 bc 03 	lds	r24, 0x03BC
     a82:	90 91 bd 03 	lds	r25, 0x03BD
     a86:	c8 0f       	add	r28, r24
     a88:	d9 1f       	adc	r29, r25
     a8a:	2d 81       	ldd	r18, Y+5	; 0x05
     a8c:	22 23       	and	r18, r18
     a8e:	51 f1       	breq	.+84     	; 0xae4 <_dialog_goto_state+0xb2>
 @param[in] len
 @param[out] *buf
 */
static void _dialog_await(uint8_t new_state) {
  _dialog_format.response_p = _dialog_format.response =
                  _dialog_seq[new_state].responce_format;
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
 @param[in] response_format to be waited for..
 @param[in] len
 @param[out] *buf
 */
static void _dialog_await(uint8_t new_state) {
  _dialog_format.response_p = _dialog_format.response =
     a94:	90 93 c1 03 	sts	0x03C1, r25
     a98:	80 93 c0 03 	sts	0x03C0, r24
     a9c:	90 93 c5 03 	sts	0x03C5, r25
     aa0:	80 93 c4 03 	sts	0x03C4, r24
                  _dialog_seq[new_state].responce_format;
  _dialog_format.arg_buffers = _dialog_seq[new_state].arg_buffers;
     aa4:	e9 85       	ldd	r30, Y+9	; 0x09
     aa6:	fa 85       	ldd	r31, Y+10	; 0x0a
     aa8:	f0 93 c9 03 	sts	0x03C9, r31
     aac:	e0 93 c8 03 	sts	0x03C8, r30
  _dialog_format.arg_index = -1;
     ab0:	3f ef       	ldi	r19, 0xFF	; 255
     ab2:	30 93 c7 03 	sts	0x03C7, r19
  // Are any arg_buffers specified?
  if (_dialog_format.arg_buffers) {
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	31 f0       	breq	.+12     	; 0xac6 <_dialog_goto_state+0x94>
    _dialog_format.arg_buf_p = _dialog_seq[new_state].arg_buffers[0].arg_buf;
     aba:	40 81       	ld	r20, Z
     abc:	51 81       	ldd	r21, Z+1	; 0x01
     abe:	50 93 cb 03 	sts	0x03CB, r21
     ac2:	40 93 ca 03 	sts	0x03CA, r20
  }
  _dialog_format.last = _dialog_seq[new_state].responce_format
                  + _dialog_seq[new_state].responce_format_length - 1;
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	31 09       	sbc	r19, r1
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
  _dialog_format.arg_index = -1;
  // Are any arg_buffers specified?
  if (_dialog_format.arg_buffers) {
    _dialog_format.arg_buf_p = _dialog_seq[new_state].arg_buffers[0].arg_buf;
  }
  _dialog_format.last = _dialog_seq[new_state].responce_format
     ad0:	90 93 c3 03 	sts	0x03C3, r25
     ad4:	80 93 c2 03 	sts	0x03C2, r24
                  + _dialog_seq[new_state].responce_format_length - 1;
  _dialog_prepare_for_next_byte();
     ad8:	1c df       	rcall	.-456    	; 0x912 <_dialog_prepare_for_next_byte>
    }

    // Any response to wait for?
    if (_dialog_seq[new_state].responce_format_length > 0) {
      _dialog_await(new_state);
      _dialog_second_counter = _dialog_seq[new_state].max_response_time
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	80 93 bf 03 	sts	0x03BF, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <_dialog_goto_state+0xb6>
                      + 1; // add one because of 1 sec jitter in second timer
    } else {
      _dialog_goto_state(_dialog_seq[new_state].ok_state);
     ae4:	8f 81       	ldd	r24, Y+7	; 0x07
     ae6:	a5 df       	rcall	.-182    	; 0xa32 <_dialog_goto_state>
    }
  }
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <dialog_start>:
 @endcode
 */
void dialog_start(dialog_seq_t *p_seq,
		void (*pf_send)(uint8_t *command, uint8_t command_length),
		void (*pf_call_back)(uint8_t result)) {
  _dialog_seq = p_seq;
     aee:	90 93 bd 03 	sts	0x03BD, r25
     af2:	80 93 bc 03 	sts	0x03BC, r24
  _dialog_pf_send = pf_send;
     af6:	70 93 ba 03 	sts	0x03BA, r23
     afa:	60 93 b9 03 	sts	0x03B9, r22
  _dialog_pf_call_back = pf_call_back;
     afe:	50 93 b8 03 	sts	0x03B8, r21
     b02:	40 93 b7 03 	sts	0x03B7, r20
  _dialog_current_state = 0;
     b06:	10 92 be 03 	sts	0x03BE, r1
  _dialog_goto_state(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	92 cf       	rjmp	.-220    	; 0xa32 <_dialog_goto_state>
     b0e:	08 95       	ret

00000b10 <dialog_tick>:
 @brief Housekeeping function that must be called every second when a dialog is active.

 If the maximum wait time is exceeded the the dialog will change to error state.
 */
void dialog_tick() {
  if (_dialog_second_counter) {
     b10:	80 91 bf 03 	lds	r24, 0x03BF
     b14:	88 23       	and	r24, r24
     b16:	91 f0       	breq	.+36     	; 0xb3c <dialog_tick+0x2c>
    if (--_dialog_second_counter == 0) {
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	80 93 bf 03 	sts	0x03BF, r24
     b1e:	81 11       	cpse	r24, r1
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <dialog_tick+0x2c>
      _dialog_goto_state(_dialog_seq[_dialog_current_state].error_state);
     b22:	80 91 be 03 	lds	r24, 0x03BE
     b26:	e0 91 bc 03 	lds	r30, 0x03BC
     b2a:	f0 91 bd 03 	lds	r31, 0x03BD
     b2e:	9b e0       	ldi	r25, 0x0B	; 11
     b30:	89 9f       	mul	r24, r25
     b32:	e0 0d       	add	r30, r0
     b34:	f1 1d       	adc	r31, r1
     b36:	11 24       	eor	r1, r1
     b38:	80 85       	ldd	r24, Z+8	; 0x08
     b3a:	7b cf       	rjmp	.-266    	; 0xa32 <_dialog_goto_state>
     b3c:	08 95       	ret

00000b3e <dialog_byte_received>:
If there are specified a pointer to an argument buffer in the current state of the dialog_seq, the received argument bytes will be stored in this buffer, else the argument values will be thrown away.

 When/If the expected response string is received the dialog state is changed to the current dialog states OK state.
 @param[in] byte received from device we are communication with.
 */
void dialog_byte_received(const uint8_t byte) {
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	98 2e       	mov	r9, r24
  uint8_t _retry;
  
  switch (_dialog_await_state) {
     b5c:	80 91 bb 03 	lds	r24, 0x03BB
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <dialog_byte_received+0x28>
     b64:	42 c0       	rjmp	.+132    	; 0xbea <dialog_byte_received+0xac>
     b66:	20 f0       	brcs	.+8      	; 0xb70 <dialog_byte_received+0x32>
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	09 f4       	brne	.+2      	; 0xb6e <dialog_byte_received+0x30>
     b6c:	70 c0       	rjmp	.+224    	; 0xc4e <dialog_byte_received+0x110>
     b6e:	af c0       	rjmp	.+350    	; 0xcce <dialog_byte_received+0x190>
     b70:	81 2c       	mov	r8, r1
  case NORMAL_STATE:
    _retry = 0;
    do {
      if (*_dialog_format.response_p++ != byte) {
     b72:	c4 ec       	ldi	r28, 0xC4	; 196
     b74:	d3 e0       	ldi	r29, 0x03	; 3
        // Problem: not the expected byte
        // Lets try from the beginning of the format
        _dialog_format.response_p = _dialog_format.response;
     b76:	0f 2e       	mov	r0, r31
     b78:	f0 ec       	ldi	r31, 0xC0	; 192
     b7a:	cf 2e       	mov	r12, r31
     b7c:	f3 e0       	ldi	r31, 0x03	; 3
     b7e:	df 2e       	mov	r13, r31
     b80:	f0 2d       	mov	r31, r0

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
     b82:	0f 2e       	mov	r0, r31
     b84:	f7 ec       	ldi	r31, 0xC7	; 199
     b86:	ef 2e       	mov	r14, r31
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	ff 2e       	mov	r15, r31
     b8c:	f0 2d       	mov	r31, r0
        if (_dialog_format.arg_buffers != 0) {
     b8e:	08 ec       	ldi	r16, 0xC8	; 200
     b90:	13 e0       	ldi	r17, 0x03	; 3
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
        }

        if (!_retry) {
     b92:	77 24       	eor	r7, r7
     b94:	73 94       	inc	r7
     b96:	61 2c       	mov	r6, r1
        _dialog_format.response_p = _dialog_format.response;

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
        if (_dialog_format.arg_buffers != 0) {
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
     b98:	0f 2e       	mov	r0, r31
     b9a:	fa ec       	ldi	r31, 0xCA	; 202
     b9c:	af 2e       	mov	r10, r31
     b9e:	f3 e0       	ldi	r31, 0x03	; 3
     ba0:	bf 2e       	mov	r11, r31
     ba2:	f0 2d       	mov	r31, r0
  
  switch (_dialog_await_state) {
  case NORMAL_STATE:
    _retry = 0;
    do {
      if (*_dialog_format.response_p++ != byte) {
     ba4:	e8 81       	ld	r30, Y
     ba6:	f9 81       	ldd	r31, Y+1	; 0x01
     ba8:	9f 01       	movw	r18, r30
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	39 83       	std	Y+1, r19	; 0x01
     bb0:	28 83       	st	Y, r18
     bb2:	80 81       	ld	r24, Z
     bb4:	89 15       	cp	r24, r9
     bb6:	a9 f0       	breq	.+42     	; 0xbe2 <dialog_byte_received+0xa4>
        // Problem: not the expected byte
        // Lets try from the beginning of the format
        _dialog_format.response_p = _dialog_format.response;
     bb8:	d6 01       	movw	r26, r12
     bba:	8d 91       	ld	r24, X+
     bbc:	9c 91       	ld	r25, X
     bbe:	99 83       	std	Y+1, r25	; 0x01
     bc0:	88 83       	st	Y, r24

        // Reset all things about argument capturing
        _dialog_format.arg_index=0;
     bc2:	f7 01       	movw	r30, r14
     bc4:	10 82       	st	Z, r1
        if (_dialog_format.arg_buffers != 0) {
     bc6:	d8 01       	movw	r26, r16
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <dialog_byte_received+0x9c>
          _dialog_format.arg_buf_p = _dialog_format.arg_buffers[0].arg_buf;
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	f5 01       	movw	r30, r10
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	80 83       	st	Z, r24
        }

        if (!_retry) {
     bda:	87 2d       	mov	r24, r7
     bdc:	81 10       	cpse	r8, r1
     bde:	86 2d       	mov	r24, r6
          _retry = 1;
     be0:	88 2e       	mov	r8, r24
        } else {
          _retry = 0;
        }
      }
      _dialog_prepare_for_next_byte();
     be2:	97 de       	rcall	.-722    	; 0x912 <_dialog_prepare_for_next_byte>
    } while (_retry);
     be4:	81 10       	cpse	r8, r1
     be6:	de cf       	rjmp	.-68     	; 0xba4 <dialog_byte_received+0x66>
     be8:	72 c0       	rjmp	.+228    	; 0xcce <dialog_byte_received+0x190>
    break;

  case ARG_STATE:
    // Test if buffer is specified
    if (_dialog_format.arg_buffers != 0) {
     bea:	20 91 c8 03 	lds	r18, 0x03C8
     bee:	30 91 c9 03 	lds	r19, 0x03C9
     bf2:	21 15       	cp	r18, r1
     bf4:	31 05       	cpc	r19, r1
     bf6:	11 f1       	breq	.+68     	; 0xc3c <dialog_byte_received+0xfe>
      *_dialog_format.arg_buf_p++ = byte;
     bf8:	aa ec       	ldi	r26, 0xCA	; 202
     bfa:	b3 e0       	ldi	r27, 0x03	; 3
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	cf 01       	movw	r24, r30
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	8d 93       	st	X+, r24
     c08:	9c 93       	st	X, r25
     c0a:	90 82       	st	Z, r9
      // Update length of received argument in arg_buffers
      _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len++;
     c0c:	e0 91 c7 03 	lds	r30, 0x03C7
     c10:	ff 27       	eor	r31, r31
     c12:	e7 fd       	sbrc	r30, 7
     c14:	f0 95       	com	r31
     c16:	cf 01       	movw	r24, r30
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	e8 0f       	add	r30, r24
     c1e:	f9 1f       	adc	r31, r25
     c20:	e2 0f       	add	r30, r18
     c22:	f3 1f       	adc	r31, r19
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	82 83       	std	Z+2, r24	; 0x02

      // have we got all the bytes in the this argument
      if (--(_dialog_format.arg_cnt) == 0) {
     c2a:	e6 ec       	ldi	r30, 0xC6	; 198
     c2c:	f3 e0       	ldi	r31, 0x03	; 3
     c2e:	80 81       	ld	r24, Z
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	80 83       	st	Z, r24
     c34:	81 11       	cpse	r24, r1
     c36:	4b c0       	rjmp	.+150    	; 0xcce <dialog_byte_received+0x190>
        _dialog_prepare_for_next_byte();
     c38:	6c de       	rcall	.-808    	; 0x912 <_dialog_prepare_for_next_byte>
     c3a:	49 c0       	rjmp	.+146    	; 0xcce <dialog_byte_received+0x190>
      }
    } else if (--(_dialog_format.arg_cnt) == 0) {
     c3c:	e6 ec       	ldi	r30, 0xC6	; 198
     c3e:	f3 e0       	ldi	r31, 0x03	; 3
     c40:	80 81       	ld	r24, Z
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	80 83       	st	Z, r24
     c46:	81 11       	cpse	r24, r1
     c48:	42 c0       	rjmp	.+132    	; 0xcce <dialog_byte_received+0x190>
        _dialog_prepare_for_next_byte();
     c4a:	63 de       	rcall	.-826    	; 0x912 <_dialog_prepare_for_next_byte>
     c4c:	40 c0       	rjmp	.+128    	; 0xcce <dialog_byte_received+0x190>
    }
    break;

  case ARG_MAX_STATE:
    // Test if we still are receiving argument bytes
    if (byte != *_dialog_format.response_p) {
     c4e:	e0 91 c4 03 	lds	r30, 0x03C4
     c52:	f0 91 c5 03 	lds	r31, 0x03C5
     c56:	80 81       	ld	r24, Z
     c58:	89 15       	cp	r24, r9
     c5a:	51 f1       	breq	.+84     	; 0xcb0 <dialog_byte_received+0x172>
      // Test if buffer is specified
      if (_dialog_format.arg_buffers != 0) {
     c5c:	80 91 c8 03 	lds	r24, 0x03C8
     c60:	90 91 c9 03 	lds	r25, 0x03C9
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	09 f4       	brne	.+2      	; 0xc6a <dialog_byte_received+0x12c>
     c68:	4e c0       	rjmp	.+156    	; 0xd06 <dialog_byte_received+0x1c8>
        *_dialog_format.arg_buf_p++ = byte;
     c6a:	aa ec       	ldi	r26, 0xCA	; 202
     c6c:	b3 e0       	ldi	r27, 0x03	; 3
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	9f 01       	movw	r18, r30
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	2d 93       	st	X+, r18
     c7c:	3c 93       	st	X, r19
     c7e:	90 82       	st	Z, r9
        // Update length of received argument in arg_buffers
        _dialog_format.arg_buffers[_dialog_format.arg_index].arg_len++;
     c80:	20 91 c7 03 	lds	r18, 0x03C7
     c84:	33 27       	eor	r19, r19
     c86:	27 fd       	sbrc	r18, 7
     c88:	30 95       	com	r19
     c8a:	f9 01       	movw	r30, r18
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	82 83       	std	Z+2, r24	; 0x02

        // Have we received the maximum number of bytes in argument?
        if (--(_dialog_format.arg_cnt) == 0) {
     c9e:	e6 ec       	ldi	r30, 0xC6	; 198
     ca0:	f3 e0       	ldi	r31, 0x03	; 3
     ca2:	80 81       	ld	r24, Z
     ca4:	81 50       	subi	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
     ca8:	81 11       	cpse	r24, r1
     caa:	11 c0       	rjmp	.+34     	; 0xcce <dialog_byte_received+0x190>
          _dialog_prepare_for_next_byte();
     cac:	32 de       	rcall	.-924    	; 0x912 <_dialog_prepare_for_next_byte>
     cae:	0f c0       	rjmp	.+30     	; 0xcce <dialog_byte_received+0x190>
        }
      }
    } else if (--(_dialog_format.arg_cnt) == 0) { // or have we received the maximum allowed no of bytes in the argument?
     cb0:	a6 ec       	ldi	r26, 0xC6	; 198
     cb2:	b3 e0       	ldi	r27, 0x03	; 3
     cb4:	8c 91       	ld	r24, X
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	8c 93       	st	X, r24
     cba:	81 11       	cpse	r24, r1
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <dialog_byte_received+0x184>
      _dialog_prepare_for_next_byte();
     cbe:	29 de       	rcall	.-942    	; 0x912 <_dialog_prepare_for_next_byte>
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <dialog_byte_received+0x190>
    } else {
      // Next byte in normal response is received
      _dialog_format.response_p++;
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	f0 93 c5 03 	sts	0x03C5, r31
     cc8:	e0 93 c4 03 	sts	0x03C4, r30
      _dialog_prepare_for_next_byte();
     ccc:	22 de       	rcall	.-956    	; 0x912 <_dialog_prepare_for_next_byte>
  default:
    break;
  }

  // Test if we are done - have received all bytes in this state of the dialog_seq
  if ((_dialog_await_state == NORMAL_STATE) && (_dialog_format.response_p > _dialog_format.last)) {
     cce:	80 91 bb 03 	lds	r24, 0x03BB
     cd2:	81 11       	cpse	r24, r1
     cd4:	18 c0       	rjmp	.+48     	; 0xd06 <dialog_byte_received+0x1c8>
     cd6:	20 91 c4 03 	lds	r18, 0x03C4
     cda:	30 91 c5 03 	lds	r19, 0x03C5
     cde:	80 91 c2 03 	lds	r24, 0x03C2
     ce2:	90 91 c3 03 	lds	r25, 0x03C3
     ce6:	82 17       	cp	r24, r18
     ce8:	93 07       	cpc	r25, r19
     cea:	68 f4       	brcc	.+26     	; 0xd06 <dialog_byte_received+0x1c8>
    // OK - goto OK state
    _dialog_goto_state(_dialog_seq[_dialog_current_state].ok_state);
     cec:	80 91 be 03 	lds	r24, 0x03BE
     cf0:	e0 91 bc 03 	lds	r30, 0x03BC
     cf4:	f0 91 bd 03 	lds	r31, 0x03BD
     cf8:	9b e0       	ldi	r25, 0x0B	; 11
     cfa:	89 9f       	mul	r24, r25
     cfc:	e0 0d       	add	r30, r0
     cfe:	f1 1d       	adc	r31, r1
     d00:	11 24       	eor	r1, r1
     d02:	87 81       	ldd	r24, Z+7	; 0x07
     d04:	96 de       	rcall	.-724    	; 0xa32 <_dialog_goto_state>
  }
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	08 95       	ret

00000d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d24:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d26:	03 96       	adiw	r24, 0x03	; 3
     d28:	92 83       	std	Z+2, r25	; 0x02
     d2a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	34 83       	std	Z+4, r19	; 0x04
     d32:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d34:	96 83       	std	Z+6, r25	; 0x06
     d36:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d38:	90 87       	std	Z+8, r25	; 0x08
     d3a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d3c:	10 82       	st	Z, r1
     d3e:	08 95       	ret

00000d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d40:	fc 01       	movw	r30, r24
     d42:	11 86       	std	Z+9, r1	; 0x09
     d44:	10 86       	std	Z+8, r1	; 0x08
     d46:	08 95       	ret

00000d48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	9c 01       	movw	r18, r24
     d4e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     d50:	dc 01       	movw	r26, r24
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	cd 91       	ld	r28, X+
     d56:	dc 91       	ld	r29, X
     d58:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d5a:	d3 83       	std	Z+3, r29	; 0x03
     d5c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	95 83       	std	Z+5, r25	; 0x05
     d64:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	dc 01       	movw	r26, r24
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	7c 93       	st	X, r23
     d70:	6e 93       	st	-X, r22
     d72:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     d74:	7d 83       	std	Y+5, r23	; 0x05
     d76:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d78:	31 87       	std	Z+9, r19	; 0x09
     d7a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     d7c:	f9 01       	movw	r30, r18
     d7e:	80 81       	ld	r24, Z
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 83       	st	Z, r24
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d90:	48 81       	ld	r20, Y
     d92:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d94:	4f 3f       	cpi	r20, 0xFF	; 255
     d96:	2f ef       	ldi	r18, 0xFF	; 255
     d98:	52 07       	cpc	r21, r18
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d9c:	fc 01       	movw	r30, r24
     d9e:	a7 81       	ldd	r26, Z+7	; 0x07
     da0:	b0 85       	ldd	r27, Z+8	; 0x08
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     da4:	dc 01       	movw	r26, r24
     da6:	13 96       	adiw	r26, 0x03	; 3
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	ed 91       	ld	r30, X+
     dac:	fc 91       	ld	r31, X
     dae:	13 97       	sbiw	r26, 0x03	; 3
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	42 17       	cp	r20, r18
     db6:	53 07       	cpc	r21, r19
     db8:	10 f0       	brcs	.+4      	; 0xdbe <vListInsert+0x34>
     dba:	df 01       	movw	r26, r30
     dbc:	f5 cf       	rjmp	.-22     	; 0xda8 <vListInsert+0x1e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	ed 91       	ld	r30, X+
     dc2:	fc 91       	ld	r31, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	fb 83       	std	Y+3, r31	; 0x03
     dc8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     dca:	d5 83       	std	Z+5, r29	; 0x05
     dcc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     dce:	bd 83       	std	Y+5, r27	; 0x05
     dd0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     dd2:	13 96       	adiw	r26, 0x03	; 3
     dd4:	dc 93       	st	X, r29
     dd6:	ce 93       	st	-X, r28
     dd8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     dda:	99 87       	std	Y+9, r25	; 0x09
     ddc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     dde:	fc 01       	movw	r30, r24
     de0:	20 81       	ld	r18, Z
     de2:	2f 5f       	subi	r18, 0xFF	; 255
     de4:	20 83       	st	Z, r18
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     df2:	a0 85       	ldd	r26, Z+8	; 0x08
     df4:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     df6:	c2 81       	ldd	r28, Z+2	; 0x02
     df8:	d3 81       	ldd	r29, Z+3	; 0x03
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	95 81       	ldd	r25, Z+5	; 0x05
     dfe:	9d 83       	std	Y+5, r25	; 0x05
     e00:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e02:	c4 81       	ldd	r28, Z+4	; 0x04
     e04:	d5 81       	ldd	r29, Z+5	; 0x05
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	9b 83       	std	Y+3, r25	; 0x03
     e0c:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	cd 91       	ld	r28, X+
     e12:	dc 91       	ld	r29, X
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	ce 17       	cp	r28, r30
     e18:	df 07       	cpc	r29, r31
     e1a:	31 f4       	brne	.+12     	; 0xe28 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     e28:	11 86       	std	Z+9, r1	; 0x09
     e2a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     e2c:	8c 91       	ld	r24, X
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <pxPortInitialiseStack>:
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */

#if defined( portUSE_TIMER0 )
   /* Setup clock source and compare match behaviour. Assuming 328p*/
	portTIMSK &= ~( _BV(OCIE0B)|_BV(OCIE0A)|_BV(TOIE0) );	// disable all Timer0 interrupts
     e38:	31 e1       	ldi	r19, 0x11	; 17
     e3a:	fc 01       	movw	r30, r24
     e3c:	30 83       	st	Z, r19
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	22 e2       	ldi	r18, 0x22	; 34
     e42:	20 83       	st	Z, r18
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	a3 e3       	ldi	r26, 0x33	; 51
     e48:	a0 83       	st	Z, r26
     e4a:	31 97       	sbiw	r30, 0x01	; 1
     e4c:	60 83       	st	Z, r22
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	70 83       	st	Z, r23
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	10 82       	st	Z, r1
     e56:	31 97       	sbiw	r30, 0x01	; 1
     e58:	10 82       	st	Z, r1
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	60 e8       	ldi	r22, 0x80	; 128
     e5e:	60 83       	st	Z, r22
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	10 82       	st	Z, r1
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	62 e0       	ldi	r22, 0x02	; 2
     e70:	60 83       	st	Z, r22
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	63 e0       	ldi	r22, 0x03	; 3
     e76:	60 83       	st	Z, r22
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	60 83       	st	Z, r22
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	60 83       	st	Z, r22
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	60 83       	st	Z, r22
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	67 e0       	ldi	r22, 0x07	; 7
     e8e:	60 83       	st	Z, r22
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	68 e0       	ldi	r22, 0x08	; 8
     e94:	60 83       	st	Z, r22
     e96:	31 97       	sbiw	r30, 0x01	; 1
     e98:	69 e0       	ldi	r22, 0x09	; 9
     e9a:	60 83       	st	Z, r22
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	60 e1       	ldi	r22, 0x10	; 16
     ea0:	60 83       	st	Z, r22
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	30 83       	st	Z, r19
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	32 e1       	ldi	r19, 0x12	; 18
     eaa:	30 83       	st	Z, r19
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	33 e1       	ldi	r19, 0x13	; 19
     eb0:	30 83       	st	Z, r19
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	34 e1       	ldi	r19, 0x14	; 20
     eb6:	30 83       	st	Z, r19
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	35 e1       	ldi	r19, 0x15	; 21
     ebc:	30 83       	st	Z, r19
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	36 e1       	ldi	r19, 0x16	; 22
     ec2:	30 83       	st	Z, r19
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	37 e1       	ldi	r19, 0x17	; 23
     ec8:	30 83       	st	Z, r19
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	38 e1       	ldi	r19, 0x18	; 24
     ece:	30 83       	st	Z, r19
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	39 e1       	ldi	r19, 0x19	; 25
     ed4:	30 83       	st	Z, r19
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	30 e2       	ldi	r19, 0x20	; 32
     eda:	30 83       	st	Z, r19
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	31 e2       	ldi	r19, 0x21	; 33
     ee0:	30 83       	st	Z, r19
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	20 83       	st	Z, r18
     ee6:	31 97       	sbiw	r30, 0x01	; 1
     ee8:	23 e2       	ldi	r18, 0x23	; 35
     eea:	20 83       	st	Z, r18
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	40 83       	st	Z, r20
     ef0:	31 97       	sbiw	r30, 0x01	; 1
     ef2:	50 83       	st	Z, r21
     ef4:	31 97       	sbiw	r30, 0x01	; 1
     ef6:	26 e2       	ldi	r18, 0x26	; 38
     ef8:	20 83       	st	Z, r18
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	27 e2       	ldi	r18, 0x27	; 39
     efe:	20 83       	st	Z, r18
     f00:	31 97       	sbiw	r30, 0x01	; 1
     f02:	28 e2       	ldi	r18, 0x28	; 40
     f04:	20 83       	st	Z, r18
     f06:	31 97       	sbiw	r30, 0x01	; 1
     f08:	29 e2       	ldi	r18, 0x29	; 41
     f0a:	20 83       	st	Z, r18
     f0c:	31 97       	sbiw	r30, 0x01	; 1
     f0e:	20 e3       	ldi	r18, 0x30	; 48
     f10:	20 83       	st	Z, r18
     f12:	31 97       	sbiw	r30, 0x01	; 1
     f14:	21 e3       	ldi	r18, 0x31	; 49
     f16:	20 83       	st	Z, r18
     f18:	89 97       	sbiw	r24, 0x29	; 41
     f1a:	08 95       	ret

00000f1c <xPortStartScheduler>:
     f1c:	88 ee       	ldi	r24, 0xE8	; 232
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	90 93 cf 03 	sts	0x03CF, r25
     f24:	80 93 ce 03 	sts	0x03CE, r24
     f28:	90 93 cd 03 	sts	0x03CD, r25
     f2c:	80 93 cc 03 	sts	0x03CC, r24
     f30:	89 ef       	ldi	r24, 0xF9	; 249
     f32:	87 bd       	out	0x27, r24	; 39
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	84 bd       	out	0x24, r24	; 36
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	85 bd       	out	0x25, r24	; 37
     f3c:	ee e6       	ldi	r30, 0x6E	; 110
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	80 83       	st	Z, r24
     f46:	a0 91 ef 0d 	lds	r26, 0x0DEF
     f4a:	b0 91 f0 0d 	lds	r27, 0x0DF0
     f4e:	cd 91       	ld	r28, X+
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	dd 91       	ld	r29, X+
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	9f 90       	pop	r9
     f84:	8f 90       	pop	r8
     f86:	7f 90       	pop	r7
     f88:	6f 90       	pop	r6
     f8a:	5f 90       	pop	r5
     f8c:	4f 90       	pop	r4
     f8e:	3f 90       	pop	r3
     f90:	2f 90       	pop	r2
     f92:	1f 90       	pop	r1
     f94:	0f 90       	pop	r0
     f96:	0c be       	out	0x3c, r0	; 60
     f98:	0f 90       	pop	r0
     f9a:	0b be       	out	0x3b, r0	; 59
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	08 95       	ret
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	08 95       	ret

00000fa8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	0f 92       	push	r0
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	0c b6       	in	r0, 0x3c	; 60
     fb6:	0f 92       	push	r0
     fb8:	1f 92       	push	r1
     fba:	11 24       	eor	r1, r1
     fbc:	2f 92       	push	r2
     fbe:	3f 92       	push	r3
     fc0:	4f 92       	push	r4
     fc2:	5f 92       	push	r5
     fc4:	6f 92       	push	r6
     fc6:	7f 92       	push	r7
     fc8:	8f 92       	push	r8
     fca:	9f 92       	push	r9
     fcc:	af 92       	push	r10
     fce:	bf 92       	push	r11
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	2f 93       	push	r18
     fde:	3f 93       	push	r19
     fe0:	4f 93       	push	r20
     fe2:	5f 93       	push	r21
     fe4:	6f 93       	push	r22
     fe6:	7f 93       	push	r23
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
     ff8:	a0 91 ef 0d 	lds	r26, 0x0DEF
     ffc:	b0 91 f0 0d 	lds	r27, 0x0DF0
    1000:	0d b6       	in	r0, 0x3d	; 61
    1002:	0d 92       	st	X+, r0
    1004:	0e b6       	in	r0, 0x3e	; 62
    1006:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1008:	bd d5       	rcall	.+2938   	; 0x1b84 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    100a:	a0 91 ef 0d 	lds	r26, 0x0DEF
    100e:	b0 91 f0 0d 	lds	r27, 0x0DF0
    1012:	cd 91       	ld	r28, X+
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	dd 91       	ld	r29, X+
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	9f 90       	pop	r9
    1048:	8f 90       	pop	r8
    104a:	7f 90       	pop	r7
    104c:	6f 90       	pop	r6
    104e:	5f 90       	pop	r5
    1050:	4f 90       	pop	r4
    1052:	3f 90       	pop	r3
    1054:	2f 90       	pop	r2
    1056:	1f 90       	pop	r1
    1058:	0f 90       	pop	r0
    105a:	0c be       	out	0x3c, r0	; 60
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1066:	08 95       	ret

00001068 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	0f 92       	push	r0
    1070:	0b b6       	in	r0, 0x3b	; 59
    1072:	0f 92       	push	r0
    1074:	0c b6       	in	r0, 0x3c	; 60
    1076:	0f 92       	push	r0
    1078:	1f 92       	push	r1
    107a:	11 24       	eor	r1, r1
    107c:	2f 92       	push	r2
    107e:	3f 92       	push	r3
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	a0 91 ef 0d 	lds	r26, 0x0DEF
    10bc:	b0 91 f0 0d 	lds	r27, 0x0DF0
    10c0:	0d b6       	in	r0, 0x3d	; 61
    10c2:	0d 92       	st	X+, r0
    10c4:	0e b6       	in	r0, 0x3e	; 62
    10c6:	0d 92       	st	X+, r0

	if (--ticksRemainingInSec == 0)
    10c8:	80 91 cc 03 	lds	r24, 0x03CC
    10cc:	90 91 cd 03 	lds	r25, 0x03CD
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	90 93 cd 03 	sts	0x03CD, r25
    10d6:	80 93 cc 03 	sts	0x03CC, r24
    10da:	89 2b       	or	r24, r25
    10dc:	41 f4       	brne	.+16     	; 0x10ee <vPortYieldFromTick+0x86>
	{
//		system_tick();
		ticksRemainingInSec = portTickRateHz;
    10de:	80 91 ce 03 	lds	r24, 0x03CE
    10e2:	90 91 cf 03 	lds	r25, 0x03CF
    10e6:	90 93 cd 03 	sts	0x03CD, r25
    10ea:	80 93 cc 03 	sts	0x03CC, r24
	}

	if( xTaskIncrementTick() != pdFALSE )
    10ee:	f6 d3       	rcall	.+2028   	; 0x18dc <xTaskIncrementTick>
    10f0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    10f2:	48 d5       	rcall	.+2704   	; 0x1b84 <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
    10f4:	a0 91 ef 0d 	lds	r26, 0x0DEF
    10f8:	b0 91 f0 0d 	lds	r27, 0x0DF0
    10fc:	cd 91       	ld	r28, X+
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	dd 91       	ld	r29, X+
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	8f 90       	pop	r8
    1134:	7f 90       	pop	r7
    1136:	6f 90       	pop	r6
    1138:	5f 90       	pop	r5
    113a:	4f 90       	pop	r4
    113c:	3f 90       	pop	r3
    113e:	2f 90       	pop	r2
    1140:	1f 90       	pop	r1
    1142:	0f 90       	pop	r0
    1144:	0c be       	out	0x3c, r0	; 60
    1146:	0f 90       	pop	r0
    1148:	0b be       	out	0x3b, r0	; 59
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    1150:	08 95       	ret

00001152 <__vector_21>:
	 */
//	ISR(TIMER_COMPA_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(TIMER_COMPA_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(TIMER_COMPA_ISR, ISR_NAKED)
	{
		vPortYieldFromTick();
    1152:	8a df       	rcall	.-236    	; 0x1068 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    1154:	18 95       	reti

00001156 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    115c:	af d3       	rcall	.+1886   	; 0x18bc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    115e:	80 91 d0 03 	lds	r24, 0x03D0
    1162:	90 91 d1 03 	lds	r25, 0x03D1
    1166:	89 2b       	or	r24, r25
    1168:	31 f4       	brne	.+12     	; 0x1176 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    116a:	85 ed       	ldi	r24, 0xD5	; 213
    116c:	93 e0       	ldi	r25, 0x03	; 3
    116e:	90 93 d1 03 	sts	0x03D1, r25
    1172:	80 93 d0 03 	sts	0x03D0, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1176:	40 91 d2 03 	lds	r20, 0x03D2
    117a:	50 91 d3 03 	lds	r21, 0x03D3
    117e:	9e 01       	movw	r18, r28
    1180:	24 0f       	add	r18, r20
    1182:	35 1f       	adc	r19, r21
    1184:	23 3c       	cpi	r18, 0xC3	; 195
    1186:	89 e0       	ldi	r24, 0x09	; 9
    1188:	38 07       	cpc	r19, r24
    118a:	70 f4       	brcc	.+28     	; 0x11a8 <pvPortMalloc+0x52>
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	70 f4       	brcc	.+28     	; 0x11ae <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1192:	c0 91 d0 03 	lds	r28, 0x03D0
    1196:	d0 91 d1 03 	lds	r29, 0x03D1
    119a:	c4 0f       	add	r28, r20
    119c:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
    119e:	30 93 d3 03 	sts	0x03D3, r19
    11a2:	20 93 d2 03 	sts	0x03D2, r18
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <pvPortMalloc+0x5c>
    11ae:	c0 e0       	ldi	r28, 0x00	; 0
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    11b2:	4f d4       	rcall	.+2206   	; 0x1a52 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    11b4:	ce 01       	movw	r24, r28
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    11bc:	08 95       	ret

000011be <prvCopyDataToQueue>:
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	14 2f       	mov	r17, r20
    11c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11ca:	88 23       	and	r24, r24
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <prvCopyDataToQueue+0x8a>
    11ce:	41 11       	cpse	r20, r1
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <prvCopyDataToQueue+0x42>
    11d2:	48 2f       	mov	r20, r24
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	0e 94 81 16 	call	0x2d02	; 0x2d02 <memcpy>
    11de:	2c 8d       	ldd	r18, Y+28	; 0x1c
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	82 0f       	add	r24, r18
    11e6:	91 1d       	adc	r25, r1
    11e8:	9d 83       	std	Y+5, r25	; 0x05
    11ea:	8c 83       	std	Y+4, r24	; 0x04
    11ec:	2a 81       	ldd	r18, Y+2	; 0x02
    11ee:	3b 81       	ldd	r19, Y+3	; 0x03
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	48 f1       	brcs	.+82     	; 0x1248 <prvCopyDataToQueue+0x8a>
    11f6:	88 81       	ld	r24, Y
    11f8:	99 81       	ldd	r25, Y+1	; 0x01
    11fa:	9d 83       	std	Y+5, r25	; 0x05
    11fc:	8c 83       	std	Y+4, r24	; 0x04
    11fe:	24 c0       	rjmp	.+72     	; 0x1248 <prvCopyDataToQueue+0x8a>
    1200:	48 2f       	mov	r20, r24
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	0e 94 81 16 	call	0x2d02	; 0x2d02 <memcpy>
    120c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	31 95       	neg	r19
    1212:	21 95       	neg	r18
    1214:	31 09       	sbc	r19, r1
    1216:	8e 81       	ldd	r24, Y+6	; 0x06
    1218:	9f 81       	ldd	r25, Y+7	; 0x07
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	9f 83       	std	Y+7, r25	; 0x07
    1220:	8e 83       	std	Y+6, r24	; 0x06
    1222:	68 81       	ld	r22, Y
    1224:	79 81       	ldd	r23, Y+1	; 0x01
    1226:	86 17       	cp	r24, r22
    1228:	97 07       	cpc	r25, r23
    122a:	30 f4       	brcc	.+12     	; 0x1238 <prvCopyDataToQueue+0x7a>
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	28 0f       	add	r18, r24
    1232:	39 1f       	adc	r19, r25
    1234:	3f 83       	std	Y+7, r19	; 0x07
    1236:	2e 83       	std	Y+6, r18	; 0x06
    1238:	12 30       	cpi	r17, 0x02	; 2
    123a:	31 f4       	brne	.+12     	; 0x1248 <prvCopyDataToQueue+0x8a>
    123c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <prvCopyDataToQueue+0x8a>
    1242:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	8a 8f       	std	Y+26, r24	; 0x1a
    1248:	8a 8d       	ldd	r24, Y+26	; 0x1a
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8a 8f       	std	Y+26, r24	; 0x1a
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	08 95       	ret

00001258 <prvCopyDataFromQueue>:
    1258:	fc 01       	movw	r30, r24
    125a:	cb 01       	movw	r24, r22
    125c:	44 8d       	ldd	r20, Z+28	; 0x1c
    125e:	44 23       	and	r20, r20
    1260:	a1 f0       	breq	.+40     	; 0x128a <prvCopyDataFromQueue+0x32>
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	26 81       	ldd	r18, Z+6	; 0x06
    1266:	37 81       	ldd	r19, Z+7	; 0x07
    1268:	24 0f       	add	r18, r20
    126a:	35 1f       	adc	r19, r21
    126c:	37 83       	std	Z+7, r19	; 0x07
    126e:	26 83       	std	Z+6, r18	; 0x06
    1270:	62 81       	ldd	r22, Z+2	; 0x02
    1272:	73 81       	ldd	r23, Z+3	; 0x03
    1274:	26 17       	cp	r18, r22
    1276:	37 07       	cpc	r19, r23
    1278:	20 f0       	brcs	.+8      	; 0x1282 <prvCopyDataFromQueue+0x2a>
    127a:	20 81       	ld	r18, Z
    127c:	31 81       	ldd	r19, Z+1	; 0x01
    127e:	37 83       	std	Z+7, r19	; 0x07
    1280:	26 83       	std	Z+6, r18	; 0x06
    1282:	66 81       	ldd	r22, Z+6	; 0x06
    1284:	77 81       	ldd	r23, Z+7	; 0x07
    1286:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <memcpy>
    128a:	08 95       	ret

0000128c <prvUnlockQueue>:
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	0f 92       	push	r0
    129c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    129e:	18 16       	cp	r1, r24
    12a0:	a4 f4       	brge	.+40     	; 0x12ca <prvUnlockQueue+0x3e>
    12a2:	89 89       	ldd	r24, Y+17	; 0x11
    12a4:	88 23       	and	r24, r24
    12a6:	89 f0       	breq	.+34     	; 0x12ca <prvUnlockQueue+0x3e>
    12a8:	8e 01       	movw	r16, r28
    12aa:	0f 5e       	subi	r16, 0xEF	; 239
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <prvUnlockQueue+0x2a>
    12b0:	89 89       	ldd	r24, Y+17	; 0x11
    12b2:	88 23       	and	r24, r24
    12b4:	51 f0       	breq	.+20     	; 0x12ca <prvUnlockQueue+0x3e>
    12b6:	c8 01       	movw	r24, r16
    12b8:	f7 d4       	rcall	.+2542   	; 0x1ca8 <xTaskRemoveFromEventList>
    12ba:	81 11       	cpse	r24, r1
    12bc:	76 d5       	rcall	.+2796   	; 0x1daa <vTaskMissedYield>
    12be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c0:	81 50       	subi	r24, 0x01	; 1
    12c2:	8e 8f       	std	Y+30, r24	; 0x1e
    12c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12c6:	18 16       	cp	r1, r24
    12c8:	9c f3       	brlt	.-26     	; 0x12b0 <prvUnlockQueue+0x24>
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	8e 8f       	std	Y+30, r24	; 0x1e
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12da:	18 16       	cp	r1, r24
    12dc:	a4 f4       	brge	.+40     	; 0x1306 <prvUnlockQueue+0x7a>
    12de:	88 85       	ldd	r24, Y+8	; 0x08
    12e0:	88 23       	and	r24, r24
    12e2:	89 f0       	breq	.+34     	; 0x1306 <prvUnlockQueue+0x7a>
    12e4:	8e 01       	movw	r16, r28
    12e6:	08 5f       	subi	r16, 0xF8	; 248
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <prvUnlockQueue+0x66>
    12ec:	88 85       	ldd	r24, Y+8	; 0x08
    12ee:	88 23       	and	r24, r24
    12f0:	51 f0       	breq	.+20     	; 0x1306 <prvUnlockQueue+0x7a>
    12f2:	c8 01       	movw	r24, r16
    12f4:	d9 d4       	rcall	.+2482   	; 0x1ca8 <xTaskRemoveFromEventList>
    12f6:	81 11       	cpse	r24, r1
    12f8:	58 d5       	rcall	.+2736   	; 0x1daa <vTaskMissedYield>
    12fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1302:	18 16       	cp	r1, r24
    1304:	9c f3       	brlt	.-26     	; 0x12ec <prvUnlockQueue+0x60>
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	8d 8f       	std	Y+29, r24	; 0x1d
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <xQueueGenericReset>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	0f 92       	push	r0
    1324:	88 81       	ld	r24, Y
    1326:	99 81       	ldd	r25, Y+1	; 0x01
    1328:	2c 8d       	ldd	r18, Y+28	; 0x1c
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    132e:	72 9f       	mul	r23, r18
    1330:	a0 01       	movw	r20, r0
    1332:	73 9f       	mul	r23, r19
    1334:	50 0d       	add	r21, r0
    1336:	11 24       	eor	r1, r1
    1338:	fc 01       	movw	r30, r24
    133a:	e4 0f       	add	r30, r20
    133c:	f5 1f       	adc	r31, r21
    133e:	fb 83       	std	Y+3, r31	; 0x03
    1340:	ea 83       	std	Y+2, r30	; 0x02
    1342:	1a 8e       	std	Y+26, r1	; 0x1a
    1344:	9d 83       	std	Y+5, r25	; 0x05
    1346:	8c 83       	std	Y+4, r24	; 0x04
    1348:	42 1b       	sub	r20, r18
    134a:	53 0b       	sbc	r21, r19
    134c:	84 0f       	add	r24, r20
    134e:	95 1f       	adc	r25, r21
    1350:	9f 83       	std	Y+7, r25	; 0x07
    1352:	8e 83       	std	Y+6, r24	; 0x06
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	8d 8f       	std	Y+29, r24	; 0x1d
    1358:	8e 8f       	std	Y+30, r24	; 0x1e
    135a:	61 11       	cpse	r22, r1
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <xQueueGenericReset+0x5a>
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	88 23       	and	r24, r24
    1362:	69 f0       	breq	.+26     	; 0x137e <xQueueGenericReset+0x66>
    1364:	ce 01       	movw	r24, r28
    1366:	08 96       	adiw	r24, 0x08	; 8
    1368:	9f d4       	rcall	.+2366   	; 0x1ca8 <xTaskRemoveFromEventList>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	41 f4       	brne	.+16     	; 0x137e <xQueueGenericReset+0x66>
    136e:	1c de       	rcall	.-968    	; 0xfa8 <vPortYield>
    1370:	06 c0       	rjmp	.+12     	; 0x137e <xQueueGenericReset+0x66>
    1372:	ce 01       	movw	r24, r28
    1374:	08 96       	adiw	r24, 0x08	; 8
    1376:	d6 dc       	rcall	.-1620   	; 0xd24 <vListInitialise>
    1378:	ce 01       	movw	r24, r28
    137a:	41 96       	adiw	r24, 0x11	; 17
    137c:	d3 dc       	rcall	.-1626   	; 0xd24 <vListInitialise>
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <xQueueGenericCreate>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	08 2f       	mov	r16, r24
    1394:	16 2f       	mov	r17, r22
    1396:	66 23       	and	r22, r22
    1398:	b9 f0       	breq	.+46     	; 0x13c8 <xQueueGenericCreate+0x3e>
    139a:	86 9f       	mul	r24, r22
    139c:	c0 01       	movw	r24, r0
    139e:	11 24       	eor	r1, r1
    13a0:	80 96       	adiw	r24, 0x20	; 32
    13a2:	d9 de       	rcall	.-590    	; 0x1156 <pvPortMalloc>
    13a4:	ec 01       	movw	r28, r24
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <xQueueGenericCreate+0x28>
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <xQueueGenericCreate+0x4a>
    13ac:	d9 83       	std	Y+1, r29	; 0x01
    13ae:	c8 83       	st	Y, r28
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <xQueueGenericCreate+0x32>
    13b2:	9c 01       	movw	r18, r24
    13b4:	21 5e       	subi	r18, 0xE1	; 225
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	39 83       	std	Y+1, r19	; 0x01
    13ba:	28 83       	st	Y, r18
    13bc:	0b 8f       	std	Y+27, r16	; 0x1b
    13be:	1c 8f       	std	Y+28, r17	; 0x1c
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	ce 01       	movw	r24, r28
    13c4:	a9 df       	rcall	.-174    	; 0x1318 <xQueueGenericReset>
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <xQueueGenericCreate+0x4a>
    13c8:	8f e1       	ldi	r24, 0x1F	; 31
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	c4 de       	rcall	.-632    	; 0x1156 <pvPortMalloc>
    13ce:	ec 01       	movw	r28, r24
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f7       	brne	.-40     	; 0x13ac <xQueueGenericCreate+0x22>
    13d4:	ce 01       	movw	r24, r28
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	08 95       	ret

000013e0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	ec 01       	movw	r28, r24
    13ea:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    13ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	98 17       	cp	r25, r24
    13f2:	10 f0       	brcs	.+4      	; 0x13f8 <xQueueGenericSendFromISR+0x18>
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	d1 f4       	brne	.+52     	; 0x142c <xQueueGenericSendFromISR+0x4c>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    13f8:	42 2f       	mov	r20, r18
    13fa:	ce 01       	movw	r24, r28
    13fc:	e0 de       	rcall	.-576    	; 0x11be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    13fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	79 f4       	brne	.+30     	; 0x1422 <xQueueGenericSendFromISR+0x42>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	88 23       	and	r24, r24
    1408:	99 f0       	breq	.+38     	; 0x1430 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    140a:	ce 01       	movw	r24, r28
    140c:	41 96       	adiw	r24, 0x11	; 17
    140e:	4c d4       	rcall	.+2200   	; 0x1ca8 <xTaskRemoveFromEventList>
    1410:	88 23       	and	r24, r24
    1412:	81 f0       	breq	.+32     	; 0x1434 <xQueueGenericSendFromISR+0x54>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1414:	01 15       	cp	r16, r1
    1416:	11 05       	cpc	r17, r1
    1418:	79 f0       	breq	.+30     	; 0x1438 <xQueueGenericSendFromISR+0x58>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	f8 01       	movw	r30, r16
    141e:	80 83       	st	Z, r24
    1420:	0c c0       	rjmp	.+24     	; 0x143a <xQueueGenericSendFromISR+0x5a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1422:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	07 c0       	rjmp	.+14     	; 0x143a <xQueueGenericSendFromISR+0x5a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	05 c0       	rjmp	.+10     	; 0x143a <xQueueGenericSendFromISR+0x5a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	03 c0       	rjmp	.+6      	; 0x143a <xQueueGenericSendFromISR+0x5a>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <xQueueGenericSendFromISR+0x5a>
    1438:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	fc 01       	movw	r30, r24
    144a:	eb 01       	movw	r28, r22
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    144c:	92 8d       	ldd	r25, Z+26	; 0x1a
    144e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1450:	98 17       	cp	r25, r24
    1452:	c0 f4       	brcc	.+48     	; 0x1484 <xQueueGiveFromISR+0x40>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    1454:	82 8d       	ldd	r24, Z+26	; 0x1a
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    145a:	86 8d       	ldd	r24, Z+30	; 0x1e
    145c:	8f 3f       	cpi	r24, 0xFF	; 255
    145e:	69 f4       	brne	.+26     	; 0x147a <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1460:	81 89       	ldd	r24, Z+17	; 0x11
    1462:	88 23       	and	r24, r24
    1464:	89 f0       	breq	.+34     	; 0x1488 <xQueueGiveFromISR+0x44>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1466:	cf 01       	movw	r24, r30
    1468:	41 96       	adiw	r24, 0x11	; 17
    146a:	1e d4       	rcall	.+2108   	; 0x1ca8 <xTaskRemoveFromEventList>
    146c:	88 23       	and	r24, r24
    146e:	71 f0       	breq	.+28     	; 0x148c <xQueueGiveFromISR+0x48>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1470:	20 97       	sbiw	r28, 0x00	; 0
    1472:	71 f0       	breq	.+28     	; 0x1490 <xQueueGiveFromISR+0x4c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	88 83       	st	Y, r24
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <xQueueGiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    147a:	86 8d       	ldd	r24, Z+30	; 0x1e
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <xQueueGiveFromISR+0x4e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <xQueueGiveFromISR+0x4e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <xQueueGiveFromISR+0x4e>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <xQueueGiveFromISR+0x4e>
    1490:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1498:	9f 92       	push	r9
    149a:	af 92       	push	r10
    149c:	bf 92       	push	r11
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <xQueueGenericReceive+0x18>
    14b0:	1f 92       	push	r1
    14b2:	1f 92       	push	r1
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8c 01       	movw	r16, r24
    14ba:	6b 01       	movw	r12, r22
    14bc:	5d 83       	std	Y+5, r21	; 0x05
    14be:	4c 83       	std	Y+4, r20	; 0x04
    14c0:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    14c2:	a1 2c       	mov	r10, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    14c4:	99 24       	eor	r9, r9
    14c6:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    14c8:	7c 01       	movw	r14, r24
    14ca:	81 e1       	ldi	r24, 0x11	; 17
    14cc:	e8 0e       	add	r14, r24
    14ce:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    14d6:	f8 01       	movw	r30, r16
    14d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    14da:	88 23       	and	r24, r24
    14dc:	21 f1       	breq	.+72     	; 0x1526 <xQueueGenericReceive+0x8e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    14de:	e6 80       	ldd	r14, Z+6	; 0x06
    14e0:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    14e2:	b6 01       	movw	r22, r12
    14e4:	c8 01       	movw	r24, r16
    14e6:	b8 de       	rcall	.-656    	; 0x1258 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    14e8:	b1 10       	cpse	r11, r1
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    14ec:	f8 01       	movw	r30, r16
    14ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	82 8f       	std	Z+26, r24	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14f4:	80 85       	ldd	r24, Z+8	; 0x08
    14f6:	88 23       	and	r24, r24
    14f8:	91 f0       	breq	.+36     	; 0x151e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    14fa:	c8 01       	movw	r24, r16
    14fc:	08 96       	adiw	r24, 0x08	; 8
    14fe:	d4 d3       	rcall	.+1960   	; 0x1ca8 <xTaskRemoveFromEventList>
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	69 f4       	brne	.+26     	; 0x151e <xQueueGenericReceive+0x86>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1504:	51 dd       	rcall	.-1374   	; 0xfa8 <vPortYield>
    1506:	0b c0       	rjmp	.+22     	; 0x151e <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1508:	f8 01       	movw	r30, r16
    150a:	f7 82       	std	Z+7, r15	; 0x07
    150c:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    150e:	81 89       	ldd	r24, Z+17	; 0x11
    1510:	88 23       	and	r24, r24
    1512:	29 f0       	breq	.+10     	; 0x151e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1514:	c8 01       	movw	r24, r16
    1516:	41 96       	adiw	r24, 0x11	; 17
    1518:	c7 d3       	rcall	.+1934   	; 0x1ca8 <xTaskRemoveFromEventList>
    151a:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    151c:	45 dd       	rcall	.-1398   	; 0xfa8 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	44 c0       	rjmp	.+136    	; 0x15ae <xQueueGenericReceive+0x116>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1526:	4c 81       	ldd	r20, Y+4	; 0x04
    1528:	5d 81       	ldd	r21, Y+5	; 0x05
    152a:	45 2b       	or	r20, r21
    152c:	21 f4       	brne	.+8      	; 0x1536 <xQueueGenericReceive+0x9e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	3c c0       	rjmp	.+120    	; 0x15ae <xQueueGenericReceive+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    1536:	a1 10       	cpse	r10, r1
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <xQueueGenericReceive+0xaa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	f8 d3       	rcall	.+2032   	; 0x1d30 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1540:	a9 2c       	mov	r10, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1546:	ba d1       	rcall	.+884    	; 0x18bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	0f 92       	push	r0
    154e:	f8 01       	movw	r30, r16
    1550:	85 8d       	ldd	r24, Z+29	; 0x1d
    1552:	8f 3f       	cpi	r24, 0xFF	; 255
    1554:	09 f4       	brne	.+2      	; 0x1558 <xQueueGenericReceive+0xc0>
    1556:	15 8e       	std	Z+29, r1	; 0x1d
    1558:	f8 01       	movw	r30, r16
    155a:	86 8d       	ldd	r24, Z+30	; 0x1e
    155c:	8f 3f       	cpi	r24, 0xFF	; 255
    155e:	09 f4       	brne	.+2      	; 0x1562 <xQueueGenericReceive+0xca>
    1560:	16 8e       	std	Z+30, r1	; 0x1e
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1566:	be 01       	movw	r22, r28
    1568:	6c 5f       	subi	r22, 0xFC	; 252
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	ce 01       	movw	r24, r28
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	ea d3       	rcall	.+2004   	; 0x1d46 <xTaskCheckForTimeOut>
    1572:	81 11       	cpse	r24, r1
    1574:	18 c0       	rjmp	.+48     	; 0x15a6 <xQueueGenericReceive+0x10e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    157c:	f8 01       	movw	r30, r16
    157e:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1584:	81 11       	cpse	r24, r1
    1586:	0b c0       	rjmp	.+22     	; 0x159e <xQueueGenericReceive+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1588:	6c 81       	ldd	r22, Y+4	; 0x04
    158a:	7d 81       	ldd	r23, Y+5	; 0x05
    158c:	c7 01       	movw	r24, r14
    158e:	72 d3       	rcall	.+1764   	; 0x1c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1590:	c8 01       	movw	r24, r16
    1592:	7c de       	rcall	.-776    	; 0x128c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1594:	5e d2       	rcall	.+1212   	; 0x1a52 <xTaskResumeAll>
    1596:	81 11       	cpse	r24, r1
    1598:	9b cf       	rjmp	.-202    	; 0x14d0 <xQueueGenericReceive+0x38>
				{
					portYIELD_WITHIN_API();
    159a:	06 dd       	rcall	.-1524   	; 0xfa8 <vPortYield>
    159c:	99 cf       	rjmp	.-206    	; 0x14d0 <xQueueGenericReceive+0x38>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    159e:	c8 01       	movw	r24, r16
    15a0:	75 de       	rcall	.-790    	; 0x128c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    15a2:	57 d2       	rcall	.+1198   	; 0x1a52 <xTaskResumeAll>
    15a4:	95 cf       	rjmp	.-214    	; 0x14d0 <xQueueGenericReceive+0x38>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    15a6:	c8 01       	movw	r24, r16
    15a8:	71 de       	rcall	.-798    	; 0x128c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    15aa:	53 d2       	rcall	.+1190   	; 0x1a52 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	08 95       	ret

000015d0 <prvResetNextTaskUnblockTime>:
    15d0:	e0 91 b7 0d 	lds	r30, 0x0DB7
    15d4:	f0 91 b8 0d 	lds	r31, 0x0DB8
    15d8:	80 81       	ld	r24, Z
    15da:	81 11       	cpse	r24, r1
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <prvResetNextTaskUnblockTime+0x1c>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	90 93 4a 02 	sts	0x024A, r25
    15e6:	80 93 49 02 	sts	0x0249, r24
    15ea:	08 95       	ret
    15ec:	e0 91 b7 0d 	lds	r30, 0x0DB7
    15f0:	f0 91 b8 0d 	lds	r31, 0x0DB8
    15f4:	05 80       	ldd	r0, Z+5	; 0x05
    15f6:	f6 81       	ldd	r31, Z+6	; 0x06
    15f8:	e0 2d       	mov	r30, r0
    15fa:	06 80       	ldd	r0, Z+6	; 0x06
    15fc:	f7 81       	ldd	r31, Z+7	; 0x07
    15fe:	e0 2d       	mov	r30, r0
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	90 93 4a 02 	sts	0x024A, r25
    1608:	80 93 49 02 	sts	0x0249, r24
    160c:	08 95       	ret

0000160e <prvAddCurrentTaskToDelayedList>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	e0 91 ef 0d 	lds	r30, 0x0DEF
    1618:	f0 91 f0 0d 	lds	r31, 0x0DF0
    161c:	93 83       	std	Z+3, r25	; 0x03
    161e:	82 83       	std	Z+2, r24	; 0x02
    1620:	80 91 9f 0d 	lds	r24, 0x0D9F
    1624:	90 91 a0 0d 	lds	r25, 0x0DA0
    1628:	c8 17       	cp	r28, r24
    162a:	d9 07       	cpc	r29, r25
    162c:	60 f4       	brcc	.+24     	; 0x1646 <prvAddCurrentTaskToDelayedList+0x38>
    162e:	60 91 ef 0d 	lds	r22, 0x0DEF
    1632:	70 91 f0 0d 	lds	r23, 0x0DF0
    1636:	80 91 b5 0d 	lds	r24, 0x0DB5
    163a:	90 91 b6 0d 	lds	r25, 0x0DB6
    163e:	6e 5f       	subi	r22, 0xFE	; 254
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	a3 db       	rcall	.-2234   	; 0xd8a <vListInsert>
    1644:	16 c0       	rjmp	.+44     	; 0x1672 <prvAddCurrentTaskToDelayedList+0x64>
    1646:	60 91 ef 0d 	lds	r22, 0x0DEF
    164a:	70 91 f0 0d 	lds	r23, 0x0DF0
    164e:	80 91 b7 0d 	lds	r24, 0x0DB7
    1652:	90 91 b8 0d 	lds	r25, 0x0DB8
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	97 db       	rcall	.-2258   	; 0xd8a <vListInsert>
    165c:	80 91 49 02 	lds	r24, 0x0249
    1660:	90 91 4a 02 	lds	r25, 0x024A
    1664:	c8 17       	cp	r28, r24
    1666:	d9 07       	cpc	r29, r25
    1668:	20 f4       	brcc	.+8      	; 0x1672 <prvAddCurrentTaskToDelayedList+0x64>
    166a:	d0 93 4a 02 	sts	0x024A, r29
    166e:	c0 93 49 02 	sts	0x0249, r28
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <xTaskGenericCreate>:
    1678:	4f 92       	push	r4
    167a:	5f 92       	push	r5
    167c:	6f 92       	push	r6
    167e:	7f 92       	push	r7
    1680:	8f 92       	push	r8
    1682:	9f 92       	push	r9
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	4c 01       	movw	r8, r24
    169a:	5b 01       	movw	r10, r22
    169c:	2a 01       	movw	r4, r20
    169e:	39 01       	movw	r6, r18
    16a0:	c1 14       	cp	r12, r1
    16a2:	d1 04       	cpc	r13, r1
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <xTaskGenericCreate+0x3a>
    16a6:	ca 01       	movw	r24, r20
    16a8:	56 dd       	rcall	.-1364   	; 0x1156 <pvPortMalloc>
    16aa:	6c 01       	movw	r12, r24
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <xTaskGenericCreate+0x3a>
    16b0:	ca c0       	rjmp	.+404    	; 0x1846 <xTaskGenericCreate+0x1ce>
    16b2:	86 e2       	ldi	r24, 0x26	; 38
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	4f dd       	rcall	.-1378   	; 0x1156 <pvPortMalloc>
    16b8:	ec 01       	movw	r28, r24
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	71 f0       	breq	.+28     	; 0x16da <xTaskGenericCreate+0x62>
    16be:	d8 8e       	std	Y+24, r13	; 0x18
    16c0:	cf 8a       	std	Y+23, r12	; 0x17
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	48 1a       	sub	r4, r24
    16c6:	51 08       	sbc	r5, r1
    16c8:	c4 0c       	add	r12, r4
    16ca:	d5 1c       	adc	r13, r5
    16cc:	d5 01       	movw	r26, r10
    16ce:	8c 91       	ld	r24, X
    16d0:	89 8f       	std	Y+25, r24	; 0x19
    16d2:	8c 91       	ld	r24, X
    16d4:	81 11       	cpse	r24, r1
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <xTaskGenericCreate+0x68>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <xTaskGenericCreate+0x8a>
    16da:	c6 01       	movw	r24, r12
    16dc:	6f dd       	rcall	.-1314   	; 0x11bc <vPortFree>
    16de:	b3 c0       	rjmp	.+358    	; 0x1846 <xTaskGenericCreate+0x1ce>
    16e0:	ae 01       	movw	r20, r28
    16e2:	46 5e       	subi	r20, 0xE6	; 230
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	f5 01       	movw	r30, r10
    16e8:	31 96       	adiw	r30, 0x01	; 1
    16ea:	27 e0       	ldi	r18, 0x07	; 7
    16ec:	cf 01       	movw	r24, r30
    16ee:	31 91       	ld	r19, Z+
    16f0:	da 01       	movw	r26, r20
    16f2:	3d 93       	st	X+, r19
    16f4:	ad 01       	movw	r20, r26
    16f6:	dc 01       	movw	r26, r24
    16f8:	8c 91       	ld	r24, X
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <xTaskGenericCreate+0x8a>
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	a9 f7       	brne	.-22     	; 0x16ec <xTaskGenericCreate+0x74>
    1702:	18 a2       	std	Y+32, r1	; 0x20
    1704:	10 2f       	mov	r17, r16
    1706:	04 30       	cpi	r16, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <xTaskGenericCreate+0x94>
    170a:	13 e0       	ldi	r17, 0x03	; 3
    170c:	1e 8b       	std	Y+22, r17	; 0x16
    170e:	5e 01       	movw	r10, r28
    1710:	b2 e0       	ldi	r27, 0x02	; 2
    1712:	ab 0e       	add	r10, r27
    1714:	b1 1c       	adc	r11, r1
    1716:	c5 01       	movw	r24, r10
    1718:	13 db       	rcall	.-2522   	; 0xd40 <vListInitialiseItem>
    171a:	ce 01       	movw	r24, r28
    171c:	0c 96       	adiw	r24, 0x0c	; 12
    171e:	10 db       	rcall	.-2528   	; 0xd40 <vListInitialiseItem>
    1720:	d9 87       	std	Y+9, r29	; 0x09
    1722:	c8 87       	std	Y+8, r28	; 0x08
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	81 1b       	sub	r24, r17
    172a:	91 09       	sbc	r25, r1
    172c:	9d 87       	std	Y+13, r25	; 0x0d
    172e:	8c 87       	std	Y+12, r24	; 0x0c
    1730:	db 8b       	std	Y+19, r29	; 0x13
    1732:	ca 8b       	std	Y+18, r28	; 0x12
    1734:	19 a2       	std	Y+33, r1	; 0x21
    1736:	1a a2       	std	Y+34, r1	; 0x22
    1738:	1b a2       	std	Y+35, r1	; 0x23
    173a:	1c a2       	std	Y+36, r1	; 0x24
    173c:	1d a2       	std	Y+37, r1	; 0x25
    173e:	a3 01       	movw	r20, r6
    1740:	b4 01       	movw	r22, r8
    1742:	c6 01       	movw	r24, r12
    1744:	79 db       	rcall	.-2318   	; 0xe38 <pxPortInitialiseStack>
    1746:	99 83       	std	Y+1, r25	; 0x01
    1748:	88 83       	st	Y, r24
    174a:	e1 14       	cp	r14, r1
    174c:	f1 04       	cpc	r15, r1
    174e:	19 f0       	breq	.+6      	; 0x1756 <xTaskGenericCreate+0xde>
    1750:	f7 01       	movw	r30, r14
    1752:	d1 83       	std	Z+1, r29	; 0x01
    1754:	c0 83       	st	Z, r28
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	0f 92       	push	r0
    175c:	80 91 a1 0d 	lds	r24, 0x0DA1
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	80 93 a1 0d 	sts	0x0DA1, r24
    1766:	80 91 ef 0d 	lds	r24, 0x0DEF
    176a:	90 91 f0 0d 	lds	r25, 0x0DF0
    176e:	89 2b       	or	r24, r25
    1770:	69 f5       	brne	.+90     	; 0x17cc <xTaskGenericCreate+0x154>
    1772:	d0 93 f0 0d 	sts	0x0DF0, r29
    1776:	c0 93 ef 0d 	sts	0x0DEF, r28
    177a:	80 91 a1 0d 	lds	r24, 0x0DA1
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f5       	brne	.+104    	; 0x17ea <xTaskGenericCreate+0x172>
    1782:	8b ec       	ldi	r24, 0xCB	; 203
    1784:	9d e0       	ldi	r25, 0x0D	; 13
    1786:	ce da       	rcall	.-2660   	; 0xd24 <vListInitialise>
    1788:	84 ed       	ldi	r24, 0xD4	; 212
    178a:	9d e0       	ldi	r25, 0x0D	; 13
    178c:	cb da       	rcall	.-2666   	; 0xd24 <vListInitialise>
    178e:	8d ed       	ldi	r24, 0xDD	; 221
    1790:	9d e0       	ldi	r25, 0x0D	; 13
    1792:	c8 da       	rcall	.-2672   	; 0xd24 <vListInitialise>
    1794:	86 ee       	ldi	r24, 0xE6	; 230
    1796:	9d e0       	ldi	r25, 0x0D	; 13
    1798:	c5 da       	rcall	.-2678   	; 0xd24 <vListInitialise>
    179a:	82 ec       	ldi	r24, 0xC2	; 194
    179c:	9d e0       	ldi	r25, 0x0D	; 13
    179e:	c2 da       	rcall	.-2684   	; 0xd24 <vListInitialise>
    17a0:	89 eb       	ldi	r24, 0xB9	; 185
    17a2:	9d e0       	ldi	r25, 0x0D	; 13
    17a4:	bf da       	rcall	.-2690   	; 0xd24 <vListInitialise>
    17a6:	8c ea       	ldi	r24, 0xAC	; 172
    17a8:	9d e0       	ldi	r25, 0x0D	; 13
    17aa:	bc da       	rcall	.-2696   	; 0xd24 <vListInitialise>
    17ac:	83 ea       	ldi	r24, 0xA3	; 163
    17ae:	9d e0       	ldi	r25, 0x0D	; 13
    17b0:	b9 da       	rcall	.-2702   	; 0xd24 <vListInitialise>
    17b2:	82 ec       	ldi	r24, 0xC2	; 194
    17b4:	9d e0       	ldi	r25, 0x0D	; 13
    17b6:	90 93 b8 0d 	sts	0x0DB8, r25
    17ba:	80 93 b7 0d 	sts	0x0DB7, r24
    17be:	89 eb       	ldi	r24, 0xB9	; 185
    17c0:	9d e0       	ldi	r25, 0x0D	; 13
    17c2:	90 93 b6 0d 	sts	0x0DB6, r25
    17c6:	80 93 b5 0d 	sts	0x0DB5, r24
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <xTaskGenericCreate+0x172>
    17cc:	80 91 9d 0d 	lds	r24, 0x0D9D
    17d0:	81 11       	cpse	r24, r1
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <xTaskGenericCreate+0x172>
    17d4:	e0 91 ef 0d 	lds	r30, 0x0DEF
    17d8:	f0 91 f0 0d 	lds	r31, 0x0DF0
    17dc:	86 89       	ldd	r24, Z+22	; 0x16
    17de:	08 17       	cp	r16, r24
    17e0:	20 f0       	brcs	.+8      	; 0x17ea <xTaskGenericCreate+0x172>
    17e2:	d0 93 f0 0d 	sts	0x0DF0, r29
    17e6:	c0 93 ef 0d 	sts	0x0DEF, r28
    17ea:	80 91 99 0d 	lds	r24, 0x0D99
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 99 0d 	sts	0x0D99, r24
    17f4:	8e 89       	ldd	r24, Y+22	; 0x16
    17f6:	90 91 9e 0d 	lds	r25, 0x0D9E
    17fa:	98 17       	cp	r25, r24
    17fc:	10 f4       	brcc	.+4      	; 0x1802 <xTaskGenericCreate+0x18a>
    17fe:	80 93 9e 0d 	sts	0x0D9E, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 01       	movw	r18, r24
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	b5 01       	movw	r22, r10
    1818:	85 53       	subi	r24, 0x35	; 53
    181a:	92 4f       	sbci	r25, 0xF2	; 242
    181c:	95 da       	rcall	.-2774   	; 0xd48 <vListInsertEnd>
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	80 91 9d 0d 	lds	r24, 0x0D9D
    1826:	88 23       	and	r24, r24
    1828:	51 f0       	breq	.+20     	; 0x183e <xTaskGenericCreate+0x1c6>
    182a:	e0 91 ef 0d 	lds	r30, 0x0DEF
    182e:	f0 91 f0 0d 	lds	r31, 0x0DF0
    1832:	86 89       	ldd	r24, Z+22	; 0x16
    1834:	80 17       	cp	r24, r16
    1836:	28 f4       	brcc	.+10     	; 0x1842 <xTaskGenericCreate+0x1ca>
    1838:	b7 db       	rcall	.-2194   	; 0xfa8 <vPortYield>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <xTaskGenericCreate+0x1d0>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <xTaskGenericCreate+0x1d0>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <xTaskGenericCreate+0x1d0>
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	4f 90       	pop	r4
    1868:	08 95       	ret

0000186a <vTaskStartScheduler>:
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	a1 2c       	mov	r10, r1
    187a:	b1 2c       	mov	r11, r1
    187c:	c1 2c       	mov	r12, r1
    187e:	d1 2c       	mov	r13, r1
    1880:	e1 2c       	mov	r14, r1
    1882:	f1 2c       	mov	r15, r1
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	49 eb       	ldi	r20, 0xB9	; 185
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	66 e9       	ldi	r22, 0x96	; 150
    1890:	72 e0       	ldi	r23, 0x02	; 2
    1892:	8c e8       	ldi	r24, 0x8C	; 140
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	f0 de       	rcall	.-544    	; 0x1678 <xTaskGenericCreate>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	41 f4       	brne	.+16     	; 0x18ac <vTaskStartScheduler+0x42>
    189c:	f8 94       	cli
    189e:	80 93 9d 0d 	sts	0x0D9D, r24
    18a2:	10 92 a0 0d 	sts	0x0DA0, r1
    18a6:	10 92 9f 0d 	sts	0x0D9F, r1
    18aa:	38 db       	rcall	.-2448   	; 0xf1c <xPortStartScheduler>
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	08 95       	ret

000018bc <vTaskSuspendAll>:
    18bc:	80 91 98 0d 	lds	r24, 0x0D98
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 98 0d 	sts	0x0D98, r24
    18c6:	08 95       	ret

000018c8 <xTaskGetTickCount>:
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	0f 92       	push	r0
    18ce:	80 91 9f 0d 	lds	r24, 0x0D9F
    18d2:	90 91 a0 0d 	lds	r25, 0x0DA0
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	08 95       	ret

000018dc <xTaskIncrementTick>:
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	80 91 98 0d 	lds	r24, 0x0D98
    18f0:	81 11       	cpse	r24, r1
    18f2:	96 c0       	rjmp	.+300    	; 0x1a20 <xTaskIncrementTick+0x144>
    18f4:	80 91 9f 0d 	lds	r24, 0x0D9F
    18f8:	90 91 a0 0d 	lds	r25, 0x0DA0
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	90 93 a0 0d 	sts	0x0DA0, r25
    1902:	80 93 9f 0d 	sts	0x0D9F, r24
    1906:	e0 90 9f 0d 	lds	r14, 0x0D9F
    190a:	f0 90 a0 0d 	lds	r15, 0x0DA0
    190e:	e1 14       	cp	r14, r1
    1910:	f1 04       	cpc	r15, r1
    1912:	b1 f4       	brne	.+44     	; 0x1940 <xTaskIncrementTick+0x64>
    1914:	80 91 b7 0d 	lds	r24, 0x0DB7
    1918:	90 91 b8 0d 	lds	r25, 0x0DB8
    191c:	20 91 b5 0d 	lds	r18, 0x0DB5
    1920:	30 91 b6 0d 	lds	r19, 0x0DB6
    1924:	30 93 b8 0d 	sts	0x0DB8, r19
    1928:	20 93 b7 0d 	sts	0x0DB7, r18
    192c:	90 93 b6 0d 	sts	0x0DB6, r25
    1930:	80 93 b5 0d 	sts	0x0DB5, r24
    1934:	80 91 9a 0d 	lds	r24, 0x0D9A
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	80 93 9a 0d 	sts	0x0D9A, r24
    193e:	48 de       	rcall	.-880    	; 0x15d0 <prvResetNextTaskUnblockTime>
    1940:	80 91 49 02 	lds	r24, 0x0249
    1944:	90 91 4a 02 	lds	r25, 0x024A
    1948:	e8 16       	cp	r14, r24
    194a:	f9 06       	cpc	r15, r25
    194c:	08 f4       	brcc	.+2      	; 0x1950 <xTaskIncrementTick+0x74>
    194e:	51 c0       	rjmp	.+162    	; 0x19f2 <xTaskIncrementTick+0x116>
    1950:	d1 2c       	mov	r13, r1
    1952:	cc 24       	eor	r12, r12
    1954:	c3 94       	inc	r12
    1956:	01 c0       	rjmp	.+2      	; 0x195a <xTaskIncrementTick+0x7e>
    1958:	dc 2c       	mov	r13, r12
    195a:	e0 91 b7 0d 	lds	r30, 0x0DB7
    195e:	f0 91 b8 0d 	lds	r31, 0x0DB8
    1962:	80 81       	ld	r24, Z
    1964:	81 11       	cpse	r24, r1
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <xTaskIncrementTick+0x9a>
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	9f ef       	ldi	r25, 0xFF	; 255
    196c:	90 93 4a 02 	sts	0x024A, r25
    1970:	80 93 49 02 	sts	0x0249, r24
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <xTaskIncrementTick+0x118>
    1976:	e0 91 b7 0d 	lds	r30, 0x0DB7
    197a:	f0 91 b8 0d 	lds	r31, 0x0DB8
    197e:	05 80       	ldd	r0, Z+5	; 0x05
    1980:	f6 81       	ldd	r31, Z+6	; 0x06
    1982:	e0 2d       	mov	r30, r0
    1984:	c6 81       	ldd	r28, Z+6	; 0x06
    1986:	d7 81       	ldd	r29, Z+7	; 0x07
    1988:	2a 81       	ldd	r18, Y+2	; 0x02
    198a:	3b 81       	ldd	r19, Y+3	; 0x03
    198c:	e2 16       	cp	r14, r18
    198e:	f3 06       	cpc	r15, r19
    1990:	28 f4       	brcc	.+10     	; 0x199c <xTaskIncrementTick+0xc0>
    1992:	30 93 4a 02 	sts	0x024A, r19
    1996:	20 93 49 02 	sts	0x0249, r18
    199a:	2c c0       	rjmp	.+88     	; 0x19f4 <xTaskIncrementTick+0x118>
    199c:	8e 01       	movw	r16, r28
    199e:	0e 5f       	subi	r16, 0xFE	; 254
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	c8 01       	movw	r24, r16
    19a4:	23 da       	rcall	.-3002   	; 0xdec <uxListRemove>
    19a6:	8c 89       	ldd	r24, Y+20	; 0x14
    19a8:	9d 89       	ldd	r25, Y+21	; 0x15
    19aa:	89 2b       	or	r24, r25
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <xTaskIncrementTick+0xd8>
    19ae:	ce 01       	movw	r24, r28
    19b0:	0c 96       	adiw	r24, 0x0c	; 12
    19b2:	1c da       	rcall	.-3016   	; 0xdec <uxListRemove>
    19b4:	2e 89       	ldd	r18, Y+22	; 0x16
    19b6:	80 91 9e 0d 	lds	r24, 0x0D9E
    19ba:	82 17       	cp	r24, r18
    19bc:	10 f4       	brcc	.+4      	; 0x19c2 <xTaskIncrementTick+0xe6>
    19be:	20 93 9e 0d 	sts	0x0D9E, r18
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	c9 01       	movw	r24, r18
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	b8 01       	movw	r22, r16
    19d8:	85 53       	subi	r24, 0x35	; 53
    19da:	92 4f       	sbci	r25, 0xF2	; 242
    19dc:	b5 d9       	rcall	.-3222   	; 0xd48 <vListInsertEnd>
    19de:	e0 91 ef 0d 	lds	r30, 0x0DEF
    19e2:	f0 91 f0 0d 	lds	r31, 0x0DF0
    19e6:	9e 89       	ldd	r25, Y+22	; 0x16
    19e8:	86 89       	ldd	r24, Z+22	; 0x16
    19ea:	98 17       	cp	r25, r24
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <xTaskIncrementTick+0x114>
    19ee:	b4 cf       	rjmp	.-152    	; 0x1958 <xTaskIncrementTick+0x7c>
    19f0:	b4 cf       	rjmp	.-152    	; 0x195a <xTaskIncrementTick+0x7e>
    19f2:	d1 2c       	mov	r13, r1
    19f4:	e0 91 ef 0d 	lds	r30, 0x0DEF
    19f8:	f0 91 f0 0d 	lds	r31, 0x0DF0
    19fc:	86 89       	ldd	r24, Z+22	; 0x16
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	fc 01       	movw	r30, r24
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	8e 0f       	add	r24, r30
    1a10:	9f 1f       	adc	r25, r31
    1a12:	fc 01       	movw	r30, r24
    1a14:	e5 53       	subi	r30, 0x35	; 53
    1a16:	f2 4f       	sbci	r31, 0xF2	; 242
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	40 f4       	brcc	.+16     	; 0x1a2e <xTaskIncrementTick+0x152>
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <xTaskIncrementTick+0x156>
    1a20:	80 91 9c 0d 	lds	r24, 0x0D9C
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 9c 0d 	sts	0x0D9C, r24
    1a2a:	d1 2c       	mov	r13, r1
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <xTaskIncrementTick+0x156>
    1a2e:	dd 24       	eor	r13, r13
    1a30:	d3 94       	inc	r13
    1a32:	80 91 9b 0d 	lds	r24, 0x0D9B
    1a36:	88 23       	and	r24, r24
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <xTaskIncrementTick+0x162>
    1a3a:	dd 24       	eor	r13, r13
    1a3c:	d3 94       	inc	r13
    1a3e:	8d 2d       	mov	r24, r13
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	08 95       	ret

00001a52 <xTaskResumeAll>:
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	0f 92       	push	r0
    1a66:	80 91 98 0d 	lds	r24, 0x0D98
    1a6a:	81 50       	subi	r24, 0x01	; 1
    1a6c:	80 93 98 0d 	sts	0x0D98, r24
    1a70:	80 91 98 0d 	lds	r24, 0x0D98
    1a74:	81 11       	cpse	r24, r1
    1a76:	5c c0       	rjmp	.+184    	; 0x1b30 <xTaskResumeAll+0xde>
    1a78:	80 91 a1 0d 	lds	r24, 0x0DA1
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <xTaskResumeAll+0x30>
    1a80:	59 c0       	rjmp	.+178    	; 0x1b34 <xTaskResumeAll+0xe2>
    1a82:	0f 2e       	mov	r0, r31
    1a84:	fc ea       	ldi	r31, 0xAC	; 172
    1a86:	ef 2e       	mov	r14, r31
    1a88:	fd e0       	ldi	r31, 0x0D	; 13
    1a8a:	ff 2e       	mov	r15, r31
    1a8c:	f0 2d       	mov	r31, r0
    1a8e:	dd 24       	eor	r13, r13
    1a90:	d3 94       	inc	r13
    1a92:	2d c0       	rjmp	.+90     	; 0x1aee <xTaskResumeAll+0x9c>
    1a94:	e0 91 b1 0d 	lds	r30, 0x0DB1
    1a98:	f0 91 b2 0d 	lds	r31, 0x0DB2
    1a9c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a9e:	d7 81       	ldd	r29, Z+7	; 0x07
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	0c 96       	adiw	r24, 0x0c	; 12
    1aa4:	a3 d9       	rcall	.-3258   	; 0xdec <uxListRemove>
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	0e 5f       	subi	r16, 0xFE	; 254
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	c8 01       	movw	r24, r16
    1aae:	9e d9       	rcall	.-3268   	; 0xdec <uxListRemove>
    1ab0:	8e 89       	ldd	r24, Y+22	; 0x16
    1ab2:	90 91 9e 0d 	lds	r25, 0x0D9E
    1ab6:	98 17       	cp	r25, r24
    1ab8:	10 f4       	brcc	.+4      	; 0x1abe <xTaskResumeAll+0x6c>
    1aba:	80 93 9e 0d 	sts	0x0D9E, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 01       	movw	r18, r24
    1ac2:	22 0f       	add	r18, r18
    1ac4:	33 1f       	adc	r19, r19
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	22 0f       	add	r18, r18
    1acc:	33 1f       	adc	r19, r19
    1ace:	82 0f       	add	r24, r18
    1ad0:	93 1f       	adc	r25, r19
    1ad2:	b8 01       	movw	r22, r16
    1ad4:	85 53       	subi	r24, 0x35	; 53
    1ad6:	92 4f       	sbci	r25, 0xF2	; 242
    1ad8:	37 d9       	rcall	.-3474   	; 0xd48 <vListInsertEnd>
    1ada:	e0 91 ef 0d 	lds	r30, 0x0DEF
    1ade:	f0 91 f0 0d 	lds	r31, 0x0DF0
    1ae2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ae4:	86 89       	ldd	r24, Z+22	; 0x16
    1ae6:	98 17       	cp	r25, r24
    1ae8:	10 f0       	brcs	.+4      	; 0x1aee <xTaskResumeAll+0x9c>
    1aea:	d0 92 9b 0d 	sts	0x0D9B, r13
    1aee:	f7 01       	movw	r30, r14
    1af0:	80 81       	ld	r24, Z
    1af2:	81 11       	cpse	r24, r1
    1af4:	cf cf       	rjmp	.-98     	; 0x1a94 <xTaskResumeAll+0x42>
    1af6:	80 91 9c 0d 	lds	r24, 0x0D9C
    1afa:	88 23       	and	r24, r24
    1afc:	91 f0       	breq	.+36     	; 0x1b22 <xTaskResumeAll+0xd0>
    1afe:	80 91 9c 0d 	lds	r24, 0x0D9C
    1b02:	88 23       	and	r24, r24
    1b04:	71 f0       	breq	.+28     	; 0x1b22 <xTaskResumeAll+0xd0>
    1b06:	c1 e0       	ldi	r28, 0x01	; 1
    1b08:	e9 de       	rcall	.-558    	; 0x18dc <xTaskIncrementTick>
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	c0 93 9b 0d 	sts	0x0D9B, r28
    1b10:	80 91 9c 0d 	lds	r24, 0x0D9C
    1b14:	81 50       	subi	r24, 0x01	; 1
    1b16:	80 93 9c 0d 	sts	0x0D9C, r24
    1b1a:	80 91 9c 0d 	lds	r24, 0x0D9C
    1b1e:	81 11       	cpse	r24, r1
    1b20:	f3 cf       	rjmp	.-26     	; 0x1b08 <xTaskResumeAll+0xb6>
    1b22:	80 91 9b 0d 	lds	r24, 0x0D9B
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	39 f4       	brne	.+14     	; 0x1b38 <xTaskResumeAll+0xe6>
    1b2a:	3e da       	rcall	.-2948   	; 0xfa8 <vPortYield>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <xTaskResumeAll+0xe8>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	03 c0       	rjmp	.+6      	; 0x1b3a <xTaskResumeAll+0xe8>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <xTaskResumeAll+0xe8>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	08 95       	ret

00001b4e <vTaskDelay>:
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	ec 01       	movw	r28, r24
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	91 f0       	breq	.+36     	; 0x1b7c <vTaskDelay+0x2e>
    1b58:	b1 de       	rcall	.-670    	; 0x18bc <vTaskSuspendAll>
    1b5a:	80 91 9f 0d 	lds	r24, 0x0D9F
    1b5e:	90 91 a0 0d 	lds	r25, 0x0DA0
    1b62:	c8 0f       	add	r28, r24
    1b64:	d9 1f       	adc	r29, r25
    1b66:	80 91 ef 0d 	lds	r24, 0x0DEF
    1b6a:	90 91 f0 0d 	lds	r25, 0x0DF0
    1b6e:	02 96       	adiw	r24, 0x02	; 2
    1b70:	3d d9       	rcall	.-3462   	; 0xdec <uxListRemove>
    1b72:	ce 01       	movw	r24, r28
    1b74:	4c dd       	rcall	.-1384   	; 0x160e <prvAddCurrentTaskToDelayedList>
    1b76:	6d df       	rcall	.-294    	; 0x1a52 <xTaskResumeAll>
    1b78:	81 11       	cpse	r24, r1
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <vTaskDelay+0x30>
    1b7c:	15 da       	rcall	.-3030   	; 0xfa8 <vPortYield>
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <vTaskSwitchContext>:
    1b84:	80 91 98 0d 	lds	r24, 0x0D98
    1b88:	88 23       	and	r24, r24
    1b8a:	21 f0       	breq	.+8      	; 0x1b94 <vTaskSwitchContext+0x10>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	80 93 9b 0d 	sts	0x0D9B, r24
    1b92:	08 95       	ret
    1b94:	10 92 9b 0d 	sts	0x0D9B, r1
    1b98:	a0 91 ef 0d 	lds	r26, 0x0DEF
    1b9c:	b0 91 f0 0d 	lds	r27, 0x0DF0
    1ba0:	e0 91 ef 0d 	lds	r30, 0x0DEF
    1ba4:	f0 91 f0 0d 	lds	r31, 0x0DF0
    1ba8:	2d 91       	ld	r18, X+
    1baa:	3c 91       	ld	r19, X
    1bac:	87 89       	ldd	r24, Z+23	; 0x17
    1bae:	90 8d       	ldd	r25, Z+24	; 0x18
    1bb0:	82 17       	cp	r24, r18
    1bb2:	93 07       	cpc	r25, r19
    1bb4:	58 f0       	brcs	.+22     	; 0x1bcc <vTaskSwitchContext+0x48>
    1bb6:	60 91 ef 0d 	lds	r22, 0x0DEF
    1bba:	70 91 f0 0d 	lds	r23, 0x0DF0
    1bbe:	80 91 ef 0d 	lds	r24, 0x0DEF
    1bc2:	90 91 f0 0d 	lds	r25, 0x0DF0
    1bc6:	67 5e       	subi	r22, 0xE7	; 231
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	43 d3       	rcall	.+1670   	; 0x2252 <vApplicationStackOverflowHook>
    1bcc:	80 91 9e 0d 	lds	r24, 0x0D9E
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	8e 0f       	add	r24, r30
    1be2:	9f 1f       	adc	r25, r31
    1be4:	fc 01       	movw	r30, r24
    1be6:	e5 53       	subi	r30, 0x35	; 53
    1be8:	f2 4f       	sbci	r31, 0xF2	; 242
    1bea:	80 81       	ld	r24, Z
    1bec:	81 11       	cpse	r24, r1
    1bee:	17 c0       	rjmp	.+46     	; 0x1c1e <vTaskSwitchContext+0x9a>
    1bf0:	80 91 9e 0d 	lds	r24, 0x0D9E
    1bf4:	81 50       	subi	r24, 0x01	; 1
    1bf6:	80 93 9e 0d 	sts	0x0D9E, r24
    1bfa:	80 91 9e 0d 	lds	r24, 0x0D9E
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	fc 01       	movw	r30, r24
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	ee 0f       	add	r30, r30
    1c08:	ff 1f       	adc	r31, r31
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	8e 0f       	add	r24, r30
    1c10:	9f 1f       	adc	r25, r31
    1c12:	fc 01       	movw	r30, r24
    1c14:	e5 53       	subi	r30, 0x35	; 53
    1c16:	f2 4f       	sbci	r31, 0xF2	; 242
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 23       	and	r24, r24
    1c1c:	49 f3       	breq	.-46     	; 0x1bf0 <vTaskSwitchContext+0x6c>
    1c1e:	e0 91 9e 0d 	lds	r30, 0x0D9E
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	cf 01       	movw	r24, r30
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	e8 0f       	add	r30, r24
    1c34:	f9 1f       	adc	r31, r25
    1c36:	e5 53       	subi	r30, 0x35	; 53
    1c38:	f2 4f       	sbci	r31, 0xF2	; 242
    1c3a:	a1 81       	ldd	r26, Z+1	; 0x01
    1c3c:	b2 81       	ldd	r27, Z+2	; 0x02
    1c3e:	12 96       	adiw	r26, 0x02	; 2
    1c40:	0d 90       	ld	r0, X+
    1c42:	bc 91       	ld	r27, X
    1c44:	a0 2d       	mov	r26, r0
    1c46:	b2 83       	std	Z+2, r27	; 0x02
    1c48:	a1 83       	std	Z+1, r26	; 0x01
    1c4a:	cf 01       	movw	r24, r30
    1c4c:	03 96       	adiw	r24, 0x03	; 3
    1c4e:	a8 17       	cp	r26, r24
    1c50:	b9 07       	cpc	r27, r25
    1c52:	31 f4       	brne	.+12     	; 0x1c60 <vTaskSwitchContext+0xdc>
    1c54:	12 96       	adiw	r26, 0x02	; 2
    1c56:	8d 91       	ld	r24, X+
    1c58:	9c 91       	ld	r25, X
    1c5a:	13 97       	sbiw	r26, 0x03	; 3
    1c5c:	92 83       	std	Z+2, r25	; 0x02
    1c5e:	81 83       	std	Z+1, r24	; 0x01
    1c60:	01 80       	ldd	r0, Z+1	; 0x01
    1c62:	f2 81       	ldd	r31, Z+2	; 0x02
    1c64:	e0 2d       	mov	r30, r0
    1c66:	86 81       	ldd	r24, Z+6	; 0x06
    1c68:	97 81       	ldd	r25, Z+7	; 0x07
    1c6a:	90 93 f0 0d 	sts	0x0DF0, r25
    1c6e:	80 93 ef 0d 	sts	0x0DEF, r24
    1c72:	08 95       	ret

00001c74 <vTaskPlaceOnEventList>:
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	eb 01       	movw	r28, r22
    1c7a:	60 91 ef 0d 	lds	r22, 0x0DEF
    1c7e:	70 91 f0 0d 	lds	r23, 0x0DF0
    1c82:	64 5f       	subi	r22, 0xF4	; 244
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	81 d8       	rcall	.-3838   	; 0xd8a <vListInsert>
    1c88:	80 91 ef 0d 	lds	r24, 0x0DEF
    1c8c:	90 91 f0 0d 	lds	r25, 0x0DF0
    1c90:	02 96       	adiw	r24, 0x02	; 2
    1c92:	ac d8       	rcall	.-3752   	; 0xdec <uxListRemove>
    1c94:	80 91 9f 0d 	lds	r24, 0x0D9F
    1c98:	90 91 a0 0d 	lds	r25, 0x0DA0
    1c9c:	8c 0f       	add	r24, r28
    1c9e:	9d 1f       	adc	r25, r29
    1ca0:	b6 dc       	rcall	.-1684   	; 0x160e <prvAddCurrentTaskToDelayedList>
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <xTaskRemoveFromEventList>:
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	15 96       	adiw	r26, 0x05	; 5
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	16 97       	sbiw	r26, 0x06	; 6
    1cba:	c6 81       	ldd	r28, Z+6	; 0x06
    1cbc:	d7 81       	ldd	r29, Z+7	; 0x07
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	04 5f       	subi	r16, 0xF4	; 244
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	92 d8       	rcall	.-3804   	; 0xdec <uxListRemove>
    1cc8:	80 91 98 0d 	lds	r24, 0x0D98
    1ccc:	81 11       	cpse	r24, r1
    1cce:	1a c0       	rjmp	.+52     	; 0x1d04 <xTaskRemoveFromEventList+0x5c>
    1cd0:	0a 50       	subi	r16, 0x0A	; 10
    1cd2:	11 09       	sbc	r17, r1
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	8a d8       	rcall	.-3820   	; 0xdec <uxListRemove>
    1cd8:	8e 89       	ldd	r24, Y+22	; 0x16
    1cda:	90 91 9e 0d 	lds	r25, 0x0D9E
    1cde:	98 17       	cp	r25, r24
    1ce0:	10 f4       	brcc	.+4      	; 0x1ce6 <xTaskRemoveFromEventList+0x3e>
    1ce2:	80 93 9e 0d 	sts	0x0D9E, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9c 01       	movw	r18, r24
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	82 0f       	add	r24, r18
    1cf8:	93 1f       	adc	r25, r19
    1cfa:	b8 01       	movw	r22, r16
    1cfc:	85 53       	subi	r24, 0x35	; 53
    1cfe:	92 4f       	sbci	r25, 0xF2	; 242
    1d00:	23 d8       	rcall	.-4026   	; 0xd48 <vListInsertEnd>
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <xTaskRemoveFromEventList+0x64>
    1d04:	b8 01       	movw	r22, r16
    1d06:	8c ea       	ldi	r24, 0xAC	; 172
    1d08:	9d e0       	ldi	r25, 0x0D	; 13
    1d0a:	1e d8       	rcall	.-4036   	; 0xd48 <vListInsertEnd>
    1d0c:	e0 91 ef 0d 	lds	r30, 0x0DEF
    1d10:	f0 91 f0 0d 	lds	r31, 0x0DF0
    1d14:	9e 89       	ldd	r25, Y+22	; 0x16
    1d16:	86 89       	ldd	r24, Z+22	; 0x16
    1d18:	89 17       	cp	r24, r25
    1d1a:	20 f4       	brcc	.+8      	; 0x1d24 <xTaskRemoveFromEventList+0x7c>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	80 93 9b 0d 	sts	0x0D9B, r24
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <xTaskRemoveFromEventList+0x7e>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1d30:	20 91 9a 0d 	lds	r18, 0x0D9A
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1d38:	20 91 9f 0d 	lds	r18, 0x0D9F
    1d3c:	30 91 a0 0d 	lds	r19, 0x0DA0
    1d40:	32 83       	std	Z+2, r19	; 0x02
    1d42:	21 83       	std	Z+1, r18	; 0x01
    1d44:	08 95       	ret

00001d46 <xTaskCheckForTimeOut>:
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1d4c:	20 91 9f 0d 	lds	r18, 0x0D9F
    1d50:	30 91 a0 0d 	lds	r19, 0x0DA0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1d54:	40 91 9a 0d 	lds	r20, 0x0D9A
    1d58:	dc 01       	movw	r26, r24
    1d5a:	5c 91       	ld	r21, X
    1d5c:	54 17       	cp	r21, r20
    1d5e:	39 f0       	breq	.+14     	; 0x1d6e <xTaskCheckForTimeOut+0x28>
    1d60:	11 96       	adiw	r26, 0x01	; 1
    1d62:	4d 91       	ld	r20, X+
    1d64:	5c 91       	ld	r21, X
    1d66:	12 97       	sbiw	r26, 0x02	; 2
    1d68:	24 17       	cp	r18, r20
    1d6a:	35 07       	cpc	r19, r21
    1d6c:	c0 f4       	brcc	.+48     	; 0x1d9e <xTaskCheckForTimeOut+0x58>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1d6e:	dc 01       	movw	r26, r24
    1d70:	11 96       	adiw	r26, 0x01	; 1
    1d72:	ed 91       	ld	r30, X+
    1d74:	fc 91       	ld	r31, X
    1d76:	12 97       	sbiw	r26, 0x02	; 2
    1d78:	db 01       	movw	r26, r22
    1d7a:	4d 91       	ld	r20, X+
    1d7c:	5c 91       	ld	r21, X
    1d7e:	d9 01       	movw	r26, r18
    1d80:	ae 1b       	sub	r26, r30
    1d82:	bf 0b       	sbc	r27, r31
    1d84:	a4 17       	cp	r26, r20
    1d86:	b5 07       	cpc	r27, r21
    1d88:	60 f4       	brcc	.+24     	; 0x1da2 <xTaskCheckForTimeOut+0x5c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1d8a:	e2 1b       	sub	r30, r18
    1d8c:	f3 0b       	sbc	r31, r19
    1d8e:	4e 0f       	add	r20, r30
    1d90:	5f 1f       	adc	r21, r31
    1d92:	fb 01       	movw	r30, r22
    1d94:	51 83       	std	Z+1, r21	; 0x01
    1d96:	40 83       	st	Z, r20
			vTaskSetTimeOutState( pxTimeOut );
    1d98:	cb df       	rcall	.-106    	; 0x1d30 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <xTaskCheckForTimeOut+0x5e>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1da8:	08 95       	ret

00001daa <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	80 93 9b 0d 	sts	0x0D9B, r24
    1db0:	08 95       	ret

00001db2 <bt_status_call_back>:
uint8_t charCount=0;
char sendValue[5] = {};
int tick;

void bt_status_call_back(uint8_t status) {
	if (status == DIALOG_OK_STOP) {
    1db2:	8f 3f       	cpi	r24, 0xFF	; 255
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <bt_status_call_back+0xa>
		bt_initialised = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	80 93 f7 0d 	sts	0x0DF7, r24
    1dbc:	08 95       	ret

00001dbe <vjustATask>:

	/* Cycle for ever, one cycle each time the goal line is passed. */
	for( ;; )
	{
		// Wait for goal line is passed
		xSemaphoreTake(goal_line_semaphore, portMAX_DELAY);
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	4f ef       	ldi	r20, 0xFF	; 255
    1dc2:	5f ef       	ldi	r21, 0xFF	; 255
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	80 91 fb 0d 	lds	r24, 0x0DFB
    1dcc:	90 91 fc 0d 	lds	r25, 0x0DFC
    1dd0:	63 db       	rcall	.-2362   	; 0x1498 <xQueueGenericReceive>
    1dd2:	f5 cf       	rjmp	.-22     	; 0x1dbe <vjustATask>

00001dd4 <learn>:
				break;
		}
	}
}

void learn() {
    1dd4:	8f 92       	push	r8
    1dd6:	9f 92       	push	r9
    1dd8:	af 92       	push	r10
    1dda:	bf 92       	push	r11
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	64 97       	sbiw	r28, 0x14	; 20
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	0f 2e       	mov	r0, r31
    1dfe:	f4 e6       	ldi	r31, 0x64	; 100
    1e00:	ef 2e       	mov	r14, r31
    1e02:	f1 2c       	mov	r15, r1
    1e04:	f0 2d       	mov	r31, r0
			uint16_t raw_x = get_raw_x_accel();
			uint16_t raw_y = get_raw_y_accel();
			uint16_t raw_z = get_raw_z_accel();
			//uint16_t raw_rx = get_raw_x_rotation();
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
    1e06:	0f 2e       	mov	r0, r31
    1e08:	fb e9       	ldi	r31, 0x9B	; 155
    1e0a:	cf 2e       	mov	r12, r31
    1e0c:	f2 e0       	ldi	r31, 0x02	; 2
    1e0e:	df 2e       	mov	r13, r31
    1e10:	f0 2d       	mov	r31, r0
    1e12:	8e 01       	movw	r16, r28
    1e14:	0f 5f       	subi	r16, 0xFF	; 255
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	char buf[20];
	
	for (i= 0; i<100; i++)
	{
			uint16_t raw_x = get_raw_x_accel();
    1e18:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
    1e1c:	b8 2e       	mov	r11, r24
    1e1e:	a9 2e       	mov	r10, r25
			uint16_t raw_y = get_raw_y_accel();
    1e20:	0e 94 7f 03 	call	0x6fe	; 0x6fe <get_raw_y_accel>
    1e24:	98 2e       	mov	r9, r24
    1e26:	89 2e       	mov	r8, r25
			uint16_t raw_z = get_raw_z_accel();
    1e28:	0e 94 87 03 	call	0x70e	; 0x70e <get_raw_z_accel>
			//uint16_t raw_rx = get_raw_x_rotation();
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
    1e2c:	9f 93       	push	r25
    1e2e:	8f 93       	push	r24
    1e30:	8f 92       	push	r8
    1e32:	9f 92       	push	r9
    1e34:	af 92       	push	r10
    1e36:	bf 92       	push	r11
    1e38:	df 92       	push	r13
    1e3a:	cf 92       	push	r12
    1e3c:	1f 93       	push	r17
    1e3e:	0f 93       	push	r16
    1e40:	71 d7       	rcall	.+3810   	; 0x2d24 <sprintf>
			bt_send_bytes((uint8_t *)buf, strlen(buf));
    1e42:	f8 01       	movw	r30, r16
    1e44:	01 90       	ld	r0, Z+
    1e46:	00 20       	and	r0, r0
    1e48:	e9 f7       	brne	.-6      	; 0x1e44 <learn+0x70>
    1e4a:	31 97       	sbiw	r30, 0x01	; 1
    1e4c:	bf 01       	movw	r22, r30
    1e4e:	60 1b       	sub	r22, r16
    1e50:	71 0b       	sbc	r23, r17
    1e52:	c8 01       	movw	r24, r16
    1e54:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
			vTaskDelay( 100/ portTICK_PERIOD_MS);
    1e58:	84 e6       	ldi	r24, 0x64	; 100
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	78 de       	rcall	.-784    	; 0x1b4e <vTaskDelay>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	e8 1a       	sub	r14, r24
    1e62:	f1 08       	sbc	r15, r1

void learn() {
	int i;
	char buf[20];
	
	for (i= 0; i<100; i++)
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	e1 14       	cp	r14, r1
    1e70:	f1 04       	cpc	r15, r1
    1e72:	91 f6       	brne	.-92     	; 0x1e18 <learn+0x44>
			//uint16_t raw_ry = get_raw_y_rotation();
			sprintf(buf, "%4d %4d %4d", raw_x, raw_y, raw_z);
			bt_send_bytes((uint8_t *)buf, strlen(buf));
			vTaskDelay( 100/ portTICK_PERIOD_MS);
	}
}
    1e74:	64 96       	adiw	r28, 0x14	; 20
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	ef 90       	pop	r14
    1e8c:	df 90       	pop	r13
    1e8e:	cf 90       	pop	r12
    1e90:	bf 90       	pop	r11
    1e92:	af 90       	pop	r10
    1e94:	9f 90       	pop	r9
    1e96:	8f 90       	pop	r8
    1e98:	08 95       	ret

00001e9a <plannedTrack>:

void plannedTrack() {
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
	uint16_t count = 0;
	//uint16_t prog[200]= {0,100,200,200};
	uint16_t tacho = get_tacho_count();
    1ea6:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
    1eaa:	ec 01       	movw	r28, r24
	//set_motor_speed(60);
	while (tacho < 800)
    1eac:	c0 32       	cpi	r28, 0x20	; 32
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	d8 07       	cpc	r29, r24
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <plannedTrack+0x1c>
    1eb4:	41 c0       	rjmp	.+130    	; 0x1f38 <plannedTrack+0x9e>
			vTaskDelay( 100/ portTICK_PERIOD_MS);
	}
}

void plannedTrack() {
	uint16_t count = 0;
    1eb6:	00 e0       	ldi	r16, 0x00	; 0
    1eb8:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t prog[200]= {0,100,200,200};
	uint16_t tacho = get_tacho_count();
	//set_motor_speed(60);
	while (tacho < 800)
	{
		if (tacho >= accData[count])
    1eba:	f8 01       	movw	r30, r16
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	e5 5b       	subi	r30, 0xB5	; 181
    1ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	c8 17       	cp	r28, r24
    1eca:	d9 07       	cpc	r29, r25
    1ecc:	68 f1       	brcs	.+90     	; 0x1f28 <plannedTrack+0x8e>
		{
			if (accData[count+1] <= 100)
    1ece:	78 01       	movw	r14, r16
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	e8 1a       	sub	r14, r24
    1ed4:	f8 0a       	sbc	r15, r24
    1ed6:	f7 01       	movw	r30, r14
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	e5 5b       	subi	r30, 0xB5	; 181
    1ede:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	85 36       	cpi	r24, 0x65	; 101
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	60 f4       	brcc	.+24     	; 0x1f02 <plannedTrack+0x68>
			{
				set_brake(0);
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				set_motor_speed(accData[count+1]);
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	ee 0f       	add	r30, r30
    1ef4:	ff 1f       	adc	r31, r31
    1ef6:	e5 5b       	subi	r30, 0xB5	; 181
    1ef8:	fd 4f       	sbci	r31, 0xFD	; 253
    1efa:	80 81       	ld	r24, Z
    1efc:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
    1f00:	09 c0       	rjmp	.+18     	; 0x1f14 <plannedTrack+0x7a>
			} else if (accData[count+1] > 100) {
				set_brake(accData[count+1]-100);
    1f02:	84 56       	subi	r24, 0x64	; 100
    1f04:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				set_brake_light(1);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				set_motor_speed(0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
			} else {
				set_motor_speed(0);
			}
			nextVal= accData[count+1];
    1f14:	f7 01       	movw	r30, r14
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	e5 5b       	subi	r30, 0xB5	; 181
    1f1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 93 f8 0d 	sts	0x0DF8, r24
			count = count + 2;
    1f24:	0e 5f       	subi	r16, 0xFE	; 254
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		tacho = tacho + get_tacho_count();
    1f28:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
    1f2c:	c8 0f       	add	r28, r24
    1f2e:	d9 1f       	adc	r29, r25
void plannedTrack() {
	uint16_t count = 0;
	//uint16_t prog[200]= {0,100,200,200};
	uint16_t tacho = get_tacho_count();
	//set_motor_speed(60);
	while (tacho < 800)
    1f30:	c0 32       	cpi	r28, 0x20	; 32
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	d8 07       	cpc	r29, r24
    1f36:	08 f2       	brcs	.-126    	; 0x1eba <plannedTrack+0x20>
			nextVal= accData[count+1];
			count = count + 2;
		}
		tacho = tacho + get_tacho_count();
	}
	set_brake_light(0);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
	set_motor_speed(0);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
	count +1;
}
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	08 95       	ret

00001f52 <bt_com_call_back>:
		} else if (status == DIALOG_ERROR_STOP) {
		// What to do??
	}
}

void bt_com_call_back(uint8_t byte) {
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	a8 97       	sbiw	r28, 0x28	; 40
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
	char buf[40];
	
	if (bt_initialised) {
    1f76:	90 91 f7 0d 	lds	r25, 0x0DF7
    1f7a:	99 23       	and	r25, r25
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <bt_com_call_back+0x2e>
    1f7e:	e8 c0       	rjmp	.+464    	; 0x2150 <bt_com_call_back+0x1fe>
		switch (byte) {
    1f80:	48 2f       	mov	r20, r24
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	fa 01       	movw	r30, r20
    1f86:	e1 54       	subi	r30, 0x41	; 65
    1f88:	f1 09       	sbc	r31, r1
    1f8a:	e6 32       	cpi	r30, 0x26	; 38
    1f8c:	f1 05       	cpc	r31, r1
    1f8e:	08 f0       	brcs	.+2      	; 0x1f92 <bt_com_call_back+0x40>
    1f90:	bf c0       	rjmp	.+382    	; 0x2110 <bt_com_call_back+0x1be>
    1f92:	ea 59       	subi	r30, 0x9A	; 154
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	48 c5       	rjmp	.+2704   	; 0x2a28 <__tablejump2__>
			case 'a': {
				set_head_light(0);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0e 94 76 02 	call	0x4ec	; 0x4ec <set_head_light>
				break;
    1f9e:	d8 c0       	rjmp	.+432    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'A': {
				set_head_light(1);
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	0e 94 76 02 	call	0x4ec	; 0x4ec <set_head_light>
				break;
    1fa6:	d4 c0       	rjmp	.+424    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'b': {
				set_brake_light(0);
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				break;
    1fae:	d0 c0       	rjmp	.+416    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'B': {
				set_brake_light(1);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <set_brake_light>
				break;
    1fb6:	cc c0       	rjmp	.+408    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'c': {
				set_horn(0);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	0e 94 70 02 	call	0x4e0	; 0x4e0 <set_horn>
				break;
    1fbe:	c8 c0       	rjmp	.+400    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'C': {
				set_horn(1);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <set_horn>
				break;
    1fc6:	c4 c0       	rjmp	.+392    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'd': {
				set_motor_speed(0);
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				break;
    1fce:	c0 c0       	rjmp	.+384    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'D': {
				set_motor_speed(65);
    1fd0:	81 e4       	ldi	r24, 0x41	; 65
    1fd2:	0e 94 82 02 	call	0x504	; 0x504 <set_motor_speed>
				break;
    1fd6:	bc c0       	rjmp	.+376    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'e': {
				set_brake(0);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				break;
    1fde:	b8 c0       	rjmp	.+368    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'E': {
				set_brake(100);
    1fe0:	84 e6       	ldi	r24, 0x64	; 100
    1fe2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_brake>
				break;
    1fe6:	b4 c0       	rjmp	.+360    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'F': {
				uint16_t raw_x = get_raw_x_accel();
    1fe8:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
    1fec:	18 2f       	mov	r17, r24
    1fee:	09 2f       	mov	r16, r25
				uint16_t raw_y = get_raw_y_accel();
    1ff0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <get_raw_y_accel>
    1ff4:	f8 2e       	mov	r15, r24
    1ff6:	e9 2e       	mov	r14, r25
				tick = xTaskGetTickCount();
    1ff8:	67 dc       	rcall	.-1842   	; 0x18c8 <xTaskGetTickCount>
    1ffa:	90 93 06 0e 	sts	0x0E06, r25
    1ffe:	80 93 05 0e 	sts	0x0E05, r24
				//uint16_t raw_z = get_raw_z_accel();
				uint16_t raw_rx = get_raw_x_rotation();
    2002:	0e 94 8f 03 	call	0x71e	; 0x71e <get_raw_x_rotation>
    2006:	d8 2e       	mov	r13, r24
    2008:	c9 2e       	mov	r12, r25
				uint16_t raw_ry = get_raw_y_rotation();
    200a:	0e 94 97 03 	call	0x72e	; 0x72e <get_raw_y_rotation>
    200e:	b8 2e       	mov	r11, r24
    2010:	a9 2e       	mov	r10, r25
				uint16_t tacho = get_tacho_count();
    2012:	0e 94 9f 03 	call	0x73e	; 0x73e <get_tacho_count>
				sprintf(buf, "x%4dy%4dz%4dr%4dq%4dt%4d", raw_x, raw_y, tick, raw_rx, raw_ry, tacho);
    2016:	9f 93       	push	r25
    2018:	8f 93       	push	r24
    201a:	af 92       	push	r10
    201c:	bf 92       	push	r11
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	80 91 06 0e 	lds	r24, 0x0E06
    2026:	8f 93       	push	r24
    2028:	80 91 05 0e 	lds	r24, 0x0E05
    202c:	8f 93       	push	r24
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	87 ea       	ldi	r24, 0xA7	; 167
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	9f 93       	push	r25
    203c:	8f 93       	push	r24
    203e:	8e 01       	movw	r16, r28
    2040:	0f 5f       	subi	r16, 0xFF	; 255
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	1f 93       	push	r17
    2046:	0f 93       	push	r16
    2048:	6d d6       	rcall	.+3290   	; 0x2d24 <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    204a:	f8 01       	movw	r30, r16
    204c:	01 90       	ld	r0, Z+
    204e:	00 20       	and	r0, r0
    2050:	e9 f7       	brne	.-6      	; 0x204c <bt_com_call_back+0xfa>
    2052:	31 97       	sbiw	r30, 0x01	; 1
    2054:	bf 01       	movw	r22, r30
    2056:	60 1b       	sub	r22, r16
    2058:	71 0b       	sbc	r23, r17
    205a:	c8 01       	movw	r24, r16
    205c:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	72 c0       	rjmp	.+228    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'f': {
				learn();
    206c:	b3 de       	rcall	.-666    	; 0x1dd4 <learn>
				break;
    206e:	70 c0       	rjmp	.+224    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'G': {
				uint16_t raw_x = get_raw_x_rotation();
    2070:	0e 94 8f 03 	call	0x71e	; 0x71e <get_raw_x_rotation>
    2074:	18 2f       	mov	r17, r24
    2076:	09 2f       	mov	r16, r25
				uint16_t raw_y = get_raw_y_rotation();
    2078:	0e 94 97 03 	call	0x72e	; 0x72e <get_raw_y_rotation>
    207c:	f8 2e       	mov	r15, r24
    207e:	e9 2e       	mov	r14, r25
				uint16_t raw_xa = get_raw_x_accel();
    2080:	0e 94 77 03 	call	0x6ee	; 0x6ee <get_raw_x_accel>
				sprintf(buf, "x%4d y%4d x%4d", raw_x, raw_y, raw_xa);
    2084:	9f 93       	push	r25
    2086:	8f 93       	push	r24
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	80 ec       	ldi	r24, 0xC0	; 192
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	9f 93       	push	r25
    2096:	8f 93       	push	r24
    2098:	8e 01       	movw	r16, r28
    209a:	0f 5f       	subi	r16, 0xFF	; 255
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	1f 93       	push	r17
    20a0:	0f 93       	push	r16
    20a2:	40 d6       	rcall	.+3200   	; 0x2d24 <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    20a4:	f8 01       	movw	r30, r16
    20a6:	01 90       	ld	r0, Z+
    20a8:	00 20       	and	r0, r0
    20aa:	e9 f7       	brne	.-6      	; 0x20a6 <bt_com_call_back+0x154>
    20ac:	31 97       	sbiw	r30, 0x01	; 1
    20ae:	bf 01       	movw	r22, r30
    20b0:	60 1b       	sub	r22, r16
    20b2:	71 0b       	sbc	r23, r17
    20b4:	c8 01       	movw	r24, r16
    20b6:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	45 c0       	rjmp	.+138    	; 0x2150 <bt_com_call_back+0x1fe>
			}
			case 'N': {
				tick = xTaskGetTickCount();
    20c6:	00 dc       	rcall	.-2048   	; 0x18c8 <xTaskGetTickCount>
    20c8:	80 93 05 0e 	sts	0x0E05, r24
    20cc:	90 93 06 0e 	sts	0x0E06, r25
				sprintf(buf, "%d", tick);
    20d0:	9f 93       	push	r25
    20d2:	8f 93       	push	r24
    20d4:	8f ec       	ldi	r24, 0xCF	; 207
    20d6:	92 e0       	ldi	r25, 0x02	; 2
    20d8:	9f 93       	push	r25
    20da:	8f 93       	push	r24
    20dc:	8e 01       	movw	r16, r28
    20de:	0f 5f       	subi	r16, 0xFF	; 255
    20e0:	1f 4f       	sbci	r17, 0xFF	; 255
    20e2:	1f 93       	push	r17
    20e4:	0f 93       	push	r16
    20e6:	1e d6       	rcall	.+3132   	; 0x2d24 <sprintf>
				bt_send_bytes((uint8_t *)buf, strlen(buf));
    20e8:	f8 01       	movw	r30, r16
    20ea:	01 90       	ld	r0, Z+
    20ec:	00 20       	and	r0, r0
    20ee:	e9 f7       	brne	.-6      	; 0x20ea <bt_com_call_back+0x198>
    20f0:	31 97       	sbiw	r30, 0x01	; 1
    20f2:	bf 01       	movw	r22, r30
    20f4:	60 1b       	sub	r22, r16
    20f6:	71 0b       	sbc	r23, r17
    20f8:	c8 01       	movw	r24, r16
    20fa:	0e 94 bf 03 	call	0x77e	; 0x77e <bt_send_bytes>
				break;
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	22 c0       	rjmp	.+68     	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			case 'P': {
				plannedTrack();
    210c:	c6 de       	rcall	.-628    	; 0x1e9a <plannedTrack>
				break;
    210e:	20 c0       	rjmp	.+64     	; 0x2150 <bt_com_call_back+0x1fe>
			}
			
			default:
				sendValue[charCount] = byte;
    2110:	90 91 f6 0d 	lds	r25, 0x0DF6
    2114:	e9 2f       	mov	r30, r25
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	ef 50       	subi	r30, 0x0F	; 15
    211a:	f2 4f       	sbci	r31, 0xF2	; 242
    211c:	80 83       	st	Z, r24
				charCount++;
    211e:	9f 5f       	subi	r25, 0xFF	; 255
    2120:	90 93 f6 0d 	sts	0x0DF6, r25
				if(byte == 33) {
    2124:	81 32       	cpi	r24, 0x21	; 33
    2126:	a1 f4       	brne	.+40     	; 0x2150 <bt_com_call_back+0x1fe>
					accData[nextVal] = atoi(sendValue);
    2128:	00 91 f8 0d 	lds	r16, 0x0DF8
    212c:	10 e0       	ldi	r17, 0x00	; 0
    212e:	81 ef       	ldi	r24, 0xF1	; 241
    2130:	9d e0       	ldi	r25, 0x0D	; 13
    2132:	ca d5       	rcall	.+2964   	; 0x2cc8 <atoi>
    2134:	f8 01       	movw	r30, r16
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	e5 5b       	subi	r30, 0xB5	; 181
    213c:	fd 4f       	sbci	r31, 0xFD	; 253
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
					nextVal++;
    2142:	80 91 f8 0d 	lds	r24, 0x0DF8
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	80 93 f8 0d 	sts	0x0DF8, r24
					charCount=0;
    214c:	10 92 f6 0d 	sts	0x0DF6, r1
				}
				break;
		}
	}
}
    2150:	a8 96       	adiw	r28, 0x28	; 40
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	df 90       	pop	r13
    216a:	cf 90       	pop	r12
    216c:	bf 90       	pop	r11
    216e:	af 90       	pop	r10
    2170:	08 95       	ret

00002172 <vstartupTask>:
		// Wait for goal line is passed
		xSemaphoreTake(goal_line_semaphore, portMAX_DELAY);
	}
}

static void vstartupTask( void *pvParameters ) {
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	1f 92       	push	r1
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	/* The parameters are not used. */
	( void ) pvParameters;
	
	goal_line_semaphore = xSemaphoreCreateBinary();
    217c:	43 e0       	ldi	r20, 0x03	; 3
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	03 d9       	rcall	.-3578   	; 0x138a <xQueueGenericCreate>
    2184:	90 93 fc 0d 	sts	0x0DFC, r25
    2188:	80 93 fb 0d 	sts	0x0DFB, r24
	_xBT_received_chars_queue = xQueueCreate( _BT_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	8e e1       	ldi	r24, 0x1E	; 30
    2192:	fb d8       	rcall	.-3594   	; 0x138a <xQueueGenericCreate>
    2194:	90 93 fa 0d 	sts	0x0DFA, r25
    2198:	80 93 f9 0d 	sts	0x0DF9, r24
	
	if( goal_line_semaphore == NULL ) {
    219c:	80 91 fb 0d 	lds	r24, 0x0DFB
    21a0:	90 91 fc 0d 	lds	r25, 0x0DFC
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	11 f0       	breq	.+4      	; 0x21ac <vstartupTask+0x3a>
		/* There was insufficient OpenRTOS heap available for the semaphore to
		be created successfully. */
		// What to do here ?????????????????????????????????
		} else {
		set_goal_line_semaphore(goal_line_semaphore);
    21a8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <set_goal_line_semaphore>
	}
	
	// Initialize Bluetooth Module
	vTaskDelay( 1000/ portTICK_PERIOD_MS);
    21ac:	88 ee       	ldi	r24, 0xE8	; 232
    21ae:	93 e0       	ldi	r25, 0x03	; 3
    21b0:	ce dc       	rcall	.-1636   	; 0x1b4e <vTaskDelay>
	set_bt_reset(0);  // Disable reset line of Blue tooth module
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	0e 94 b9 03 	call	0x772	; 0x772 <set_bt_reset>
	vTaskDelay( 1000/ portTICK_PERIOD_MS);
    21b8:	88 ee       	ldi	r24, 0xE8	; 232
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	c8 dc       	rcall	.-1648   	; 0x1b4e <vTaskDelay>
	init_bt_module(bt_status_call_back, _xBT_received_chars_queue);
    21be:	60 91 f9 0d 	lds	r22, 0x0DF9
    21c2:	70 91 fa 0d 	lds	r23, 0x0DFA
    21c6:	89 ed       	ldi	r24, 0xD9	; 217
    21c8:	9e e0       	ldi	r25, 0x0E	; 14
    21ca:	0e 94 c8 03 	call	0x790	; 0x790 <init_bt_module>
	
	xTaskCreate( vjustATask, "JustATask", configMINIMAL_STACK_SIZE, NULL, just_a_task_TASK_PRIORITY, NULL );
    21ce:	a1 2c       	mov	r10, r1
    21d0:	b1 2c       	mov	r11, r1
    21d2:	c1 2c       	mov	r12, r1
    21d4:	d1 2c       	mov	r13, r1
    21d6:	e1 2c       	mov	r14, r1
    21d8:	f1 2c       	mov	r15, r1
    21da:	01 e0       	ldi	r16, 0x01	; 1
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	49 eb       	ldi	r20, 0xB9	; 185
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	62 ed       	ldi	r22, 0xD2	; 210
    21e6:	72 e0       	ldi	r23, 0x02	; 2
    21e8:	8f ed       	ldi	r24, 0xDF	; 223
    21ea:	9e e0       	ldi	r25, 0x0E	; 14
    21ec:	45 da       	rcall	.-2934   	; 0x1678 <xTaskGenericCreate>
	uint8_t _byte;
	for( ;; ) {
		xQueueReceive( _xBT_received_chars_queue, &_byte, portMAX_DELAY );
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	4f ef       	ldi	r20, 0xFF	; 255
    21f2:	5f ef       	ldi	r21, 0xFF	; 255
    21f4:	be 01       	movw	r22, r28
    21f6:	6f 5f       	subi	r22, 0xFF	; 255
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	80 91 f9 0d 	lds	r24, 0x0DF9
    21fe:	90 91 fa 0d 	lds	r25, 0x0DFA
    2202:	4a d9       	rcall	.-3436   	; 0x1498 <xQueueGenericReceive>
		bt_com_call_back(_byte);
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	a5 de       	rcall	.-694    	; 0x1f52 <bt_com_call_back>
    2208:	f2 cf       	rjmp	.-28     	; 0x21ee <vstartupTask+0x7c>

0000220a <main>:
	}
}

int main(void)
{
    220a:	af 92       	push	r10
    220c:	bf 92       	push	r11
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
	init_main_board();
    2218:	0e 94 a5 02 	call	0x54a	; 0x54a <init_main_board>
	xTaskCreate( vstartupTask, "StartupTask", configMINIMAL_STACK_SIZE, NULL, startup_TASK_PRIORITY, NULL );
    221c:	a1 2c       	mov	r10, r1
    221e:	b1 2c       	mov	r11, r1
    2220:	c1 2c       	mov	r12, r1
    2222:	d1 2c       	mov	r13, r1
    2224:	e1 2c       	mov	r14, r1
    2226:	f1 2c       	mov	r15, r1
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	49 eb       	ldi	r20, 0xB9	; 185
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	6c ed       	ldi	r22, 0xDC	; 220
    2234:	72 e0       	ldi	r23, 0x02	; 2
    2236:	89 eb       	ldi	r24, 0xB9	; 185
    2238:	90 e1       	ldi	r25, 0x10	; 16
    223a:	1e da       	rcall	.-3012   	; 0x1678 <xTaskGenericCreate>
	vTaskStartScheduler();
    223c:	16 db       	rcall	.-2516   	; 0x186a <vTaskStartScheduler>
}
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	08 95       	ret

00002252 <vApplicationStackOverflowHook>:


// Called is TASK Stack overflows
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ) {
    2252:	08 95       	ret

00002254 <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    2254:	4f 92       	push	r4
    2256:	5f 92       	push	r5
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	8f 92       	push	r8
    225e:	9f 92       	push	r9
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	f8 2e       	mov	r15, r24
    2278:	2a 01       	movw	r4, r20
    227a:	3b 01       	movw	r6, r22
    227c:	88 e0       	ldi	r24, 0x08	; 8
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	fc d3       	rcall	.+2040   	; 0x2a7a <malloc>
    2282:	8c 01       	movw	r16, r24
    2284:	8f 2d       	mov	r24, r15
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	fc 01       	movw	r30, r24
    228e:	e3 50       	subi	r30, 0x03	; 3
    2290:	f2 4f       	sbci	r31, 0xF2	; 242
    2292:	11 83       	std	Z+1, r17	; 0x01
    2294:	00 83       	st	Z, r16
    2296:	fc 01       	movw	r30, r24
    2298:	e5 5a       	subi	r30, 0xA5	; 165
    229a:	fd 4f       	sbci	r31, 0xFD	; 253
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	d8 01       	movw	r26, r16
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
    22a8:	13 96       	adiw	r26, 0x03	; 3
    22aa:	bc 92       	st	X, r11
    22ac:	ae 92       	st	-X, r10
    22ae:	12 97       	sbiw	r26, 0x02	; 2
    22b0:	15 96       	adiw	r26, 0x05	; 5
    22b2:	dc 92       	st	X, r13
    22b4:	ce 92       	st	-X, r12
    22b6:	14 97       	sbiw	r26, 0x04	; 4
    22b8:	17 96       	adiw	r26, 0x07	; 7
    22ba:	9c 92       	st	X, r9
    22bc:	8e 92       	st	-X, r8
    22be:	16 97       	sbiw	r26, 0x06	; 6
    22c0:	ff b6       	in	r15, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	d8 01       	movw	r26, r16
    22c6:	ed 91       	ld	r30, X+
    22c8:	fc 91       	ld	r31, X
    22ca:	11 97       	sbiw	r26, 0x01	; 1
    22cc:	36 97       	sbiw	r30, 0x06	; 6
    22ce:	80 81       	ld	r24, Z
    22d0:	82 60       	ori	r24, 0x02	; 2
    22d2:	80 83       	st	Z, r24
    22d4:	cd 90       	ld	r12, X+
    22d6:	dc 90       	ld	r13, X
    22d8:	44 0c       	add	r4, r4
    22da:	55 1c       	adc	r5, r5
    22dc:	66 1c       	adc	r6, r6
    22de:	77 1c       	adc	r7, r7
    22e0:	44 0c       	add	r4, r4
    22e2:	55 1c       	adc	r5, r5
    22e4:	66 1c       	adc	r6, r6
    22e6:	77 1c       	adc	r7, r7
    22e8:	a3 01       	movw	r20, r6
    22ea:	92 01       	movw	r18, r4
    22ec:	22 0f       	add	r18, r18
    22ee:	33 1f       	adc	r19, r19
    22f0:	44 1f       	adc	r20, r20
    22f2:	55 1f       	adc	r21, r21
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	74 e2       	ldi	r23, 0x24	; 36
    22f8:	84 ef       	ldi	r24, 0xF4	; 244
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	57 d3       	rcall	.+1710   	; 0x29ac <__udivmodsi4>
    22fe:	21 50       	subi	r18, 0x01	; 1
    2300:	f6 01       	movw	r30, r12
    2302:	32 97       	sbiw	r30, 0x02	; 2
    2304:	20 83       	st	Z, r18
    2306:	d8 01       	movw	r26, r16
    2308:	ed 91       	ld	r30, X+
    230a:	fc 91       	ld	r31, X
    230c:	11 97       	sbiw	r26, 0x01	; 1
    230e:	35 97       	sbiw	r30, 0x05	; 5
    2310:	88 e9       	ldi	r24, 0x98	; 152
    2312:	80 83       	st	Z, r24
    2314:	ed 91       	ld	r30, X+
    2316:	fc 91       	ld	r31, X
    2318:	34 97       	sbiw	r30, 0x04	; 4
    231a:	86 e0       	ldi	r24, 0x06	; 6
    231c:	80 83       	st	Z, r24
    231e:	ff be       	out	0x3f, r15	; 63
    2320:	c8 01       	movw	r24, r16
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	9f 90       	pop	r9
    2336:	8f 90       	pop	r8
    2338:	7f 90       	pop	r7
    233a:	6f 90       	pop	r6
    233c:	5f 90       	pop	r5
    233e:	4f 90       	pop	r4
    2340:	08 95       	ret

00002342 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	8c 01       	movw	r16, r24
    2350:	e4 2e       	mov	r14, r20
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    2352:	dc 01       	movw	r26, r24
    2354:	12 96       	adiw	r26, 0x02	; 2
    2356:	ed 91       	ld	r30, X+
    2358:	fc 91       	ld	r31, X
    235a:	13 97       	sbiw	r26, 0x03	; 3
    235c:	30 97       	sbiw	r30, 0x00	; 0
    235e:	69 f0       	breq	.+26     	; 0x237a <serial_send_bytes+0x38>
    2360:	24 2f       	mov	r18, r20
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	42 a5       	ldd	r20, Z+42	; 0x2a
    2366:	88 e2       	ldi	r24, 0x28	; 40
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	84 1b       	sub	r24, r20
    236c:	91 09       	sbc	r25, r1
    236e:	82 17       	cp	r24, r18
    2370:	93 07       	cpc	r25, r19
    2372:	e4 f0       	brlt	.+56     	; 0x23ac <serial_send_bytes+0x6a>
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2374:	e1 10       	cpse	r14, r1
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <serial_send_bytes+0x40>
    2378:	10 c0       	rjmp	.+32     	; 0x239a <serial_send_bytes+0x58>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    237a:	b1 e0       	ldi	r27, 0x01	; 1
    237c:	b4 17       	cp	r27, r20
    237e:	c0 f0       	brcs	.+48     	; 0x23b0 <serial_send_bytes+0x6e>
    2380:	f9 cf       	rjmp	.-14     	; 0x2374 <serial_send_bytes+0x32>
    2382:	c6 2f       	mov	r28, r22
    2384:	d7 2f       	mov	r29, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2386:	f1 2c       	mov	r15, r1
		buffer_put_item(handle->_tx_buf, buf[i]);
    2388:	69 91       	ld	r22, Y+
    238a:	f8 01       	movw	r30, r16
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    2394:	f3 94       	inc	r15
    2396:	fe 10       	cpse	r15, r14
    2398:	f7 cf       	rjmp	.-18     	; 0x2388 <serial_send_bytes+0x46>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    239a:	d8 01       	movw	r26, r16
    239c:	ed 91       	ld	r30, X+
    239e:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
    23a0:	35 97       	sbiw	r30, 0x05	; 5
    23a2:	80 81       	ld	r24, Z
    23a4:	80 62       	ori	r24, 0x20	; 32
    23a6:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <serial_send_bytes+0x70>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <serial_send_bytes+0x70>
    23b0:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	08 95       	ret

000023c0 <__vector_25>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    23c0:	1f 92       	push	r1
    23c2:	0f 92       	push	r0
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	0f 92       	push	r0
    23c8:	11 24       	eor	r1, r1
    23ca:	0b b6       	in	r0, 0x3b	; 59
    23cc:	0f 92       	push	r0
    23ce:	2f 93       	push	r18
    23d0:	3f 93       	push	r19
    23d2:	4f 93       	push	r20
    23d4:	5f 93       	push	r21
    23d6:	6f 93       	push	r22
    23d8:	7f 93       	push	r23
    23da:	8f 93       	push	r24
    23dc:	9f 93       	push	r25
    23de:	af 93       	push	r26
    23e0:	bf 93       	push	r27
    23e2:	cf 93       	push	r28
    23e4:	ef 93       	push	r30
    23e6:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    23e8:	e0 91 fd 0d 	lds	r30, 0x0DFD
    23ec:	f0 91 fe 0d 	lds	r31, 0x0DFE
    23f0:	30 97       	sbiw	r30, 0x00	; 0
    23f2:	a1 f0       	breq	.+40     	; 0x241c <__vector_25+0x5c>
		item = UDR0;
    23f4:	c0 91 c6 00 	lds	r28, 0x00C6
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    23f8:	6c 2f       	mov	r22, r28
    23fa:	84 81       	ldd	r24, Z+4	; 0x04
    23fc:	95 81       	ldd	r25, Z+5	; 0x05
    23fe:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    2402:	80 91 fd 0d 	lds	r24, 0x0DFD
    2406:	90 91 fe 0d 	lds	r25, 0x0DFE
    240a:	dc 01       	movw	r26, r24
    240c:	16 96       	adiw	r26, 0x06	; 6
    240e:	ed 91       	ld	r30, X+
    2410:	fc 91       	ld	r31, X
    2412:	17 97       	sbiw	r26, 0x07	; 7
    2414:	30 97       	sbiw	r30, 0x00	; 0
    2416:	11 f0       	breq	.+4      	; 0x241c <__vector_25+0x5c>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    2418:	6c 2f       	mov	r22, r28
    241a:	19 95       	eicall
		}
	}
}
    241c:	ff 91       	pop	r31
    241e:	ef 91       	pop	r30
    2420:	cf 91       	pop	r28
    2422:	bf 91       	pop	r27
    2424:	af 91       	pop	r26
    2426:	9f 91       	pop	r25
    2428:	8f 91       	pop	r24
    242a:	7f 91       	pop	r23
    242c:	6f 91       	pop	r22
    242e:	5f 91       	pop	r21
    2430:	4f 91       	pop	r20
    2432:	3f 91       	pop	r19
    2434:	2f 91       	pop	r18
    2436:	0f 90       	pop	r0
    2438:	0b be       	out	0x3b, r0	; 59
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

00002444 <__vector_26>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    2444:	1f 92       	push	r1
    2446:	0f 92       	push	r0
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	0f 92       	push	r0
    244c:	11 24       	eor	r1, r1
    244e:	0b b6       	in	r0, 0x3b	; 59
    2450:	0f 92       	push	r0
    2452:	2f 93       	push	r18
    2454:	3f 93       	push	r19
    2456:	4f 93       	push	r20
    2458:	5f 93       	push	r21
    245a:	6f 93       	push	r22
    245c:	7f 93       	push	r23
    245e:	8f 93       	push	r24
    2460:	9f 93       	push	r25
    2462:	af 93       	push	r26
    2464:	bf 93       	push	r27
    2466:	ef 93       	push	r30
    2468:	ff 93       	push	r31
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	1f 92       	push	r1
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    2474:	e0 91 fd 0d 	lds	r30, 0x0DFD
    2478:	f0 91 fe 0d 	lds	r31, 0x0DFE
    247c:	30 97       	sbiw	r30, 0x00	; 0
    247e:	99 f0       	breq	.+38     	; 0x24a6 <__vector_26+0x62>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    2480:	be 01       	movw	r22, r28
    2482:	6f 5f       	subi	r22, 0xFF	; 255
    2484:	7f 4f       	sbci	r23, 0xFF	; 255
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    248e:	81 11       	cpse	r24, r1
    2490:	04 c0       	rjmp	.+8      	; 0x249a <__vector_26+0x56>
			UDR0 = item;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	80 93 c6 00 	sts	0x00C6, r24
    2498:	0b c0       	rjmp	.+22     	; 0x24b0 <__vector_26+0x6c>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    249a:	e1 ec       	ldi	r30, 0xC1	; 193
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	8f 7d       	andi	r24, 0xDF	; 223
    24a2:	80 83       	st	Z, r24
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <__vector_26+0x6c>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    24a6:	e1 ec       	ldi	r30, 0xC1	; 193
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	8f 7d       	andi	r24, 0xDF	; 223
    24ae:	80 83       	st	Z, r24
	}
}
    24b0:	0f 90       	pop	r0
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	ff 91       	pop	r31
    24b8:	ef 91       	pop	r30
    24ba:	bf 91       	pop	r27
    24bc:	af 91       	pop	r26
    24be:	9f 91       	pop	r25
    24c0:	8f 91       	pop	r24
    24c2:	7f 91       	pop	r23
    24c4:	6f 91       	pop	r22
    24c6:	5f 91       	pop	r21
    24c8:	4f 91       	pop	r20
    24ca:	3f 91       	pop	r19
    24cc:	2f 91       	pop	r18
    24ce:	0f 90       	pop	r0
    24d0:	0b be       	out	0x3b, r0	; 59
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <__vector_36>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    24dc:	1f 92       	push	r1
    24de:	0f 92       	push	r0
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	0f 92       	push	r0
    24e4:	11 24       	eor	r1, r1
    24e6:	0b b6       	in	r0, 0x3b	; 59
    24e8:	0f 92       	push	r0
    24ea:	2f 93       	push	r18
    24ec:	3f 93       	push	r19
    24ee:	4f 93       	push	r20
    24f0:	5f 93       	push	r21
    24f2:	6f 93       	push	r22
    24f4:	7f 93       	push	r23
    24f6:	8f 93       	push	r24
    24f8:	9f 93       	push	r25
    24fa:	af 93       	push	r26
    24fc:	bf 93       	push	r27
    24fe:	cf 93       	push	r28
    2500:	ef 93       	push	r30
    2502:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2504:	e0 91 ff 0d 	lds	r30, 0x0DFF
    2508:	f0 91 00 0e 	lds	r31, 0x0E00
    250c:	30 97       	sbiw	r30, 0x00	; 0
    250e:	a1 f0       	breq	.+40     	; 0x2538 <__vector_36+0x5c>
		item = UDR1;
    2510:	c0 91 ce 00 	lds	r28, 0x00CE
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    2514:	6c 2f       	mov	r22, r28
    2516:	84 81       	ldd	r24, Z+4	; 0x04
    2518:	95 81       	ldd	r25, Z+5	; 0x05
    251a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    251e:	80 91 ff 0d 	lds	r24, 0x0DFF
    2522:	90 91 00 0e 	lds	r25, 0x0E00
    2526:	dc 01       	movw	r26, r24
    2528:	16 96       	adiw	r26, 0x06	; 6
    252a:	ed 91       	ld	r30, X+
    252c:	fc 91       	ld	r31, X
    252e:	17 97       	sbiw	r26, 0x07	; 7
    2530:	30 97       	sbiw	r30, 0x00	; 0
    2532:	11 f0       	breq	.+4      	; 0x2538 <__vector_36+0x5c>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    2534:	6c 2f       	mov	r22, r28
    2536:	19 95       	eicall
		}
	}
}
    2538:	ff 91       	pop	r31
    253a:	ef 91       	pop	r30
    253c:	cf 91       	pop	r28
    253e:	bf 91       	pop	r27
    2540:	af 91       	pop	r26
    2542:	9f 91       	pop	r25
    2544:	8f 91       	pop	r24
    2546:	7f 91       	pop	r23
    2548:	6f 91       	pop	r22
    254a:	5f 91       	pop	r21
    254c:	4f 91       	pop	r20
    254e:	3f 91       	pop	r19
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0b be       	out	0x3b, r0	; 59
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <__vector_37>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	ef 93       	push	r30
    2584:	ff 93       	push	r31
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    2590:	e0 91 ff 0d 	lds	r30, 0x0DFF
    2594:	f0 91 00 0e 	lds	r31, 0x0E00
    2598:	30 97       	sbiw	r30, 0x00	; 0
    259a:	99 f0       	breq	.+38     	; 0x25c2 <__vector_37+0x62>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    259c:	be 01       	movw	r22, r28
    259e:	6f 5f       	subi	r22, 0xFF	; 255
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    25aa:	81 11       	cpse	r24, r1
    25ac:	04 c0       	rjmp	.+8      	; 0x25b6 <__vector_37+0x56>
			UDR1 = item;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	80 93 ce 00 	sts	0x00CE, r24
    25b4:	0b c0       	rjmp	.+22     	; 0x25cc <__vector_37+0x6c>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    25b6:	e9 ec       	ldi	r30, 0xC9	; 201
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7d       	andi	r24, 0xDF	; 223
    25be:	80 83       	st	Z, r24
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <__vector_37+0x6c>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    25c2:	e9 ec       	ldi	r30, 0xC9	; 201
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7d       	andi	r24, 0xDF	; 223
    25ca:	80 83       	st	Z, r24
	}
}
    25cc:	0f 90       	pop	r0
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	ff 91       	pop	r31
    25d4:	ef 91       	pop	r30
    25d6:	bf 91       	pop	r27
    25d8:	af 91       	pop	r26
    25da:	9f 91       	pop	r25
    25dc:	8f 91       	pop	r24
    25de:	7f 91       	pop	r23
    25e0:	6f 91       	pop	r22
    25e2:	5f 91       	pop	r21
    25e4:	4f 91       	pop	r20
    25e6:	3f 91       	pop	r19
    25e8:	2f 91       	pop	r18
    25ea:	0f 90       	pop	r0
    25ec:	0b be       	out	0x3b, r0	; 59
    25ee:	0f 90       	pop	r0
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	0f 90       	pop	r0
    25f4:	1f 90       	pop	r1
    25f6:	18 95       	reti

000025f8 <_select_instance>:
		// restore interrupt state
		SREG = c_sreg;
	}

	return result;
}
    25f8:	e0 91 02 0e 	lds	r30, 0x0E02
    25fc:	f0 91 03 0e 	lds	r31, 0x0E03
    2600:	30 97       	sbiw	r30, 0x00	; 0
    2602:	01 f1       	breq	.+64     	; 0x2644 <_select_instance+0x4c>
    2604:	23 81       	ldd	r18, Z+3	; 0x03
    2606:	21 30       	cpi	r18, 0x01	; 1
    2608:	79 f4       	brne	.+30     	; 0x2628 <_select_instance+0x30>
    260a:	a0 81       	ld	r26, Z
    260c:	b1 81       	ldd	r27, Z+1	; 0x01
    260e:	4c 91       	ld	r20, X
    2610:	21 e0       	ldi	r18, 0x01	; 1
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	02 80       	ldd	r0, Z+2	; 0x02
    2616:	02 c0       	rjmp	.+4      	; 0x261c <_select_instance+0x24>
    2618:	22 0f       	add	r18, r18
    261a:	33 1f       	adc	r19, r19
    261c:	0a 94       	dec	r0
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <_select_instance+0x20>
    2620:	20 95       	com	r18
    2622:	24 23       	and	r18, r20
    2624:	2c 93       	st	X, r18
    2626:	0e c0       	rjmp	.+28     	; 0x2644 <_select_instance+0x4c>
    2628:	a0 81       	ld	r26, Z
    262a:	b1 81       	ldd	r27, Z+1	; 0x01
    262c:	6c 91       	ld	r22, X
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	9a 01       	movw	r18, r20
    2634:	02 80       	ldd	r0, Z+2	; 0x02
    2636:	02 c0       	rjmp	.+4      	; 0x263c <_select_instance+0x44>
    2638:	22 0f       	add	r18, r18
    263a:	33 1f       	adc	r19, r19
    263c:	0a 94       	dec	r0
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <_select_instance+0x40>
    2640:	26 2b       	or	r18, r22
    2642:	2c 93       	st	X, r18
    2644:	90 93 03 0e 	sts	0x0E03, r25
    2648:	80 93 02 0e 	sts	0x0E02, r24
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	69 f0       	breq	.+26     	; 0x266a <_select_instance+0x72>
    2650:	10 92 04 0e 	sts	0x0E04, r1
    2654:	2c b5       	in	r18, 0x2c	; 44
    2656:	2f 73       	andi	r18, 0x3F	; 63
    2658:	2c bd       	out	0x2c, r18	; 44
    265a:	fc 01       	movw	r30, r24
    265c:	24 81       	ldd	r18, Z+4	; 0x04
    265e:	2c bd       	out	0x2c, r18	; 44
    2660:	85 81       	ldd	r24, Z+5	; 0x05
    2662:	8d bd       	out	0x2d, r24	; 45
    2664:	8c b5       	in	r24, 0x2c	; 44
    2666:	80 64       	ori	r24, 0x40	; 64
    2668:	8c bd       	out	0x2c, r24	; 44
    266a:	08 95       	ret

0000266c <spi_new_instance>:
    266c:	6f 92       	push	r6
    266e:	7f 92       	push	r7
    2670:	8f 92       	push	r8
    2672:	9f 92       	push	r9
    2674:	af 92       	push	r10
    2676:	bf 92       	push	r11
    2678:	cf 92       	push	r12
    267a:	df 92       	push	r13
    267c:	ef 92       	push	r14
    267e:	ff 92       	push	r15
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	d8 2e       	mov	r13, r24
    268e:	f6 2e       	mov	r15, r22
    2690:	64 2e       	mov	r6, r20
    2692:	72 2e       	mov	r7, r18
    2694:	80 91 01 0e 	lds	r24, 0x0E01
    2698:	81 11       	cpse	r24, r1
    269a:	06 c0       	rjmp	.+12     	; 0x26a8 <spi_new_instance+0x3c>
    269c:	84 b1       	in	r24, 0x04	; 4
    269e:	87 60       	ori	r24, 0x07	; 7
    26a0:	84 b9       	out	0x04, r24	; 4
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 01 0e 	sts	0x0E01, r24
    26a8:	8c e0       	ldi	r24, 0x0C	; 12
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	e6 d1       	rcall	.+972    	; 0x2a7a <malloc>
    26ae:	fc 01       	movw	r30, r24
    26b0:	00 83       	st	Z, r16
    26b2:	11 83       	std	Z+1, r17	; 0x01
    26b4:	e2 82       	std	Z+2, r14	; 0x02
    26b6:	a0 2f       	mov	r26, r16
    26b8:	b1 2f       	mov	r27, r17
    26ba:	4e 91       	ld	r20, -X
    26bc:	21 e0       	ldi	r18, 0x01	; 1
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	c9 01       	movw	r24, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <spi_new_instance+0x5c>
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	ea 94       	dec	r14
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <spi_new_instance+0x58>
    26cc:	84 2b       	or	r24, r20
    26ce:	8c 93       	st	X, r24
    26d0:	c3 82       	std	Z+3, r12	; 0x03
    26d2:	66 0c       	add	r6, r6
    26d4:	66 0c       	add	r6, r6
    26d6:	76 28       	or	r7, r6
    26d8:	af 2d       	mov	r26, r15
    26da:	bb 27       	eor	r27, r27
    26dc:	a7 fd       	sbrc	r26, 7
    26de:	b0 95       	com	r27
    26e0:	a8 51       	subi	r26, 0x18	; 24
    26e2:	bd 4f       	sbci	r27, 0xFD	; 253
    26e4:	6c 90       	ld	r6, X
    26e6:	d6 28       	or	r13, r6
    26e8:	d7 28       	or	r13, r7
    26ea:	d4 82       	std	Z+4, r13	; 0x04
    26ec:	83 e0       	ldi	r24, 0x03	; 3
    26ee:	8f 15       	cp	r24, r15
    26f0:	14 f4       	brge	.+4      	; 0x26f6 <spi_new_instance+0x8a>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	85 83       	std	Z+5, r24	; 0x05
    26f6:	97 82       	std	Z+7, r9	; 0x07
    26f8:	86 82       	std	Z+6, r8	; 0x06
    26fa:	b1 86       	std	Z+9, r11	; 0x09
    26fc:	a0 86       	std	Z+8, r10	; 0x08
    26fe:	8a 89       	ldd	r24, Y+18	; 0x12
    2700:	9b 89       	ldd	r25, Y+19	; 0x13
    2702:	93 87       	std	Z+11, r25	; 0x0b
    2704:	82 87       	std	Z+10, r24	; 0x0a
    2706:	6f b7       	in	r22, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	80 91 02 0e 	lds	r24, 0x0E02
    270e:	90 91 03 0e 	lds	r25, 0x0E03
    2712:	f0 93 03 0e 	sts	0x0E03, r31
    2716:	e0 93 02 0e 	sts	0x0E02, r30
    271a:	23 81       	ldd	r18, Z+3	; 0x03
    271c:	21 30       	cpi	r18, 0x01	; 1
    271e:	81 f4       	brne	.+32     	; 0x2740 <spi_new_instance+0xd4>
    2720:	a0 81       	ld	r26, Z
    2722:	b1 81       	ldd	r27, Z+1	; 0x01
    2724:	7c 91       	ld	r23, X
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	9a 01       	movw	r18, r20
    272c:	02 80       	ldd	r0, Z+2	; 0x02
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <spi_new_instance+0xc8>
    2730:	22 0f       	add	r18, r18
    2732:	33 1f       	adc	r19, r19
    2734:	0a 94       	dec	r0
    2736:	e2 f7       	brpl	.-8      	; 0x2730 <spi_new_instance+0xc4>
    2738:	20 95       	com	r18
    273a:	27 23       	and	r18, r23
    273c:	2c 93       	st	X, r18
    273e:	0e c0       	rjmp	.+28     	; 0x275c <spi_new_instance+0xf0>
    2740:	a0 81       	ld	r26, Z
    2742:	b1 81       	ldd	r27, Z+1	; 0x01
    2744:	7c 91       	ld	r23, X
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	9a 01       	movw	r18, r20
    274c:	02 80       	ldd	r0, Z+2	; 0x02
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <spi_new_instance+0xe8>
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	0a 94       	dec	r0
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <spi_new_instance+0xe4>
    2758:	27 2b       	or	r18, r23
    275a:	2c 93       	st	X, r18
    275c:	90 93 03 0e 	sts	0x0E03, r25
    2760:	80 93 02 0e 	sts	0x0E02, r24
    2764:	6f bf       	out	0x3f, r22	; 63
    2766:	cf 01       	movw	r24, r30
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	bf 90       	pop	r11
    277a:	af 90       	pop	r10
    277c:	9f 90       	pop	r9
    277e:	8f 90       	pop	r8
    2780:	7f 90       	pop	r7
    2782:	6f 90       	pop	r6
    2784:	08 95       	ret

00002786 <spi_send_string>:
SPI_ILLEGAL_INSTANCE: instance is null.
@param spi to send to.
@param *buf pointer to buffer to be send.
@param len no of bytes to send.
*/
uint8_t spi_send_string(spi_p spi, uint8_t *buf, uint8_t len) {
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	ec 01       	movw	r28, r24
    2796:	8b 01       	movw	r16, r22
    2798:	f4 2e       	mov	r15, r20
	if (spi == 0) {
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	09 f4       	brne	.+2      	; 0x27a0 <spi_send_string+0x1a>
    279e:	6b c0       	rjmp	.+214    	; 0x2876 <spi_send_string+0xf0>
		return SPI_ILLEGAL_INSTANCE;
	}

	// Select correct instance
	if (_this != spi ) {
    27a0:	80 91 02 0e 	lds	r24, 0x0E02
    27a4:	90 91 03 0e 	lds	r25, 0x0E03
    27a8:	8c 17       	cp	r24, r28
    27aa:	9d 07       	cpc	r25, r29
    27ac:	11 f0       	breq	.+4      	; 0x27b2 <spi_send_string+0x2c>
		_select_instance(spi);
    27ae:	ce 01       	movw	r24, r28
    27b0:	23 df       	rcall	.-442    	; 0x25f8 <_select_instance>
	uint8_t tmp = 0;

	// Critical section
	{
		// disable interrupt
		uint8_t c_sreg = SREG;
    27b2:	ef b6       	in	r14, 0x3f	; 63
		cli();
    27b4:	f8 94       	cli

		// Check if buffer is free
		if ( ((spi->_tx_buf != 0) && (len > (BUFFER_SIZE - spi->_tx_buf->no_in_buffer))) || ((spi->_tx_buf == 0) && (len > 1)) ) {
    27b6:	ee 81       	ldd	r30, Y+6	; 0x06
    27b8:	ff 81       	ldd	r31, Y+7	; 0x07
    27ba:	30 97       	sbiw	r30, 0x00	; 0
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <spi_send_string+0x50>
    27be:	2f 2d       	mov	r18, r15
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	42 a5       	ldd	r20, Z+42	; 0x2a
    27c4:	88 e2       	ldi	r24, 0x28	; 40
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	84 1b       	sub	r24, r20
    27ca:	91 09       	sbc	r25, r1
    27cc:	82 17       	cp	r24, r18
    27ce:	93 07       	cpc	r25, r19
    27d0:	0c f4       	brge	.+2      	; 0x27d4 <spi_send_string+0x4e>
    27d2:	48 c0       	rjmp	.+144    	; 0x2864 <spi_send_string+0xde>
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <spi_send_string+0x58>
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	8f 15       	cp	r24, r15
    27da:	08 f4       	brcc	.+2      	; 0x27de <spi_send_string+0x58>
    27dc:	45 c0       	rjmp	.+138    	; 0x2868 <spi_send_string+0xe2>
			result = SPI_NO_ROOM_IN_TX_BUFFER;
			} else {
			// If SPI in idle send the first byte
			if (!_spi_active) {
    27de:	80 91 04 0e 	lds	r24, 0x0E04
    27e2:	81 11       	cpse	r24, r1
    27e4:	30 c0       	rjmp	.+96     	; 0x2846 <spi_send_string+0xc0>
				_spi_active = 1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	80 93 04 0e 	sts	0x0E04, r24
	SPDR = byte;
}

// Set the CS according to the instance
static inline void _set_cs(uint8_t state) {
	if (_this->_cs_active_level == 1) {
    27ec:	e0 91 02 0e 	lds	r30, 0x0E02
    27f0:	f0 91 03 0e 	lds	r31, 0x0E03
    27f4:	83 81       	ldd	r24, Z+3	; 0x03
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	79 f4       	brne	.+30     	; 0x2818 <spi_send_string+0x92>
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
    27fa:	a0 81       	ld	r26, Z
    27fc:	b1 81       	ldd	r27, Z+1	; 0x01
    27fe:	4c 91       	ld	r20, X
    2800:	21 e0       	ldi	r18, 0x01	; 1
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	c9 01       	movw	r24, r18
    2806:	02 80       	ldd	r0, Z+2	; 0x02
    2808:	02 c0       	rjmp	.+4      	; 0x280e <spi_send_string+0x88>
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	0a 94       	dec	r0
    2810:	e2 f7       	brpl	.-8      	; 0x280a <spi_send_string+0x84>
    2812:	84 2b       	or	r24, r20
    2814:	8c 93       	st	X, r24
    2816:	0e c0       	rjmp	.+28     	; 0x2834 <spi_send_string+0xae>
			} else {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
		}
		} else {
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
    2818:	a0 81       	ld	r26, Z
    281a:	b1 81       	ldd	r27, Z+1	; 0x01
    281c:	2c 91       	ld	r18, X
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	02 80       	ldd	r0, Z+2	; 0x02
    2824:	02 c0       	rjmp	.+4      	; 0x282a <spi_send_string+0xa4>
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	0a 94       	dec	r0
    282c:	e2 f7       	brpl	.-8      	; 0x2826 <spi_send_string+0xa0>
    282e:	80 95       	com	r24
    2830:	82 23       	and	r24, r18
    2832:	8c 93       	st	X, r24
			// If SPI in idle send the first byte
			if (!_spi_active) {
				_spi_active = 1;
				_set_cs(CS_ACTIVE);
				// Enable SPI interrupt
				SPCR |= _BV(SPIE);
    2834:	8c b5       	in	r24, 0x2c	; 44
    2836:	80 68       	ori	r24, 0x80	; 128
    2838:	8c bd       	out	0x2c, r24	; 44
				// Send first byte
				SPDR =buf[0];
    283a:	f8 01       	movw	r30, r16
    283c:	80 81       	ld	r24, Z
    283e:	8e bd       	out	0x2e, r24	; 46

				tmp = 1;
    2840:	dd 24       	eor	r13, r13
    2842:	d3 94       	inc	r13
    2844:	01 c0       	rjmp	.+2      	; 0x2848 <spi_send_string+0xc2>
	if (_this != spi ) {
		_select_instance(spi);
	}

	uint8_t result = SPI_OK;
	uint8_t tmp = 0;
    2846:	d1 2c       	mov	r13, r1
				SPDR =buf[0];

				tmp = 1;
			}
			// Put in the tx buffer
			for (uint8_t i = tmp; i < len; i++) {
    2848:	df 14       	cp	r13, r15
    284a:	80 f4       	brcc	.+32     	; 0x286c <spi_send_string+0xe6>
				buffer_put_item(spi->_tx_buf, buf[i]);
    284c:	f8 01       	movw	r30, r16
    284e:	ed 0d       	add	r30, r13
    2850:	f1 1d       	adc	r31, r1
    2852:	60 81       	ld	r22, Z
    2854:	8e 81       	ldd	r24, Y+6	; 0x06
    2856:	9f 81       	ldd	r25, Y+7	; 0x07
    2858:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
				SPDR =buf[0];

				tmp = 1;
			}
			// Put in the tx buffer
			for (uint8_t i = tmp; i < len; i++) {
    285c:	d3 94       	inc	r13
    285e:	df 14       	cp	r13, r15
    2860:	a8 f3       	brcs	.-22     	; 0x284c <spi_send_string+0xc6>
    2862:	06 c0       	rjmp	.+12     	; 0x2870 <spi_send_string+0xea>
		uint8_t c_sreg = SREG;
		cli();

		// Check if buffer is free
		if ( ((spi->_tx_buf != 0) && (len > (BUFFER_SIZE - spi->_tx_buf->no_in_buffer))) || ((spi->_tx_buf == 0) && (len > 1)) ) {
			result = SPI_NO_ROOM_IN_TX_BUFFER;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <spi_send_string+0xec>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <spi_send_string+0xec>
	// Select correct instance
	if (_this != spi ) {
		_select_instance(spi);
	}

	uint8_t result = SPI_OK;
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <spi_send_string+0xec>
    2870:	80 e0       	ldi	r24, 0x00	; 0
				buffer_put_item(spi->_tx_buf, buf[i]);
			}
		}

		// restore interrupt state
		SREG = c_sreg;
    2872:	ef be       	out	0x3f, r14	; 63
	}

	return result;
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <spi_send_string+0xf2>
@param *buf pointer to buffer to be send.
@param len no of bytes to send.
*/
uint8_t spi_send_string(spi_p spi, uint8_t *buf, uint8_t len) {
	if (spi == 0) {
		return SPI_ILLEGAL_INSTANCE;
    2876:	83 e0       	ldi	r24, 0x03	; 3
		// restore interrupt state
		SREG = c_sreg;
	}

	return result;
}
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	08 95       	ret

00002888 <__vector_24>:

/* ======================================================================================================================= */
/**
@todo Documentation
*/
ISR(SPI_STC_vect) {
    2888:	1f 92       	push	r1
    288a:	0f 92       	push	r0
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	0f 92       	push	r0
    2890:	11 24       	eor	r1, r1
    2892:	0b b6       	in	r0, 0x3b	; 59
    2894:	0f 92       	push	r0
    2896:	2f 93       	push	r18
    2898:	3f 93       	push	r19
    289a:	4f 93       	push	r20
    289c:	5f 93       	push	r21
    289e:	6f 93       	push	r22
    28a0:	7f 93       	push	r23
    28a2:	8f 93       	push	r24
    28a4:	9f 93       	push	r25
    28a6:	af 93       	push	r26
    28a8:	bf 93       	push	r27
    28aa:	ef 93       	push	r30
    28ac:	ff 93       	push	r31
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	1f 92       	push	r1
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	#if SPI_USE_BUFFER == 1
	// store received byte if receive buffer available

	if (_this->_rx_buf != 0){
    28b8:	e0 91 02 0e 	lds	r30, 0x0E02
    28bc:	f0 91 03 0e 	lds	r31, 0x0E03
    28c0:	80 85       	ldd	r24, Z+8	; 0x08
    28c2:	91 85       	ldd	r25, Z+9	; 0x09
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	19 f0       	breq	.+6      	; 0x28ce <__vector_24+0x46>
		buffer_put_item(_this->_rx_buf, SPDR);
    28c8:	6e b5       	in	r22, 0x2e	; 46
    28ca:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <buffer_put_item>
	}
	// more bytes to send?
	if ( buffer_get_item(_this->_tx_buf, &item) == BUFFER_OK) {
    28ce:	e0 91 02 0e 	lds	r30, 0x0E02
    28d2:	f0 91 03 0e 	lds	r31, 0x0E03
    28d6:	be 01       	movw	r22, r28
    28d8:	6f 5f       	subi	r22, 0xFF	; 255
    28da:	7f 4f       	sbci	r23, 0xFF	; 255
    28dc:	86 81       	ldd	r24, Z+6	; 0x06
    28de:	97 81       	ldd	r25, Z+7	; 0x07
    28e0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buffer_get_item>
    28e4:	81 11       	cpse	r24, r1
    28e6:	03 c0       	rjmp	.+6      	; 0x28ee <__vector_24+0x66>
		_spi_send_byte(item);
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
// Indexed by SPI_CLOCK_DIVIDER_xx defines
static const uint8_t _prescaler_mask [] = {0b00,0b01,0b10,0b11,0b00,0b01,0b10};

// Send a byte to the SPI-bus
static inline void _spi_send_byte(uint8_t byte) {
	SPDR = byte;
    28ea:	8e bd       	out	0x2e, r24	; 46
    28ec:	29 c0       	rjmp	.+82     	; 0x2940 <__vector_24+0xb8>
	if ( buffer_get_item(_this->_tx_buf, &item) == BUFFER_OK) {
		_spi_send_byte(item);
		} else {
		// No
		// Disable SPI interrupt
		SPCR &= ~_BV(SPIE);
    28ee:	8c b5       	in	r24, 0x2c	; 44
    28f0:	8f 77       	andi	r24, 0x7F	; 127
    28f2:	8c bd       	out	0x2c, r24	; 44
		_spi_active = 0;
    28f4:	10 92 04 0e 	sts	0x0E04, r1
	SPDR = byte;
}

// Set the CS according to the instance
static inline void _set_cs(uint8_t state) {
	if (_this->_cs_active_level == 1) {
    28f8:	e0 91 02 0e 	lds	r30, 0x0E02
    28fc:	f0 91 03 0e 	lds	r31, 0x0E03
    2900:	83 81       	ldd	r24, Z+3	; 0x03
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	79 f4       	brne	.+30     	; 0x2924 <__vector_24+0x9c>
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
			} else {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);
    2906:	a0 81       	ld	r26, Z
    2908:	b1 81       	ldd	r27, Z+1	; 0x01
    290a:	2c 91       	ld	r18, X
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	02 80       	ldd	r0, Z+2	; 0x02
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <__vector_24+0x90>
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	0a 94       	dec	r0
    291a:	e2 f7       	brpl	.-8      	; 0x2914 <__vector_24+0x8c>
    291c:	80 95       	com	r24
    291e:	82 23       	and	r24, r18
    2920:	8c 93       	st	X, r24
    2922:	0e c0       	rjmp	.+28     	; 0x2940 <__vector_24+0xb8>
		} else {
		if (state == CS_ACTIVE) {
			*(_this->_cs_port) &= ~_BV(_this->_cs_pin);

			} else {
			*(_this->_cs_port) |= _BV(_this->_cs_pin);
    2924:	a0 81       	ld	r26, Z
    2926:	b1 81       	ldd	r27, Z+1	; 0x01
    2928:	4c 91       	ld	r20, X
    292a:	21 e0       	ldi	r18, 0x01	; 1
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	c9 01       	movw	r24, r18
    2930:	02 80       	ldd	r0, Z+2	; 0x02
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <__vector_24+0xb0>
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	0a 94       	dec	r0
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <__vector_24+0xac>
    293c:	84 2b       	or	r24, r20
    293e:	8c 93       	st	X, r24
	_spi_active = 0;
	_set_cs(CS_INACTIVE);
	#endif

	// If handler defined - call it with instance and received byte.
	if (_this->_call_back)
    2940:	80 91 02 0e 	lds	r24, 0x0E02
    2944:	90 91 03 0e 	lds	r25, 0x0E03
    2948:	dc 01       	movw	r26, r24
    294a:	1a 96       	adiw	r26, 0x0a	; 10
    294c:	ed 91       	ld	r30, X+
    294e:	fc 91       	ld	r31, X
    2950:	1b 97       	sbiw	r26, 0x0b	; 11
    2952:	30 97       	sbiw	r30, 0x00	; 0
    2954:	11 f0       	breq	.+4      	; 0x295a <__vector_24+0xd2>
	{
		_this->_call_back(_this, item);
    2956:	69 81       	ldd	r22, Y+1	; 0x01
    2958:	19 95       	eicall
	}
    295a:	0f 90       	pop	r0
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	ff 91       	pop	r31
    2962:	ef 91       	pop	r30
    2964:	bf 91       	pop	r27
    2966:	af 91       	pop	r26
    2968:	9f 91       	pop	r25
    296a:	8f 91       	pop	r24
    296c:	7f 91       	pop	r23
    296e:	6f 91       	pop	r22
    2970:	5f 91       	pop	r21
    2972:	4f 91       	pop	r20
    2974:	3f 91       	pop	r19
    2976:	2f 91       	pop	r18
    2978:	0f 90       	pop	r0
    297a:	0b be       	out	0x3b, r0	; 59
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	0f 90       	pop	r0
    2982:	1f 90       	pop	r1
    2984:	18 95       	reti

00002986 <__divmodhi4>:
    2986:	97 fb       	bst	r25, 7
    2988:	07 2e       	mov	r0, r23
    298a:	16 f4       	brtc	.+4      	; 0x2990 <__divmodhi4+0xa>
    298c:	00 94       	com	r0
    298e:	06 d0       	rcall	.+12     	; 0x299c <__divmodhi4_neg1>
    2990:	77 fd       	sbrc	r23, 7
    2992:	08 d0       	rcall	.+16     	; 0x29a4 <__divmodhi4_neg2>
    2994:	5e d0       	rcall	.+188    	; 0x2a52 <__udivmodhi4>
    2996:	07 fc       	sbrc	r0, 7
    2998:	05 d0       	rcall	.+10     	; 0x29a4 <__divmodhi4_neg2>
    299a:	3e f4       	brtc	.+14     	; 0x29aa <__divmodhi4_exit>

0000299c <__divmodhi4_neg1>:
    299c:	90 95       	com	r25
    299e:	81 95       	neg	r24
    29a0:	9f 4f       	sbci	r25, 0xFF	; 255
    29a2:	08 95       	ret

000029a4 <__divmodhi4_neg2>:
    29a4:	70 95       	com	r23
    29a6:	61 95       	neg	r22
    29a8:	7f 4f       	sbci	r23, 0xFF	; 255

000029aa <__divmodhi4_exit>:
    29aa:	08 95       	ret

000029ac <__udivmodsi4>:
    29ac:	a1 e2       	ldi	r26, 0x21	; 33
    29ae:	1a 2e       	mov	r1, r26
    29b0:	aa 1b       	sub	r26, r26
    29b2:	bb 1b       	sub	r27, r27
    29b4:	fd 01       	movw	r30, r26
    29b6:	0d c0       	rjmp	.+26     	; 0x29d2 <__udivmodsi4_ep>

000029b8 <__udivmodsi4_loop>:
    29b8:	aa 1f       	adc	r26, r26
    29ba:	bb 1f       	adc	r27, r27
    29bc:	ee 1f       	adc	r30, r30
    29be:	ff 1f       	adc	r31, r31
    29c0:	a2 17       	cp	r26, r18
    29c2:	b3 07       	cpc	r27, r19
    29c4:	e4 07       	cpc	r30, r20
    29c6:	f5 07       	cpc	r31, r21
    29c8:	20 f0       	brcs	.+8      	; 0x29d2 <__udivmodsi4_ep>
    29ca:	a2 1b       	sub	r26, r18
    29cc:	b3 0b       	sbc	r27, r19
    29ce:	e4 0b       	sbc	r30, r20
    29d0:	f5 0b       	sbc	r31, r21

000029d2 <__udivmodsi4_ep>:
    29d2:	66 1f       	adc	r22, r22
    29d4:	77 1f       	adc	r23, r23
    29d6:	88 1f       	adc	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	1a 94       	dec	r1
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <__udivmodsi4_loop>
    29de:	60 95       	com	r22
    29e0:	70 95       	com	r23
    29e2:	80 95       	com	r24
    29e4:	90 95       	com	r25
    29e6:	9b 01       	movw	r18, r22
    29e8:	ac 01       	movw	r20, r24
    29ea:	bd 01       	movw	r22, r26
    29ec:	cf 01       	movw	r24, r30
    29ee:	08 95       	ret

000029f0 <__divmodsi4>:
    29f0:	05 2e       	mov	r0, r21
    29f2:	97 fb       	bst	r25, 7
    29f4:	16 f4       	brtc	.+4      	; 0x29fa <__divmodsi4+0xa>
    29f6:	00 94       	com	r0
    29f8:	0f d0       	rcall	.+30     	; 0x2a18 <__negsi2>
    29fa:	57 fd       	sbrc	r21, 7
    29fc:	05 d0       	rcall	.+10     	; 0x2a08 <__divmodsi4_neg2>
    29fe:	d6 df       	rcall	.-84     	; 0x29ac <__udivmodsi4>
    2a00:	07 fc       	sbrc	r0, 7
    2a02:	02 d0       	rcall	.+4      	; 0x2a08 <__divmodsi4_neg2>
    2a04:	46 f4       	brtc	.+16     	; 0x2a16 <__divmodsi4_exit>
    2a06:	08 c0       	rjmp	.+16     	; 0x2a18 <__negsi2>

00002a08 <__divmodsi4_neg2>:
    2a08:	50 95       	com	r21
    2a0a:	40 95       	com	r20
    2a0c:	30 95       	com	r19
    2a0e:	21 95       	neg	r18
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	4f 4f       	sbci	r20, 0xFF	; 255
    2a14:	5f 4f       	sbci	r21, 0xFF	; 255

00002a16 <__divmodsi4_exit>:
    2a16:	08 95       	ret

00002a18 <__negsi2>:
    2a18:	90 95       	com	r25
    2a1a:	80 95       	com	r24
    2a1c:	70 95       	com	r23
    2a1e:	61 95       	neg	r22
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	8f 4f       	sbci	r24, 0xFF	; 255
    2a24:	9f 4f       	sbci	r25, 0xFF	; 255
    2a26:	08 95       	ret

00002a28 <__tablejump2__>:
    2a28:	ee 0f       	add	r30, r30
    2a2a:	ff 1f       	adc	r31, r31

00002a2c <__tablejump__>:
    2a2c:	05 90       	lpm	r0, Z+
    2a2e:	f4 91       	lpm	r31, Z
    2a30:	e0 2d       	mov	r30, r0
    2a32:	19 94       	eijmp

00002a34 <__umulhisi3>:
    2a34:	a2 9f       	mul	r26, r18
    2a36:	b0 01       	movw	r22, r0
    2a38:	b3 9f       	mul	r27, r19
    2a3a:	c0 01       	movw	r24, r0
    2a3c:	a3 9f       	mul	r26, r19
    2a3e:	70 0d       	add	r23, r0
    2a40:	81 1d       	adc	r24, r1
    2a42:	11 24       	eor	r1, r1
    2a44:	91 1d       	adc	r25, r1
    2a46:	b2 9f       	mul	r27, r18
    2a48:	70 0d       	add	r23, r0
    2a4a:	81 1d       	adc	r24, r1
    2a4c:	11 24       	eor	r1, r1
    2a4e:	91 1d       	adc	r25, r1
    2a50:	08 95       	ret

00002a52 <__udivmodhi4>:
    2a52:	aa 1b       	sub	r26, r26
    2a54:	bb 1b       	sub	r27, r27
    2a56:	51 e1       	ldi	r21, 0x11	; 17
    2a58:	07 c0       	rjmp	.+14     	; 0x2a68 <__udivmodhi4_ep>

00002a5a <__udivmodhi4_loop>:
    2a5a:	aa 1f       	adc	r26, r26
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	a6 17       	cp	r26, r22
    2a60:	b7 07       	cpc	r27, r23
    2a62:	10 f0       	brcs	.+4      	; 0x2a68 <__udivmodhi4_ep>
    2a64:	a6 1b       	sub	r26, r22
    2a66:	b7 0b       	sbc	r27, r23

00002a68 <__udivmodhi4_ep>:
    2a68:	88 1f       	adc	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	5a 95       	dec	r21
    2a6e:	a9 f7       	brne	.-22     	; 0x2a5a <__udivmodhi4_loop>
    2a70:	80 95       	com	r24
    2a72:	90 95       	com	r25
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	08 95       	ret

00002a7a <malloc>:
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	91 05       	cpc	r25, r1
    2a82:	10 f4       	brcc	.+4      	; 0x2a88 <malloc+0xe>
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	e0 91 09 0e 	lds	r30, 0x0E09
    2a8c:	f0 91 0a 0e 	lds	r31, 0x0E0A
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	a0 e0       	ldi	r26, 0x00	; 0
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	30 97       	sbiw	r30, 0x00	; 0
    2a9a:	39 f1       	breq	.+78     	; 0x2aea <malloc+0x70>
    2a9c:	40 81       	ld	r20, Z
    2a9e:	51 81       	ldd	r21, Z+1	; 0x01
    2aa0:	48 17       	cp	r20, r24
    2aa2:	59 07       	cpc	r21, r25
    2aa4:	b8 f0       	brcs	.+46     	; 0x2ad4 <malloc+0x5a>
    2aa6:	48 17       	cp	r20, r24
    2aa8:	59 07       	cpc	r21, r25
    2aaa:	71 f4       	brne	.+28     	; 0x2ac8 <malloc+0x4e>
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	10 97       	sbiw	r26, 0x00	; 0
    2ab2:	29 f0       	breq	.+10     	; 0x2abe <malloc+0x44>
    2ab4:	13 96       	adiw	r26, 0x03	; 3
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	12 97       	sbiw	r26, 0x02	; 2
    2abc:	2c c0       	rjmp	.+88     	; 0x2b16 <malloc+0x9c>
    2abe:	90 93 0a 0e 	sts	0x0E0A, r25
    2ac2:	80 93 09 0e 	sts	0x0E09, r24
    2ac6:	27 c0       	rjmp	.+78     	; 0x2b16 <malloc+0x9c>
    2ac8:	21 15       	cp	r18, r1
    2aca:	31 05       	cpc	r19, r1
    2acc:	31 f0       	breq	.+12     	; 0x2ada <malloc+0x60>
    2ace:	42 17       	cp	r20, r18
    2ad0:	53 07       	cpc	r21, r19
    2ad2:	18 f0       	brcs	.+6      	; 0x2ada <malloc+0x60>
    2ad4:	a9 01       	movw	r20, r18
    2ad6:	db 01       	movw	r26, r22
    2ad8:	01 c0       	rjmp	.+2      	; 0x2adc <malloc+0x62>
    2ada:	ef 01       	movw	r28, r30
    2adc:	9a 01       	movw	r18, r20
    2ade:	bd 01       	movw	r22, r26
    2ae0:	df 01       	movw	r26, r30
    2ae2:	02 80       	ldd	r0, Z+2	; 0x02
    2ae4:	f3 81       	ldd	r31, Z+3	; 0x03
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	d7 cf       	rjmp	.-82     	; 0x2a98 <malloc+0x1e>
    2aea:	21 15       	cp	r18, r1
    2aec:	31 05       	cpc	r19, r1
    2aee:	f9 f0       	breq	.+62     	; 0x2b2e <malloc+0xb4>
    2af0:	28 1b       	sub	r18, r24
    2af2:	39 0b       	sbc	r19, r25
    2af4:	24 30       	cpi	r18, 0x04	; 4
    2af6:	31 05       	cpc	r19, r1
    2af8:	80 f4       	brcc	.+32     	; 0x2b1a <malloc+0xa0>
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	9b 81       	ldd	r25, Y+3	; 0x03
    2afe:	61 15       	cp	r22, r1
    2b00:	71 05       	cpc	r23, r1
    2b02:	21 f0       	breq	.+8      	; 0x2b0c <malloc+0x92>
    2b04:	fb 01       	movw	r30, r22
    2b06:	93 83       	std	Z+3, r25	; 0x03
    2b08:	82 83       	std	Z+2, r24	; 0x02
    2b0a:	04 c0       	rjmp	.+8      	; 0x2b14 <malloc+0x9a>
    2b0c:	90 93 0a 0e 	sts	0x0E0A, r25
    2b10:	80 93 09 0e 	sts	0x0E09, r24
    2b14:	fe 01       	movw	r30, r28
    2b16:	32 96       	adiw	r30, 0x02	; 2
    2b18:	44 c0       	rjmp	.+136    	; 0x2ba2 <malloc+0x128>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e2 0f       	add	r30, r18
    2b1e:	f3 1f       	adc	r31, r19
    2b20:	81 93       	st	Z+, r24
    2b22:	91 93       	st	Z+, r25
    2b24:	22 50       	subi	r18, 0x02	; 2
    2b26:	31 09       	sbc	r19, r1
    2b28:	39 83       	std	Y+1, r19	; 0x01
    2b2a:	28 83       	st	Y, r18
    2b2c:	3a c0       	rjmp	.+116    	; 0x2ba2 <malloc+0x128>
    2b2e:	20 91 07 0e 	lds	r18, 0x0E07
    2b32:	30 91 08 0e 	lds	r19, 0x0E08
    2b36:	23 2b       	or	r18, r19
    2b38:	41 f4       	brne	.+16     	; 0x2b4a <malloc+0xd0>
    2b3a:	20 91 02 02 	lds	r18, 0x0202
    2b3e:	30 91 03 02 	lds	r19, 0x0203
    2b42:	30 93 08 0e 	sts	0x0E08, r19
    2b46:	20 93 07 0e 	sts	0x0E07, r18
    2b4a:	20 91 00 02 	lds	r18, 0x0200
    2b4e:	30 91 01 02 	lds	r19, 0x0201
    2b52:	21 15       	cp	r18, r1
    2b54:	31 05       	cpc	r19, r1
    2b56:	41 f4       	brne	.+16     	; 0x2b68 <malloc+0xee>
    2b58:	2d b7       	in	r18, 0x3d	; 61
    2b5a:	3e b7       	in	r19, 0x3e	; 62
    2b5c:	40 91 04 02 	lds	r20, 0x0204
    2b60:	50 91 05 02 	lds	r21, 0x0205
    2b64:	24 1b       	sub	r18, r20
    2b66:	35 0b       	sbc	r19, r21
    2b68:	e0 91 07 0e 	lds	r30, 0x0E07
    2b6c:	f0 91 08 0e 	lds	r31, 0x0E08
    2b70:	e2 17       	cp	r30, r18
    2b72:	f3 07       	cpc	r31, r19
    2b74:	a0 f4       	brcc	.+40     	; 0x2b9e <malloc+0x124>
    2b76:	2e 1b       	sub	r18, r30
    2b78:	3f 0b       	sbc	r19, r31
    2b7a:	28 17       	cp	r18, r24
    2b7c:	39 07       	cpc	r19, r25
    2b7e:	78 f0       	brcs	.+30     	; 0x2b9e <malloc+0x124>
    2b80:	ac 01       	movw	r20, r24
    2b82:	4e 5f       	subi	r20, 0xFE	; 254
    2b84:	5f 4f       	sbci	r21, 0xFF	; 255
    2b86:	24 17       	cp	r18, r20
    2b88:	35 07       	cpc	r19, r21
    2b8a:	48 f0       	brcs	.+18     	; 0x2b9e <malloc+0x124>
    2b8c:	4e 0f       	add	r20, r30
    2b8e:	5f 1f       	adc	r21, r31
    2b90:	50 93 08 0e 	sts	0x0E08, r21
    2b94:	40 93 07 0e 	sts	0x0E07, r20
    2b98:	81 93       	st	Z+, r24
    2b9a:	91 93       	st	Z+, r25
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <malloc+0x128>
    2b9e:	e0 e0       	ldi	r30, 0x00	; 0
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	cf 01       	movw	r24, r30
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	08 95       	ret

00002baa <free>:
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <free+0xa>
    2bb2:	87 c0       	rjmp	.+270    	; 0x2cc2 <free+0x118>
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	32 97       	sbiw	r30, 0x02	; 2
    2bb8:	13 82       	std	Z+3, r1	; 0x03
    2bba:	12 82       	std	Z+2, r1	; 0x02
    2bbc:	c0 91 09 0e 	lds	r28, 0x0E09
    2bc0:	d0 91 0a 0e 	lds	r29, 0x0E0A
    2bc4:	20 97       	sbiw	r28, 0x00	; 0
    2bc6:	81 f4       	brne	.+32     	; 0x2be8 <free+0x3e>
    2bc8:	20 81       	ld	r18, Z
    2bca:	31 81       	ldd	r19, Z+1	; 0x01
    2bcc:	28 0f       	add	r18, r24
    2bce:	39 1f       	adc	r19, r25
    2bd0:	80 91 07 0e 	lds	r24, 0x0E07
    2bd4:	90 91 08 0e 	lds	r25, 0x0E08
    2bd8:	82 17       	cp	r24, r18
    2bda:	93 07       	cpc	r25, r19
    2bdc:	79 f5       	brne	.+94     	; 0x2c3c <free+0x92>
    2bde:	f0 93 08 0e 	sts	0x0E08, r31
    2be2:	e0 93 07 0e 	sts	0x0E07, r30
    2be6:	6d c0       	rjmp	.+218    	; 0x2cc2 <free+0x118>
    2be8:	de 01       	movw	r26, r28
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	ae 17       	cp	r26, r30
    2bf0:	bf 07       	cpc	r27, r31
    2bf2:	50 f4       	brcc	.+20     	; 0x2c08 <free+0x5e>
    2bf4:	12 96       	adiw	r26, 0x02	; 2
    2bf6:	4d 91       	ld	r20, X+
    2bf8:	5c 91       	ld	r21, X
    2bfa:	13 97       	sbiw	r26, 0x03	; 3
    2bfc:	9d 01       	movw	r18, r26
    2bfe:	41 15       	cp	r20, r1
    2c00:	51 05       	cpc	r21, r1
    2c02:	09 f1       	breq	.+66     	; 0x2c46 <free+0x9c>
    2c04:	da 01       	movw	r26, r20
    2c06:	f3 cf       	rjmp	.-26     	; 0x2bee <free+0x44>
    2c08:	b3 83       	std	Z+3, r27	; 0x03
    2c0a:	a2 83       	std	Z+2, r26	; 0x02
    2c0c:	40 81       	ld	r20, Z
    2c0e:	51 81       	ldd	r21, Z+1	; 0x01
    2c10:	84 0f       	add	r24, r20
    2c12:	95 1f       	adc	r25, r21
    2c14:	8a 17       	cp	r24, r26
    2c16:	9b 07       	cpc	r25, r27
    2c18:	71 f4       	brne	.+28     	; 0x2c36 <free+0x8c>
    2c1a:	8d 91       	ld	r24, X+
    2c1c:	9c 91       	ld	r25, X
    2c1e:	11 97       	sbiw	r26, 0x01	; 1
    2c20:	84 0f       	add	r24, r20
    2c22:	95 1f       	adc	r25, r21
    2c24:	02 96       	adiw	r24, 0x02	; 2
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	80 83       	st	Z, r24
    2c2a:	12 96       	adiw	r26, 0x02	; 2
    2c2c:	8d 91       	ld	r24, X+
    2c2e:	9c 91       	ld	r25, X
    2c30:	13 97       	sbiw	r26, 0x03	; 3
    2c32:	93 83       	std	Z+3, r25	; 0x03
    2c34:	82 83       	std	Z+2, r24	; 0x02
    2c36:	21 15       	cp	r18, r1
    2c38:	31 05       	cpc	r19, r1
    2c3a:	29 f4       	brne	.+10     	; 0x2c46 <free+0x9c>
    2c3c:	f0 93 0a 0e 	sts	0x0E0A, r31
    2c40:	e0 93 09 0e 	sts	0x0E09, r30
    2c44:	3e c0       	rjmp	.+124    	; 0x2cc2 <free+0x118>
    2c46:	d9 01       	movw	r26, r18
    2c48:	13 96       	adiw	r26, 0x03	; 3
    2c4a:	fc 93       	st	X, r31
    2c4c:	ee 93       	st	-X, r30
    2c4e:	12 97       	sbiw	r26, 0x02	; 2
    2c50:	4d 91       	ld	r20, X+
    2c52:	5d 91       	ld	r21, X+
    2c54:	a4 0f       	add	r26, r20
    2c56:	b5 1f       	adc	r27, r21
    2c58:	ea 17       	cp	r30, r26
    2c5a:	fb 07       	cpc	r31, r27
    2c5c:	79 f4       	brne	.+30     	; 0x2c7c <free+0xd2>
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	84 0f       	add	r24, r20
    2c64:	95 1f       	adc	r25, r21
    2c66:	02 96       	adiw	r24, 0x02	; 2
    2c68:	d9 01       	movw	r26, r18
    2c6a:	11 96       	adiw	r26, 0x01	; 1
    2c6c:	9c 93       	st	X, r25
    2c6e:	8e 93       	st	-X, r24
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	13 96       	adiw	r26, 0x03	; 3
    2c76:	9c 93       	st	X, r25
    2c78:	8e 93       	st	-X, r24
    2c7a:	12 97       	sbiw	r26, 0x02	; 2
    2c7c:	e0 e0       	ldi	r30, 0x00	; 0
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	19 f0       	breq	.+6      	; 0x2c8e <free+0xe4>
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ec 01       	movw	r28, r24
    2c8c:	f9 cf       	rjmp	.-14     	; 0x2c80 <free+0xd6>
    2c8e:	ce 01       	movw	r24, r28
    2c90:	02 96       	adiw	r24, 0x02	; 2
    2c92:	28 81       	ld	r18, Y
    2c94:	39 81       	ldd	r19, Y+1	; 0x01
    2c96:	82 0f       	add	r24, r18
    2c98:	93 1f       	adc	r25, r19
    2c9a:	20 91 07 0e 	lds	r18, 0x0E07
    2c9e:	30 91 08 0e 	lds	r19, 0x0E08
    2ca2:	28 17       	cp	r18, r24
    2ca4:	39 07       	cpc	r19, r25
    2ca6:	69 f4       	brne	.+26     	; 0x2cc2 <free+0x118>
    2ca8:	30 97       	sbiw	r30, 0x00	; 0
    2caa:	29 f4       	brne	.+10     	; 0x2cb6 <free+0x10c>
    2cac:	10 92 0a 0e 	sts	0x0E0A, r1
    2cb0:	10 92 09 0e 	sts	0x0E09, r1
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <free+0x110>
    2cb6:	13 82       	std	Z+3, r1	; 0x03
    2cb8:	12 82       	std	Z+2, r1	; 0x02
    2cba:	d0 93 08 0e 	sts	0x0E08, r29
    2cbe:	c0 93 07 0e 	sts	0x0E07, r28
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	08 95       	ret

00002cc8 <atoi>:
    2cc8:	fc 01       	movw	r30, r24
    2cca:	88 27       	eor	r24, r24
    2ccc:	99 27       	eor	r25, r25
    2cce:	e8 94       	clt
    2cd0:	21 91       	ld	r18, Z+
    2cd2:	20 32       	cpi	r18, 0x20	; 32
    2cd4:	e9 f3       	breq	.-6      	; 0x2cd0 <atoi+0x8>
    2cd6:	29 30       	cpi	r18, 0x09	; 9
    2cd8:	10 f0       	brcs	.+4      	; 0x2cde <atoi+0x16>
    2cda:	2e 30       	cpi	r18, 0x0E	; 14
    2cdc:	c8 f3       	brcs	.-14     	; 0x2cd0 <atoi+0x8>
    2cde:	2b 32       	cpi	r18, 0x2B	; 43
    2ce0:	39 f0       	breq	.+14     	; 0x2cf0 <atoi+0x28>
    2ce2:	2d 32       	cpi	r18, 0x2D	; 45
    2ce4:	31 f4       	brne	.+12     	; 0x2cf2 <atoi+0x2a>
    2ce6:	68 94       	set
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <atoi+0x28>
    2cea:	14 d0       	rcall	.+40     	; 0x2d14 <__mulhi_const_10>
    2cec:	82 0f       	add	r24, r18
    2cee:	91 1d       	adc	r25, r1
    2cf0:	21 91       	ld	r18, Z+
    2cf2:	20 53       	subi	r18, 0x30	; 48
    2cf4:	2a 30       	cpi	r18, 0x0A	; 10
    2cf6:	c8 f3       	brcs	.-14     	; 0x2cea <atoi+0x22>
    2cf8:	1e f4       	brtc	.+6      	; 0x2d00 <atoi+0x38>
    2cfa:	90 95       	com	r25
    2cfc:	81 95       	neg	r24
    2cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2d00:	08 95       	ret

00002d02 <memcpy>:
    2d02:	fb 01       	movw	r30, r22
    2d04:	dc 01       	movw	r26, r24
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <memcpy+0xa>
    2d08:	01 90       	ld	r0, Z+
    2d0a:	0d 92       	st	X+, r0
    2d0c:	41 50       	subi	r20, 0x01	; 1
    2d0e:	50 40       	sbci	r21, 0x00	; 0
    2d10:	d8 f7       	brcc	.-10     	; 0x2d08 <memcpy+0x6>
    2d12:	08 95       	ret

00002d14 <__mulhi_const_10>:
    2d14:	7a e0       	ldi	r23, 0x0A	; 10
    2d16:	97 9f       	mul	r25, r23
    2d18:	90 2d       	mov	r25, r0
    2d1a:	87 9f       	mul	r24, r23
    2d1c:	80 2d       	mov	r24, r0
    2d1e:	91 0d       	add	r25, r1
    2d20:	11 24       	eor	r1, r1
    2d22:	08 95       	ret

00002d24 <sprintf>:
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	2e 97       	sbiw	r28, 0x0e	; 14
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	0e 89       	ldd	r16, Y+22	; 0x16
    2d3e:	1f 89       	ldd	r17, Y+23	; 0x17
    2d40:	86 e0       	ldi	r24, 0x06	; 6
    2d42:	8c 83       	std	Y+4, r24	; 0x04
    2d44:	1a 83       	std	Y+2, r17	; 0x02
    2d46:	09 83       	std	Y+1, r16	; 0x01
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	9f e7       	ldi	r25, 0x7F	; 127
    2d4c:	9e 83       	std	Y+6, r25	; 0x06
    2d4e:	8d 83       	std	Y+5, r24	; 0x05
    2d50:	ae 01       	movw	r20, r28
    2d52:	46 5e       	subi	r20, 0xE6	; 230
    2d54:	5f 4f       	sbci	r21, 0xFF	; 255
    2d56:	68 8d       	ldd	r22, Y+24	; 0x18
    2d58:	79 8d       	ldd	r23, Y+25	; 0x19
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	10 d0       	rcall	.+32     	; 0x2d80 <vfprintf>
    2d60:	ef 81       	ldd	r30, Y+7	; 0x07
    2d62:	f8 85       	ldd	r31, Y+8	; 0x08
    2d64:	e0 0f       	add	r30, r16
    2d66:	f1 1f       	adc	r31, r17
    2d68:	10 82       	st	Z, r1
    2d6a:	2e 96       	adiw	r28, 0x0e	; 14
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	08 95       	ret

00002d80 <vfprintf>:
    2d80:	2f 92       	push	r2
    2d82:	3f 92       	push	r3
    2d84:	4f 92       	push	r4
    2d86:	5f 92       	push	r5
    2d88:	6f 92       	push	r6
    2d8a:	7f 92       	push	r7
    2d8c:	8f 92       	push	r8
    2d8e:	9f 92       	push	r9
    2d90:	af 92       	push	r10
    2d92:	bf 92       	push	r11
    2d94:	cf 92       	push	r12
    2d96:	df 92       	push	r13
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	2c 97       	sbiw	r28, 0x0c	; 12
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	7c 01       	movw	r14, r24
    2db6:	6b 01       	movw	r12, r22
    2db8:	8a 01       	movw	r16, r20
    2dba:	fc 01       	movw	r30, r24
    2dbc:	17 82       	std	Z+7, r1	; 0x07
    2dbe:	16 82       	std	Z+6, r1	; 0x06
    2dc0:	83 81       	ldd	r24, Z+3	; 0x03
    2dc2:	81 ff       	sbrs	r24, 1
    2dc4:	b0 c1       	rjmp	.+864    	; 0x3126 <vfprintf+0x3a6>
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	4c 01       	movw	r8, r24
    2dcc:	f7 01       	movw	r30, r14
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	f6 01       	movw	r30, r12
    2dd2:	93 fd       	sbrc	r25, 3
    2dd4:	85 91       	lpm	r24, Z+
    2dd6:	93 ff       	sbrs	r25, 3
    2dd8:	81 91       	ld	r24, Z+
    2dda:	6f 01       	movw	r12, r30
    2ddc:	88 23       	and	r24, r24
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <vfprintf+0x62>
    2de0:	9e c1       	rjmp	.+828    	; 0x311e <vfprintf+0x39e>
    2de2:	85 32       	cpi	r24, 0x25	; 37
    2de4:	39 f4       	brne	.+14     	; 0x2df4 <vfprintf+0x74>
    2de6:	93 fd       	sbrc	r25, 3
    2de8:	85 91       	lpm	r24, Z+
    2dea:	93 ff       	sbrs	r25, 3
    2dec:	81 91       	ld	r24, Z+
    2dee:	6f 01       	movw	r12, r30
    2df0:	85 32       	cpi	r24, 0x25	; 37
    2df2:	21 f4       	brne	.+8      	; 0x2dfc <vfprintf+0x7c>
    2df4:	b7 01       	movw	r22, r14
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	c7 d1       	rcall	.+910    	; 0x3188 <fputc>
    2dfa:	e8 cf       	rjmp	.-48     	; 0x2dcc <vfprintf+0x4c>
    2dfc:	51 2c       	mov	r5, r1
    2dfe:	31 2c       	mov	r3, r1
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	20 32       	cpi	r18, 0x20	; 32
    2e04:	a0 f4       	brcc	.+40     	; 0x2e2e <vfprintf+0xae>
    2e06:	8b 32       	cpi	r24, 0x2B	; 43
    2e08:	69 f0       	breq	.+26     	; 0x2e24 <vfprintf+0xa4>
    2e0a:	30 f4       	brcc	.+12     	; 0x2e18 <vfprintf+0x98>
    2e0c:	80 32       	cpi	r24, 0x20	; 32
    2e0e:	59 f0       	breq	.+22     	; 0x2e26 <vfprintf+0xa6>
    2e10:	83 32       	cpi	r24, 0x23	; 35
    2e12:	69 f4       	brne	.+26     	; 0x2e2e <vfprintf+0xae>
    2e14:	20 61       	ori	r18, 0x10	; 16
    2e16:	2c c0       	rjmp	.+88     	; 0x2e70 <vfprintf+0xf0>
    2e18:	8d 32       	cpi	r24, 0x2D	; 45
    2e1a:	39 f0       	breq	.+14     	; 0x2e2a <vfprintf+0xaa>
    2e1c:	80 33       	cpi	r24, 0x30	; 48
    2e1e:	39 f4       	brne	.+14     	; 0x2e2e <vfprintf+0xae>
    2e20:	21 60       	ori	r18, 0x01	; 1
    2e22:	26 c0       	rjmp	.+76     	; 0x2e70 <vfprintf+0xf0>
    2e24:	22 60       	ori	r18, 0x02	; 2
    2e26:	24 60       	ori	r18, 0x04	; 4
    2e28:	23 c0       	rjmp	.+70     	; 0x2e70 <vfprintf+0xf0>
    2e2a:	28 60       	ori	r18, 0x08	; 8
    2e2c:	21 c0       	rjmp	.+66     	; 0x2e70 <vfprintf+0xf0>
    2e2e:	27 fd       	sbrc	r18, 7
    2e30:	27 c0       	rjmp	.+78     	; 0x2e80 <vfprintf+0x100>
    2e32:	30 ed       	ldi	r19, 0xD0	; 208
    2e34:	38 0f       	add	r19, r24
    2e36:	3a 30       	cpi	r19, 0x0A	; 10
    2e38:	78 f4       	brcc	.+30     	; 0x2e58 <vfprintf+0xd8>
    2e3a:	26 ff       	sbrs	r18, 6
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <vfprintf+0xca>
    2e3e:	fa e0       	ldi	r31, 0x0A	; 10
    2e40:	5f 9e       	mul	r5, r31
    2e42:	30 0d       	add	r19, r0
    2e44:	11 24       	eor	r1, r1
    2e46:	53 2e       	mov	r5, r19
    2e48:	13 c0       	rjmp	.+38     	; 0x2e70 <vfprintf+0xf0>
    2e4a:	8a e0       	ldi	r24, 0x0A	; 10
    2e4c:	38 9e       	mul	r3, r24
    2e4e:	30 0d       	add	r19, r0
    2e50:	11 24       	eor	r1, r1
    2e52:	33 2e       	mov	r3, r19
    2e54:	20 62       	ori	r18, 0x20	; 32
    2e56:	0c c0       	rjmp	.+24     	; 0x2e70 <vfprintf+0xf0>
    2e58:	8e 32       	cpi	r24, 0x2E	; 46
    2e5a:	21 f4       	brne	.+8      	; 0x2e64 <vfprintf+0xe4>
    2e5c:	26 fd       	sbrc	r18, 6
    2e5e:	5f c1       	rjmp	.+702    	; 0x311e <vfprintf+0x39e>
    2e60:	20 64       	ori	r18, 0x40	; 64
    2e62:	06 c0       	rjmp	.+12     	; 0x2e70 <vfprintf+0xf0>
    2e64:	8c 36       	cpi	r24, 0x6C	; 108
    2e66:	11 f4       	brne	.+4      	; 0x2e6c <vfprintf+0xec>
    2e68:	20 68       	ori	r18, 0x80	; 128
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <vfprintf+0xf0>
    2e6c:	88 36       	cpi	r24, 0x68	; 104
    2e6e:	41 f4       	brne	.+16     	; 0x2e80 <vfprintf+0x100>
    2e70:	f6 01       	movw	r30, r12
    2e72:	93 fd       	sbrc	r25, 3
    2e74:	85 91       	lpm	r24, Z+
    2e76:	93 ff       	sbrs	r25, 3
    2e78:	81 91       	ld	r24, Z+
    2e7a:	6f 01       	movw	r12, r30
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	c1 cf       	rjmp	.-126    	; 0x2e02 <vfprintf+0x82>
    2e80:	98 2f       	mov	r25, r24
    2e82:	9f 7d       	andi	r25, 0xDF	; 223
    2e84:	95 54       	subi	r25, 0x45	; 69
    2e86:	93 30       	cpi	r25, 0x03	; 3
    2e88:	28 f4       	brcc	.+10     	; 0x2e94 <vfprintf+0x114>
    2e8a:	0c 5f       	subi	r16, 0xFC	; 252
    2e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8e:	ff e3       	ldi	r31, 0x3F	; 63
    2e90:	f9 83       	std	Y+1, r31	; 0x01
    2e92:	0d c0       	rjmp	.+26     	; 0x2eae <vfprintf+0x12e>
    2e94:	83 36       	cpi	r24, 0x63	; 99
    2e96:	31 f0       	breq	.+12     	; 0x2ea4 <vfprintf+0x124>
    2e98:	83 37       	cpi	r24, 0x73	; 115
    2e9a:	71 f0       	breq	.+28     	; 0x2eb8 <vfprintf+0x138>
    2e9c:	83 35       	cpi	r24, 0x53	; 83
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <vfprintf+0x122>
    2ea0:	57 c0       	rjmp	.+174    	; 0x2f50 <vfprintf+0x1d0>
    2ea2:	21 c0       	rjmp	.+66     	; 0x2ee6 <vfprintf+0x166>
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	80 81       	ld	r24, Z
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	0e 5f       	subi	r16, 0xFE	; 254
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	44 24       	eor	r4, r4
    2eb0:	43 94       	inc	r4
    2eb2:	51 2c       	mov	r5, r1
    2eb4:	54 01       	movw	r10, r8
    2eb6:	14 c0       	rjmp	.+40     	; 0x2ee0 <vfprintf+0x160>
    2eb8:	38 01       	movw	r6, r16
    2eba:	f2 e0       	ldi	r31, 0x02	; 2
    2ebc:	6f 0e       	add	r6, r31
    2ebe:	71 1c       	adc	r7, r1
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	a0 80       	ld	r10, Z
    2ec4:	b1 80       	ldd	r11, Z+1	; 0x01
    2ec6:	26 ff       	sbrs	r18, 6
    2ec8:	03 c0       	rjmp	.+6      	; 0x2ed0 <vfprintf+0x150>
    2eca:	65 2d       	mov	r22, r5
    2ecc:	70 e0       	ldi	r23, 0x00	; 0
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <vfprintf+0x154>
    2ed0:	6f ef       	ldi	r22, 0xFF	; 255
    2ed2:	7f ef       	ldi	r23, 0xFF	; 255
    2ed4:	c5 01       	movw	r24, r10
    2ed6:	2c 87       	std	Y+12, r18	; 0x0c
    2ed8:	4c d1       	rcall	.+664    	; 0x3172 <strnlen>
    2eda:	2c 01       	movw	r4, r24
    2edc:	83 01       	movw	r16, r6
    2ede:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ee0:	2f 77       	andi	r18, 0x7F	; 127
    2ee2:	22 2e       	mov	r2, r18
    2ee4:	16 c0       	rjmp	.+44     	; 0x2f12 <vfprintf+0x192>
    2ee6:	38 01       	movw	r6, r16
    2ee8:	f2 e0       	ldi	r31, 0x02	; 2
    2eea:	6f 0e       	add	r6, r31
    2eec:	71 1c       	adc	r7, r1
    2eee:	f8 01       	movw	r30, r16
    2ef0:	a0 80       	ld	r10, Z
    2ef2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ef4:	26 ff       	sbrs	r18, 6
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <vfprintf+0x17e>
    2ef8:	65 2d       	mov	r22, r5
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <vfprintf+0x182>
    2efe:	6f ef       	ldi	r22, 0xFF	; 255
    2f00:	7f ef       	ldi	r23, 0xFF	; 255
    2f02:	c5 01       	movw	r24, r10
    2f04:	2c 87       	std	Y+12, r18	; 0x0c
    2f06:	2a d1       	rcall	.+596    	; 0x315c <strnlen_P>
    2f08:	2c 01       	movw	r4, r24
    2f0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f0c:	20 68       	ori	r18, 0x80	; 128
    2f0e:	22 2e       	mov	r2, r18
    2f10:	83 01       	movw	r16, r6
    2f12:	23 fc       	sbrc	r2, 3
    2f14:	19 c0       	rjmp	.+50     	; 0x2f48 <vfprintf+0x1c8>
    2f16:	83 2d       	mov	r24, r3
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	48 16       	cp	r4, r24
    2f1c:	59 06       	cpc	r5, r25
    2f1e:	a0 f4       	brcc	.+40     	; 0x2f48 <vfprintf+0x1c8>
    2f20:	b7 01       	movw	r22, r14
    2f22:	80 e2       	ldi	r24, 0x20	; 32
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	30 d1       	rcall	.+608    	; 0x3188 <fputc>
    2f28:	3a 94       	dec	r3
    2f2a:	f5 cf       	rjmp	.-22     	; 0x2f16 <vfprintf+0x196>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	27 fc       	sbrc	r2, 7
    2f30:	85 91       	lpm	r24, Z+
    2f32:	27 fe       	sbrs	r2, 7
    2f34:	81 91       	ld	r24, Z+
    2f36:	5f 01       	movw	r10, r30
    2f38:	b7 01       	movw	r22, r14
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	25 d1       	rcall	.+586    	; 0x3188 <fputc>
    2f3e:	31 10       	cpse	r3, r1
    2f40:	3a 94       	dec	r3
    2f42:	f1 e0       	ldi	r31, 0x01	; 1
    2f44:	4f 1a       	sub	r4, r31
    2f46:	51 08       	sbc	r5, r1
    2f48:	41 14       	cp	r4, r1
    2f4a:	51 04       	cpc	r5, r1
    2f4c:	79 f7       	brne	.-34     	; 0x2f2c <vfprintf+0x1ac>
    2f4e:	de c0       	rjmp	.+444    	; 0x310c <vfprintf+0x38c>
    2f50:	84 36       	cpi	r24, 0x64	; 100
    2f52:	11 f0       	breq	.+4      	; 0x2f58 <vfprintf+0x1d8>
    2f54:	89 36       	cpi	r24, 0x69	; 105
    2f56:	31 f5       	brne	.+76     	; 0x2fa4 <vfprintf+0x224>
    2f58:	f8 01       	movw	r30, r16
    2f5a:	27 ff       	sbrs	r18, 7
    2f5c:	07 c0       	rjmp	.+14     	; 0x2f6c <vfprintf+0x1ec>
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	0c 5f       	subi	r16, 0xFC	; 252
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	08 c0       	rjmp	.+16     	; 0x2f7c <vfprintf+0x1fc>
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	88 27       	eor	r24, r24
    2f72:	77 fd       	sbrc	r23, 7
    2f74:	80 95       	com	r24
    2f76:	98 2f       	mov	r25, r24
    2f78:	0e 5f       	subi	r16, 0xFE	; 254
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	2f 76       	andi	r18, 0x6F	; 111
    2f7e:	b2 2e       	mov	r11, r18
    2f80:	97 ff       	sbrs	r25, 7
    2f82:	09 c0       	rjmp	.+18     	; 0x2f96 <vfprintf+0x216>
    2f84:	90 95       	com	r25
    2f86:	80 95       	com	r24
    2f88:	70 95       	com	r23
    2f8a:	61 95       	neg	r22
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f90:	9f 4f       	sbci	r25, 0xFF	; 255
    2f92:	20 68       	ori	r18, 0x80	; 128
    2f94:	b2 2e       	mov	r11, r18
    2f96:	2a e0       	ldi	r18, 0x0A	; 10
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	a4 01       	movw	r20, r8
    2f9c:	27 d1       	rcall	.+590    	; 0x31ec <__ultoa_invert>
    2f9e:	a8 2e       	mov	r10, r24
    2fa0:	a8 18       	sub	r10, r8
    2fa2:	43 c0       	rjmp	.+134    	; 0x302a <vfprintf+0x2aa>
    2fa4:	85 37       	cpi	r24, 0x75	; 117
    2fa6:	29 f4       	brne	.+10     	; 0x2fb2 <vfprintf+0x232>
    2fa8:	2f 7e       	andi	r18, 0xEF	; 239
    2faa:	b2 2e       	mov	r11, r18
    2fac:	2a e0       	ldi	r18, 0x0A	; 10
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	25 c0       	rjmp	.+74     	; 0x2ffc <vfprintf+0x27c>
    2fb2:	f2 2f       	mov	r31, r18
    2fb4:	f9 7f       	andi	r31, 0xF9	; 249
    2fb6:	bf 2e       	mov	r11, r31
    2fb8:	8f 36       	cpi	r24, 0x6F	; 111
    2fba:	c1 f0       	breq	.+48     	; 0x2fec <vfprintf+0x26c>
    2fbc:	18 f4       	brcc	.+6      	; 0x2fc4 <vfprintf+0x244>
    2fbe:	88 35       	cpi	r24, 0x58	; 88
    2fc0:	79 f0       	breq	.+30     	; 0x2fe0 <vfprintf+0x260>
    2fc2:	ad c0       	rjmp	.+346    	; 0x311e <vfprintf+0x39e>
    2fc4:	80 37       	cpi	r24, 0x70	; 112
    2fc6:	19 f0       	breq	.+6      	; 0x2fce <vfprintf+0x24e>
    2fc8:	88 37       	cpi	r24, 0x78	; 120
    2fca:	21 f0       	breq	.+8      	; 0x2fd4 <vfprintf+0x254>
    2fcc:	a8 c0       	rjmp	.+336    	; 0x311e <vfprintf+0x39e>
    2fce:	2f 2f       	mov	r18, r31
    2fd0:	20 61       	ori	r18, 0x10	; 16
    2fd2:	b2 2e       	mov	r11, r18
    2fd4:	b4 fe       	sbrs	r11, 4
    2fd6:	0d c0       	rjmp	.+26     	; 0x2ff2 <vfprintf+0x272>
    2fd8:	8b 2d       	mov	r24, r11
    2fda:	84 60       	ori	r24, 0x04	; 4
    2fdc:	b8 2e       	mov	r11, r24
    2fde:	09 c0       	rjmp	.+18     	; 0x2ff2 <vfprintf+0x272>
    2fe0:	24 ff       	sbrs	r18, 4
    2fe2:	0a c0       	rjmp	.+20     	; 0x2ff8 <vfprintf+0x278>
    2fe4:	9f 2f       	mov	r25, r31
    2fe6:	96 60       	ori	r25, 0x06	; 6
    2fe8:	b9 2e       	mov	r11, r25
    2fea:	06 c0       	rjmp	.+12     	; 0x2ff8 <vfprintf+0x278>
    2fec:	28 e0       	ldi	r18, 0x08	; 8
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	05 c0       	rjmp	.+10     	; 0x2ffc <vfprintf+0x27c>
    2ff2:	20 e1       	ldi	r18, 0x10	; 16
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <vfprintf+0x27c>
    2ff8:	20 e1       	ldi	r18, 0x10	; 16
    2ffa:	32 e0       	ldi	r19, 0x02	; 2
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	b7 fe       	sbrs	r11, 7
    3000:	07 c0       	rjmp	.+14     	; 0x3010 <vfprintf+0x290>
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	0c 5f       	subi	r16, 0xFC	; 252
    300c:	1f 4f       	sbci	r17, 0xFF	; 255
    300e:	06 c0       	rjmp	.+12     	; 0x301c <vfprintf+0x29c>
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 5f       	subi	r16, 0xFE	; 254
    301a:	1f 4f       	sbci	r17, 0xFF	; 255
    301c:	a4 01       	movw	r20, r8
    301e:	e6 d0       	rcall	.+460    	; 0x31ec <__ultoa_invert>
    3020:	a8 2e       	mov	r10, r24
    3022:	a8 18       	sub	r10, r8
    3024:	fb 2d       	mov	r31, r11
    3026:	ff 77       	andi	r31, 0x7F	; 127
    3028:	bf 2e       	mov	r11, r31
    302a:	b6 fe       	sbrs	r11, 6
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <vfprintf+0x2c4>
    302e:	2b 2d       	mov	r18, r11
    3030:	2e 7f       	andi	r18, 0xFE	; 254
    3032:	a5 14       	cp	r10, r5
    3034:	50 f4       	brcc	.+20     	; 0x304a <vfprintf+0x2ca>
    3036:	b4 fe       	sbrs	r11, 4
    3038:	0a c0       	rjmp	.+20     	; 0x304e <vfprintf+0x2ce>
    303a:	b2 fc       	sbrc	r11, 2
    303c:	08 c0       	rjmp	.+16     	; 0x304e <vfprintf+0x2ce>
    303e:	2b 2d       	mov	r18, r11
    3040:	2e 7e       	andi	r18, 0xEE	; 238
    3042:	05 c0       	rjmp	.+10     	; 0x304e <vfprintf+0x2ce>
    3044:	7a 2c       	mov	r7, r10
    3046:	2b 2d       	mov	r18, r11
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <vfprintf+0x2d0>
    304a:	7a 2c       	mov	r7, r10
    304c:	01 c0       	rjmp	.+2      	; 0x3050 <vfprintf+0x2d0>
    304e:	75 2c       	mov	r7, r5
    3050:	24 ff       	sbrs	r18, 4
    3052:	0d c0       	rjmp	.+26     	; 0x306e <vfprintf+0x2ee>
    3054:	fe 01       	movw	r30, r28
    3056:	ea 0d       	add	r30, r10
    3058:	f1 1d       	adc	r31, r1
    305a:	80 81       	ld	r24, Z
    305c:	80 33       	cpi	r24, 0x30	; 48
    305e:	11 f4       	brne	.+4      	; 0x3064 <vfprintf+0x2e4>
    3060:	29 7e       	andi	r18, 0xE9	; 233
    3062:	09 c0       	rjmp	.+18     	; 0x3076 <vfprintf+0x2f6>
    3064:	22 ff       	sbrs	r18, 2
    3066:	06 c0       	rjmp	.+12     	; 0x3074 <vfprintf+0x2f4>
    3068:	73 94       	inc	r7
    306a:	73 94       	inc	r7
    306c:	04 c0       	rjmp	.+8      	; 0x3076 <vfprintf+0x2f6>
    306e:	82 2f       	mov	r24, r18
    3070:	86 78       	andi	r24, 0x86	; 134
    3072:	09 f0       	breq	.+2      	; 0x3076 <vfprintf+0x2f6>
    3074:	73 94       	inc	r7
    3076:	23 fd       	sbrc	r18, 3
    3078:	12 c0       	rjmp	.+36     	; 0x309e <vfprintf+0x31e>
    307a:	20 ff       	sbrs	r18, 0
    307c:	06 c0       	rjmp	.+12     	; 0x308a <vfprintf+0x30a>
    307e:	5a 2c       	mov	r5, r10
    3080:	73 14       	cp	r7, r3
    3082:	18 f4       	brcc	.+6      	; 0x308a <vfprintf+0x30a>
    3084:	53 0c       	add	r5, r3
    3086:	57 18       	sub	r5, r7
    3088:	73 2c       	mov	r7, r3
    308a:	73 14       	cp	r7, r3
    308c:	60 f4       	brcc	.+24     	; 0x30a6 <vfprintf+0x326>
    308e:	b7 01       	movw	r22, r14
    3090:	80 e2       	ldi	r24, 0x20	; 32
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	2c 87       	std	Y+12, r18	; 0x0c
    3096:	78 d0       	rcall	.+240    	; 0x3188 <fputc>
    3098:	73 94       	inc	r7
    309a:	2c 85       	ldd	r18, Y+12	; 0x0c
    309c:	f6 cf       	rjmp	.-20     	; 0x308a <vfprintf+0x30a>
    309e:	73 14       	cp	r7, r3
    30a0:	10 f4       	brcc	.+4      	; 0x30a6 <vfprintf+0x326>
    30a2:	37 18       	sub	r3, r7
    30a4:	01 c0       	rjmp	.+2      	; 0x30a8 <vfprintf+0x328>
    30a6:	31 2c       	mov	r3, r1
    30a8:	24 ff       	sbrs	r18, 4
    30aa:	11 c0       	rjmp	.+34     	; 0x30ce <vfprintf+0x34e>
    30ac:	b7 01       	movw	r22, r14
    30ae:	80 e3       	ldi	r24, 0x30	; 48
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	2c 87       	std	Y+12, r18	; 0x0c
    30b4:	69 d0       	rcall	.+210    	; 0x3188 <fputc>
    30b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    30b8:	22 ff       	sbrs	r18, 2
    30ba:	16 c0       	rjmp	.+44     	; 0x30e8 <vfprintf+0x368>
    30bc:	21 ff       	sbrs	r18, 1
    30be:	03 c0       	rjmp	.+6      	; 0x30c6 <vfprintf+0x346>
    30c0:	88 e5       	ldi	r24, 0x58	; 88
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <vfprintf+0x34a>
    30c6:	88 e7       	ldi	r24, 0x78	; 120
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	b7 01       	movw	r22, r14
    30cc:	0c c0       	rjmp	.+24     	; 0x30e6 <vfprintf+0x366>
    30ce:	82 2f       	mov	r24, r18
    30d0:	86 78       	andi	r24, 0x86	; 134
    30d2:	51 f0       	breq	.+20     	; 0x30e8 <vfprintf+0x368>
    30d4:	21 fd       	sbrc	r18, 1
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <vfprintf+0x35c>
    30d8:	80 e2       	ldi	r24, 0x20	; 32
    30da:	01 c0       	rjmp	.+2      	; 0x30de <vfprintf+0x35e>
    30dc:	8b e2       	ldi	r24, 0x2B	; 43
    30de:	27 fd       	sbrc	r18, 7
    30e0:	8d e2       	ldi	r24, 0x2D	; 45
    30e2:	b7 01       	movw	r22, r14
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	50 d0       	rcall	.+160    	; 0x3188 <fputc>
    30e8:	a5 14       	cp	r10, r5
    30ea:	30 f4       	brcc	.+12     	; 0x30f8 <vfprintf+0x378>
    30ec:	b7 01       	movw	r22, r14
    30ee:	80 e3       	ldi	r24, 0x30	; 48
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	4a d0       	rcall	.+148    	; 0x3188 <fputc>
    30f4:	5a 94       	dec	r5
    30f6:	f8 cf       	rjmp	.-16     	; 0x30e8 <vfprintf+0x368>
    30f8:	aa 94       	dec	r10
    30fa:	f4 01       	movw	r30, r8
    30fc:	ea 0d       	add	r30, r10
    30fe:	f1 1d       	adc	r31, r1
    3100:	80 81       	ld	r24, Z
    3102:	b7 01       	movw	r22, r14
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	40 d0       	rcall	.+128    	; 0x3188 <fputc>
    3108:	a1 10       	cpse	r10, r1
    310a:	f6 cf       	rjmp	.-20     	; 0x30f8 <vfprintf+0x378>
    310c:	33 20       	and	r3, r3
    310e:	09 f4       	brne	.+2      	; 0x3112 <vfprintf+0x392>
    3110:	5d ce       	rjmp	.-838    	; 0x2dcc <vfprintf+0x4c>
    3112:	b7 01       	movw	r22, r14
    3114:	80 e2       	ldi	r24, 0x20	; 32
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	37 d0       	rcall	.+110    	; 0x3188 <fputc>
    311a:	3a 94       	dec	r3
    311c:	f7 cf       	rjmp	.-18     	; 0x310c <vfprintf+0x38c>
    311e:	f7 01       	movw	r30, r14
    3120:	86 81       	ldd	r24, Z+6	; 0x06
    3122:	97 81       	ldd	r25, Z+7	; 0x07
    3124:	02 c0       	rjmp	.+4      	; 0x312a <vfprintf+0x3aa>
    3126:	8f ef       	ldi	r24, 0xFF	; 255
    3128:	9f ef       	ldi	r25, 0xFF	; 255
    312a:	2c 96       	adiw	r28, 0x0c	; 12
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	ff 90       	pop	r15
    3140:	ef 90       	pop	r14
    3142:	df 90       	pop	r13
    3144:	cf 90       	pop	r12
    3146:	bf 90       	pop	r11
    3148:	af 90       	pop	r10
    314a:	9f 90       	pop	r9
    314c:	8f 90       	pop	r8
    314e:	7f 90       	pop	r7
    3150:	6f 90       	pop	r6
    3152:	5f 90       	pop	r5
    3154:	4f 90       	pop	r4
    3156:	3f 90       	pop	r3
    3158:	2f 90       	pop	r2
    315a:	08 95       	ret

0000315c <strnlen_P>:
    315c:	fc 01       	movw	r30, r24
    315e:	05 90       	lpm	r0, Z+
    3160:	61 50       	subi	r22, 0x01	; 1
    3162:	70 40       	sbci	r23, 0x00	; 0
    3164:	01 10       	cpse	r0, r1
    3166:	d8 f7       	brcc	.-10     	; 0x315e <strnlen_P+0x2>
    3168:	80 95       	com	r24
    316a:	90 95       	com	r25
    316c:	8e 0f       	add	r24, r30
    316e:	9f 1f       	adc	r25, r31
    3170:	08 95       	ret

00003172 <strnlen>:
    3172:	fc 01       	movw	r30, r24
    3174:	61 50       	subi	r22, 0x01	; 1
    3176:	70 40       	sbci	r23, 0x00	; 0
    3178:	01 90       	ld	r0, Z+
    317a:	01 10       	cpse	r0, r1
    317c:	d8 f7       	brcc	.-10     	; 0x3174 <strnlen+0x2>
    317e:	80 95       	com	r24
    3180:	90 95       	com	r25
    3182:	8e 0f       	add	r24, r30
    3184:	9f 1f       	adc	r25, r31
    3186:	08 95       	ret

00003188 <fputc>:
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	18 2f       	mov	r17, r24
    3192:	09 2f       	mov	r16, r25
    3194:	eb 01       	movw	r28, r22
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	81 fd       	sbrc	r24, 1
    319a:	03 c0       	rjmp	.+6      	; 0x31a2 <fputc+0x1a>
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	20 c0       	rjmp	.+64     	; 0x31e2 <fputc+0x5a>
    31a2:	82 ff       	sbrs	r24, 2
    31a4:	10 c0       	rjmp	.+32     	; 0x31c6 <fputc+0x3e>
    31a6:	4e 81       	ldd	r20, Y+6	; 0x06
    31a8:	5f 81       	ldd	r21, Y+7	; 0x07
    31aa:	2c 81       	ldd	r18, Y+4	; 0x04
    31ac:	3d 81       	ldd	r19, Y+5	; 0x05
    31ae:	42 17       	cp	r20, r18
    31b0:	53 07       	cpc	r21, r19
    31b2:	7c f4       	brge	.+30     	; 0x31d2 <fputc+0x4a>
    31b4:	e8 81       	ld	r30, Y
    31b6:	f9 81       	ldd	r31, Y+1	; 0x01
    31b8:	9f 01       	movw	r18, r30
    31ba:	2f 5f       	subi	r18, 0xFF	; 255
    31bc:	3f 4f       	sbci	r19, 0xFF	; 255
    31be:	39 83       	std	Y+1, r19	; 0x01
    31c0:	28 83       	st	Y, r18
    31c2:	10 83       	st	Z, r17
    31c4:	06 c0       	rjmp	.+12     	; 0x31d2 <fputc+0x4a>
    31c6:	e8 85       	ldd	r30, Y+8	; 0x08
    31c8:	f9 85       	ldd	r31, Y+9	; 0x09
    31ca:	81 2f       	mov	r24, r17
    31cc:	19 95       	eicall
    31ce:	89 2b       	or	r24, r25
    31d0:	29 f7       	brne	.-54     	; 0x319c <fputc+0x14>
    31d2:	2e 81       	ldd	r18, Y+6	; 0x06
    31d4:	3f 81       	ldd	r19, Y+7	; 0x07
    31d6:	2f 5f       	subi	r18, 0xFF	; 255
    31d8:	3f 4f       	sbci	r19, 0xFF	; 255
    31da:	3f 83       	std	Y+7, r19	; 0x07
    31dc:	2e 83       	std	Y+6, r18	; 0x06
    31de:	81 2f       	mov	r24, r17
    31e0:	90 2f       	mov	r25, r16
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	08 95       	ret

000031ec <__ultoa_invert>:
    31ec:	fa 01       	movw	r30, r20
    31ee:	aa 27       	eor	r26, r26
    31f0:	28 30       	cpi	r18, 0x08	; 8
    31f2:	51 f1       	breq	.+84     	; 0x3248 <__ultoa_invert+0x5c>
    31f4:	20 31       	cpi	r18, 0x10	; 16
    31f6:	81 f1       	breq	.+96     	; 0x3258 <__ultoa_invert+0x6c>
    31f8:	e8 94       	clt
    31fa:	6f 93       	push	r22
    31fc:	6e 7f       	andi	r22, 0xFE	; 254
    31fe:	6e 5f       	subi	r22, 0xFE	; 254
    3200:	7f 4f       	sbci	r23, 0xFF	; 255
    3202:	8f 4f       	sbci	r24, 0xFF	; 255
    3204:	9f 4f       	sbci	r25, 0xFF	; 255
    3206:	af 4f       	sbci	r26, 0xFF	; 255
    3208:	b1 e0       	ldi	r27, 0x01	; 1
    320a:	3e d0       	rcall	.+124    	; 0x3288 <__ultoa_invert+0x9c>
    320c:	b4 e0       	ldi	r27, 0x04	; 4
    320e:	3c d0       	rcall	.+120    	; 0x3288 <__ultoa_invert+0x9c>
    3210:	67 0f       	add	r22, r23
    3212:	78 1f       	adc	r23, r24
    3214:	89 1f       	adc	r24, r25
    3216:	9a 1f       	adc	r25, r26
    3218:	a1 1d       	adc	r26, r1
    321a:	68 0f       	add	r22, r24
    321c:	79 1f       	adc	r23, r25
    321e:	8a 1f       	adc	r24, r26
    3220:	91 1d       	adc	r25, r1
    3222:	a1 1d       	adc	r26, r1
    3224:	6a 0f       	add	r22, r26
    3226:	71 1d       	adc	r23, r1
    3228:	81 1d       	adc	r24, r1
    322a:	91 1d       	adc	r25, r1
    322c:	a1 1d       	adc	r26, r1
    322e:	20 d0       	rcall	.+64     	; 0x3270 <__ultoa_invert+0x84>
    3230:	09 f4       	brne	.+2      	; 0x3234 <__ultoa_invert+0x48>
    3232:	68 94       	set
    3234:	3f 91       	pop	r19
    3236:	2a e0       	ldi	r18, 0x0A	; 10
    3238:	26 9f       	mul	r18, r22
    323a:	11 24       	eor	r1, r1
    323c:	30 19       	sub	r19, r0
    323e:	30 5d       	subi	r19, 0xD0	; 208
    3240:	31 93       	st	Z+, r19
    3242:	de f6       	brtc	.-74     	; 0x31fa <__ultoa_invert+0xe>
    3244:	cf 01       	movw	r24, r30
    3246:	08 95       	ret
    3248:	46 2f       	mov	r20, r22
    324a:	47 70       	andi	r20, 0x07	; 7
    324c:	40 5d       	subi	r20, 0xD0	; 208
    324e:	41 93       	st	Z+, r20
    3250:	b3 e0       	ldi	r27, 0x03	; 3
    3252:	0f d0       	rcall	.+30     	; 0x3272 <__ultoa_invert+0x86>
    3254:	c9 f7       	brne	.-14     	; 0x3248 <__ultoa_invert+0x5c>
    3256:	f6 cf       	rjmp	.-20     	; 0x3244 <__ultoa_invert+0x58>
    3258:	46 2f       	mov	r20, r22
    325a:	4f 70       	andi	r20, 0x0F	; 15
    325c:	40 5d       	subi	r20, 0xD0	; 208
    325e:	4a 33       	cpi	r20, 0x3A	; 58
    3260:	18 f0       	brcs	.+6      	; 0x3268 <__ultoa_invert+0x7c>
    3262:	49 5d       	subi	r20, 0xD9	; 217
    3264:	31 fd       	sbrc	r19, 1
    3266:	40 52       	subi	r20, 0x20	; 32
    3268:	41 93       	st	Z+, r20
    326a:	02 d0       	rcall	.+4      	; 0x3270 <__ultoa_invert+0x84>
    326c:	a9 f7       	brne	.-22     	; 0x3258 <__ultoa_invert+0x6c>
    326e:	ea cf       	rjmp	.-44     	; 0x3244 <__ultoa_invert+0x58>
    3270:	b4 e0       	ldi	r27, 0x04	; 4
    3272:	a6 95       	lsr	r26
    3274:	97 95       	ror	r25
    3276:	87 95       	ror	r24
    3278:	77 95       	ror	r23
    327a:	67 95       	ror	r22
    327c:	ba 95       	dec	r27
    327e:	c9 f7       	brne	.-14     	; 0x3272 <__ultoa_invert+0x86>
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	61 05       	cpc	r22, r1
    3284:	71 05       	cpc	r23, r1
    3286:	08 95       	ret
    3288:	9b 01       	movw	r18, r22
    328a:	ac 01       	movw	r20, r24
    328c:	0a 2e       	mov	r0, r26
    328e:	06 94       	lsr	r0
    3290:	57 95       	ror	r21
    3292:	47 95       	ror	r20
    3294:	37 95       	ror	r19
    3296:	27 95       	ror	r18
    3298:	ba 95       	dec	r27
    329a:	c9 f7       	brne	.-14     	; 0x328e <__ultoa_invert+0xa2>
    329c:	62 0f       	add	r22, r18
    329e:	73 1f       	adc	r23, r19
    32a0:	84 1f       	adc	r24, r20
    32a2:	95 1f       	adc	r25, r21
    32a4:	a0 1d       	adc	r26, r0
    32a6:	08 95       	ret

000032a8 <_exit>:
    32a8:	f8 94       	cli

000032aa <__stop_program>:
    32aa:	ff cf       	rjmp	.-2      	; 0x32aa <__stop_program>
